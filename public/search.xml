<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2022/08/17/test/"/>
      <url>/2022/08/17/test/</url>
      
        <content type="html"><![CDATA[<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> to be categoried </category>
          
      </categories>
      
      
        <tags>
            
            <tag> to be tagged </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX非数学符号</title>
      <link href="/2022/07/02/latex-fei-shu-xue-fu-hao/"/>
      <url>/2022/07/02/latex-fei-shu-xue-fu-hao/</url>
      
        <content type="html"><![CDATA[<p>本文中所有符号与 <code>LaTeX</code> 命令均需添加 <code>amssymb</code> 宏包。</p><h2 id="0-非数学符号"><a href="#0-非数学符号" class="headerlink" title="0. 非数学符号"></a>0. 非数学符号</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>\dag</code></td><td align="center">$\dag$</td><td align="center"></td><td align="center"><code>\S</code></td><td align="center">$\S$</td><td align="center"></td><td align="center"><code>\copyright</code></td><td align="center">$\copyright$</td></tr><tr><td align="center"><code>\ddag</code></td><td align="center">$\ddag$</td><td align="center"></td><td align="center"><code>\P</code></td><td align="center">$\P$</td><td align="center"></td><td align="center"><code>\pounds</code></td><td align="center">$\pounds$</td></tr></tbody></table><h2 id="1-AMS定界符"><a href="#1-AMS定界符" class="headerlink" title="1. AMS定界符"></a>1. AMS定界符</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>\ulcorner</code></td><td align="center">$\ulcorner$</td><td align="center"></td><td align="center"><code>\urcorner</code></td><td align="center">$\urcorner$</td><td align="center"></td><td align="center"><code>\llcorner</code></td><td align="center">$\llcorner$</td><td align="center"></td><td align="center"><code>\lrcorner</code></td><td align="center">$\lrcorner$</td></tr><tr><td align="center"><code>\lvert</code></td><td align="center">$\lvert$</td><td align="center"></td><td align="center"><code>\rvert</code></td><td align="center">$\rvert$</td><td align="center"></td><td align="center"><code>\lVert</code></td><td align="center">$\lVert$</td><td align="center"></td><td align="center"><code>\rVert</code></td><td align="center">$\rVert$</td></tr></tbody></table><h2 id="2-AMS希腊和希伯来字母"><a href="#2-AMS希腊和希伯来字母" class="headerlink" title="2. AMS希腊和希伯来字母"></a>2. AMS希腊和希伯来字母</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>\digamma</code></td><td align="center">$\digamma$</td><td align="center"></td><td align="center"><code>$\varkappa</code></td><td align="center">$\varkappa$</td><td align="center"></td><td align="center"><code>\beth</code></td><td align="center">$\beth$</td><td align="center"></td><td align="center"><code>\daleth</code></td><td align="center">$\daleth$</td><td align="center"></td><td align="center"><code>\gimel</code></td><td align="center">$\gimel$</td></tr></tbody></table><h2 id="3-AMS二元关系符"><a href="#3-AMS二元关系符" class="headerlink" title="3. AMS二元关系符"></a>3. AMS二元关系符</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>\lessdot</code></td><td align="center">$\lessdot$</td><td align="center"></td><td align="center"><code>\gtrdot</code></td><td align="center">$\gtrdot$</td><td align="center"></td><td align="center"><code>\doteqdot</code>, <code>\Doteq</code></td><td align="center">$\Doteq$</td></tr><tr><td align="center"><code>\leqslant</code></td><td align="center">$\leqslant$</td><td align="center"></td><td align="center"><code>\geqslant</code></td><td align="center">$\geqslant$</td><td align="center"></td><td align="center"><code>\risingdotseq</code></td><td align="center">$\risingdotseq$</td></tr><tr><td align="center"><code>\eqslantless</code></td><td align="center">$\eqslantless$</td><td align="center"></td><td align="center"><code>\eqslantgtr</code></td><td align="center">$\eqslantgtr$</td><td align="center"></td><td align="center"><code>\fallingdotseq</code></td><td align="center">$\fallingdotseq$</td></tr><tr><td align="center"><code>\leqq</code></td><td align="center">$\leqq$</td><td align="center"></td><td align="center"><code>\geqq</code></td><td align="center">$\geqq$</td><td align="center"></td><td align="center"><code>\eqcirc</code></td><td align="center">$\eqcirc$</td></tr><tr><td align="center"><code>\lll</code>, <code>\llless</code></td><td align="center">$\lll$</td><td align="center"></td><td align="center"><code>\ggg</code>, <code>\gggtr</code></td><td align="center">$\ggg$</td><td align="center"></td><td align="center"><code>\circeq</code></td><td align="center">$\circeq$</td></tr><tr><td align="center"><code>\lesssim</code></td><td align="center">$\lesssim$</td><td align="center"></td><td align="center"><code>\gtrsim</code></td><td align="center">$\gtrsim$</td><td align="center"></td><td align="center"><code>\triangleq</code></td><td align="center">$\triangleq$</td></tr><tr><td align="center"><code>\lessapprox</code></td><td align="center">$\lessapprox$</td><td align="center"></td><td align="center"><code>\gtrapprox</code></td><td align="center">$\gtrapprox$</td><td align="center"></td><td align="center"><code>\bumpeq</code></td><td align="center">$\bumpeq$</td></tr><tr><td align="center"><code>\lessgtr</code></td><td align="center">$\lessgtr$</td><td align="center"></td><td align="center"><code>\gtrless</code></td><td align="center">$\gtrless$</td><td align="center"></td><td align="center"><code>\Bumpeq</code></td><td align="center">$\Bumpeq$</td></tr><tr><td align="center"><code>\lesseqgtr</code></td><td align="center">$\lesseqgtr$</td><td align="center"></td><td align="center"><code>\gtreqless</code></td><td align="center">$\gtreqless$</td><td align="center"></td><td align="center"><code>\thicksim</code></td><td align="center">$\thicksim$</td></tr><tr><td align="center"><code>\lesseqqgtr</code></td><td align="center">$\lesseqqgtr$</td><td align="center"></td><td align="center"><code>\gtreqqless</code></td><td align="center">$\gtreqqless$</td><td align="center"></td><td align="center"><code>\thickapprox</code></td><td align="center">$\thickapprox$</td></tr><tr><td align="center"><code>\preccurlyeq</code></td><td align="center">$\preccurlyeq$</td><td align="center"></td><td align="center"><code>\succcurlyeq</code></td><td align="center">$\succcurlyeq$</td><td align="center"></td><td align="center"><code>\approxeq</code></td><td align="center">$\approxeq$</td></tr><tr><td align="center"><code>\curlyeqprec</code></td><td align="center">$\curlyeqprec$</td><td align="center"></td><td align="center"><code>\curlyeqsucc</code></td><td align="center">$\curlyeqsucc$</td><td align="center"></td><td align="center"><code>\backsim</code></td><td align="center">$\backsim$</td></tr><tr><td align="center"><code>\precsim</code></td><td align="center">$\precsim$</td><td align="center"></td><td align="center"><code>\succsim</code></td><td align="center">$\succsim$</td><td align="center"></td><td align="center"><code>\backsimeq</code></td><td align="center">$\backsimeq$</td></tr><tr><td align="center"><code>\precapprox</code></td><td align="center">$\precapprox$</td><td align="center"></td><td align="center"><code>\succapprox</code></td><td align="center">$\succapprox$</td><td align="center"></td><td align="center"><code>\vDash</code></td><td align="center">$\vDash$</td></tr><tr><td align="center"><code>\subseteqq</code></td><td align="center">$\subseteqq$</td><td align="center"></td><td align="center"><code>\supseteqq</code></td><td align="center">$\supseteqq$</td><td align="center"></td><td align="center"><code>\Vdash</code></td><td align="center">$\Vdash$</td></tr><tr><td align="center"><code>\Subset</code></td><td align="center">$\Subset$</td><td align="center"></td><td align="center"><code>\Supset</code></td><td align="center">$\Supset$</td><td align="center"></td><td align="center"><code>\Vvdash</code></td><td align="center">$\Vvdash$</td></tr><tr><td align="center"><code>\sqsubset</code></td><td align="center">$\sqsubset$</td><td align="center"></td><td align="center"><code>\sqsupset</code></td><td align="center">$\sqsupset$</td><td align="center"></td><td align="center"><code>\backepsilon</code></td><td align="center">$\backepsilon$</td></tr><tr><td align="center"><code>\therefore</code></td><td align="center">$\therefore$</td><td align="center"></td><td align="center"><code>\because</code></td><td align="center">$\because$</td><td align="center"></td><td align="center"><code>\varpropto</code></td><td align="center">$\varpropto$</td></tr><tr><td align="center"><code>\shortmid</code></td><td align="center">$\shortmid$</td><td align="center"></td><td align="center"><code>\shortparallel</code></td><td align="center">$\shortparallel$</td><td align="center"></td><td align="center"><code>\between</code></td><td align="center">$\between$</td></tr><tr><td align="center"><code>\smallsmile</code></td><td align="center">$\smallsmile$</td><td align="center"></td><td align="center"><code>\smallfrown</code></td><td align="center">$\smallfrown$</td><td align="center"></td><td align="center"><code>\pitchfork</code></td><td align="center">$\pitchfork$</td></tr><tr><td align="center"><code>\vartriangleleft</code></td><td align="center">$\vartriangleleft$</td><td align="center"></td><td align="center"><code>\vartriangleright</code></td><td align="center">$\vartriangleright$</td><td align="center"></td><td align="center"><code>\blacktriangleleft</code></td><td align="center">$\blacktriangleleft$</td></tr><tr><td align="center"><code>\trianglelefteq</code></td><td align="center">$\trianglelefteq$</td><td align="center"></td><td align="center"><code>\trianglerighteq</code></td><td align="center">$\trianglerighteq$</td><td align="center"></td><td align="center"><code>\blacktriangleright</code></td><td align="center">$\blacktriangleright$</td></tr></tbody></table><h2 id="4-AMS箭头"><a href="#4-AMS箭头" class="headerlink" title="4. AMS箭头"></a>4. AMS箭头</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>\dashleftarrow</code></td><td align="center">$\dashleftarrow$</td><td align="center"></td><td align="center"><code>\dashrightarrow</code></td><td align="center">$\dashrightarrow$</td><td align="center"></td><td align="center"><code>\multimap</code></td><td align="center">$\multimap$</td></tr><tr><td align="center"><code>\leftleftarrows</code></td><td align="center">$\leftleftarrows$</td><td align="center"></td><td align="center"><code>\rightrightarrows</code></td><td align="center">$\rightrightarrows$</td><td align="center"></td><td align="center"><code>\upuparrows</code></td><td align="center">$\upuparrows$</td></tr><tr><td align="center"><code>\leftrightarrows</code></td><td align="center">$\leftrightarrows$</td><td align="center"></td><td align="center"><code>\rightleftarrows</code></td><td align="center">$\rightleftarrows$</td><td align="center"></td><td align="center"><code>\downdownarrows</code></td><td align="center">$\downdownarrows$</td></tr><tr><td align="center"><code>\Lleftarrow</code></td><td align="center">$\Lleftarrow$</td><td align="center"></td><td align="center"><code>\Rrightarrow</code></td><td align="center">$\Rrightarrow$</td><td align="center"></td><td align="center"><code>\upharpoonleft</code></td><td align="center">$\upharpoonleft$</td></tr><tr><td align="center"><code>\twoheadleftarrow</code></td><td align="center">$\twoheadleftarrow$</td><td align="center"></td><td align="center"><code>\twoheadrightarrow</code></td><td align="center">$\twoheadrightarrow$</td><td align="center"></td><td align="center"><code>\upharpoonright</code></td><td align="center">$\upharpoonright$</td></tr><tr><td align="center"><code>\leftarrowtail</code></td><td align="center">$\leftarrowtail$</td><td align="center"></td><td align="center"><code>\rightarrowtail</code></td><td align="center">$\rightarrowtail$</td><td align="center"></td><td align="center"><code>\downharpoonleft</code></td><td align="center">$\downharpoonleft$</td></tr><tr><td align="center"><code>\leftrightharpoons</code></td><td align="center">$\leftrightharpoons$</td><td align="center"></td><td align="center"><code>\rightleftharpoons</code></td><td align="center">$\rightleftharpoons$</td><td align="center"></td><td align="center"><code>\downharpoonright</code></td><td align="center">$\downharpoonright$</td></tr><tr><td align="center"><code>\Lsh</code></td><td align="center">$\Lsh$</td><td align="center"></td><td align="center"><code>\Rsh</code></td><td align="center">$\Rsh$</td><td align="center"></td><td align="center"><code>\rightsquigarrow</code></td><td align="center">$\rightsquigarrow$</td></tr><tr><td align="center"><code>\looparrowleft</code></td><td align="center">$\looparrowleft$</td><td align="center"></td><td align="center"><code>\looparrowright</code></td><td align="center">$\looparrowright$</td><td align="center"></td><td align="center"><code>\leftrightsquigarrow</code></td><td align="center">$\leftrightsquigarrow$</td></tr><tr><td align="center"><code>\curvearrowleft</code></td><td align="center">$\curvearrowleft$</td><td align="center"></td><td align="center"><code>\curvearrowright</code></td><td align="center">$\curvearrowright$</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><code>\circlearrowleft</code></td><td align="center">$\circlearrowleft$</td><td align="center"></td><td align="center"><code>\circlearrowright</code></td><td align="center">$\circlearrowright$</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="5-AMS二元否定关系符和箭头"><a href="#5-AMS二元否定关系符和箭头" class="headerlink" title="5. AMS二元否定关系符和箭头"></a>5. AMS二元否定关系符和箭头</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>\nless</code></td><td align="center">$\nless$</td><td align="center"></td><td align="center"><code>\ngtr</code></td><td align="center">$\ngtr$</td><td align="center"></td><td align="center"><code>\varsubsetneqq</code></td><td align="center">$\varsubsetneqq$</td></tr><tr><td align="center"><code>\lneq</code></td><td align="center">$\lneq$</td><td align="center"></td><td align="center"><code>\gneq</code></td><td align="center">$\gneq$</td><td align="center"></td><td align="center"><code>\varsupsetneqq</code></td><td align="center">$\varsupsetneqq$</td></tr><tr><td align="center"><code>\nleq</code></td><td align="center">$\nleq$</td><td align="center"></td><td align="center"><code>\ngeq</code></td><td align="center">$\ngeq$</td><td align="center"></td><td align="center"><code>\nsubseteqq</code></td><td align="center">$\nsubseteqq$</td></tr><tr><td align="center"><code>\nleqslant</code></td><td align="center">$\nleqslant$</td><td align="center"></td><td align="center"><code>\ngeqslant</code></td><td align="center">$\ngeqslant$</td><td align="center"></td><td align="center"><code>\nsupseteqq</code></td><td align="center">$\nsupseteqq$</td></tr><tr><td align="center">``\lneqq`</td><td align="center">$\lneqq$</td><td align="center"></td><td align="center"><code>\gneqq</code></td><td align="center">$\gneqq$</td><td align="center"></td><td align="center"><code>\nmid</code></td><td align="center">$\nmid$</td></tr><tr><td align="center"><code>\lvertneqq</code></td><td align="center">$\lvertneqq$</td><td align="center"></td><td align="center"><code>\gvertneqq</code></td><td align="center">$\gvertneqq$</td><td align="center"></td><td align="center"><code>\nparallel</code></td><td align="center">$\nparallel$</td></tr><tr><td align="center"><code>\nleqq</code></td><td align="center">$\nleqq$</td><td align="center"></td><td align="center"><code>\ngeqq</code></td><td align="center">$\ngeqq$</td><td align="center"></td><td align="center"><code>\nshortmid</code></td><td align="center">$\nshortmid$</td></tr><tr><td align="center"><code>\lnsim</code></td><td align="center">$\lnsim$</td><td align="center"></td><td align="center"><code>\gnsim</code></td><td align="center">$\gnsim$</td><td align="center"></td><td align="center"><code>\nshortparallel</code></td><td align="center">$\nshortparallel$</td></tr><tr><td align="center"><code>\lnapprox</code></td><td align="center">$\lnapprox$</td><td align="center"></td><td align="center"><code>\gnapprox</code></td><td align="center">$\gnapprox$</td><td align="center"></td><td align="center"><code>\nsim</code></td><td align="center">$\nsim$</td></tr><tr><td align="center"><code>\nprec</code></td><td align="center">$\nprec$</td><td align="center"></td><td align="center"><code>\nsucc</code></td><td align="center">$\nsucc$</td><td align="center"></td><td align="center"><code>\ncong</code></td><td align="center">$\ncong$</td></tr><tr><td align="center"><code>\npreceq</code></td><td align="center">$\npreceq$</td><td align="center"></td><td align="center"><code>\nsucceq</code></td><td align="center">$\nsucceq$</td><td align="center"></td><td align="center"><code>\nvdash</code></td><td align="center">$\nvdash$</td></tr><tr><td align="center"><code>\precneqq</code></td><td align="center">$\precneqq$</td><td align="center"></td><td align="center"><code>\succneqq</code></td><td align="center">$\succneqq$</td><td align="center"></td><td align="center"><code>\nvDash</code></td><td align="center">$\nvDash$</td></tr><tr><td align="center"><code>\precnsim</code></td><td align="center">$\precnsim$</td><td align="center"></td><td align="center"><code>\succnsim</code></td><td align="center">$\succnsim$</td><td align="center"></td><td align="center"><code>\nVdash</code></td><td align="center">$\nVdash$</td></tr><tr><td align="center"><code>\precnapprox</code></td><td align="center">$\precnapprox$</td><td align="center"></td><td align="center"><code>\succnapprox</code></td><td align="center">$\succnapprox$</td><td align="center"></td><td align="center"><code>\nVDash</code></td><td align="center">$\nVDash$</td></tr><tr><td align="center"><code>\subsetneq</code></td><td align="center">$\subsetneq$</td><td align="center"></td><td align="center"><code>\supsetneq</code></td><td align="center">$\supsetneq$</td><td align="center"></td><td align="center"><code>\ntriangleleft</code></td><td align="center">$\ntriangleleft$</td></tr><tr><td align="center"><code>\varsubsetneq</code></td><td align="center">$\varsubsetneq$</td><td align="center"></td><td align="center"><code>\varsupsetneq</code></td><td align="center">$\varsupsetneq$</td><td align="center"></td><td align="center"><code>\ntriangleright</code></td><td align="center">$\ntriangleright$</td></tr><tr><td align="center"><code>\nsubseteq</code></td><td align="center">$\nsubseteq$</td><td align="center"></td><td align="center"><code>\nsupseteq</code></td><td align="center">$\nsupseteq$</td><td align="center"></td><td align="center"><code>\ntrianglelefteq</code></td><td align="center">$\ntrianglelefteq$</td></tr><tr><td align="center"><code>\nleftarrow</code></td><td align="center">$\nleftarrow$</td><td align="center"></td><td align="center"><code>\nrightarrow</code></td><td align="center">$\nrightarrow$</td><td align="center"></td><td align="center"><code>\nleftrightarrow</code></td><td align="center">$\nleftrightarrow$</td></tr><tr><td align="center"><code>\nLeftarrow</code></td><td align="center">$\nLeftarrow$</td><td align="center"></td><td align="center"><code>\nRightarrow</code></td><td align="center">$\nRightarrow$</td><td align="center"></td><td align="center"><code>\nLeftrightarrow</code></td><td align="center">$\nLeftrightarrow$</td></tr></tbody></table><h2 id="6-AMS二元运算符"><a href="#6-AMS二元运算符" class="headerlink" title="6. AMS二元运算符"></a>6. AMS二元运算符</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>\dotplus</code></td><td align="center">$\dotplus$</td><td align="center"></td><td align="center"><code>\centerdot</code></td><td align="center">$\centerdot$</td><td align="center"></td><td align="center"><code>\intercal</code></td><td align="center">$\intercal$</td></tr><tr><td align="center"><code>\ltimes</code></td><td align="center">$\ltimes$</td><td align="center"></td><td align="center"><code>\rtimes</code></td><td align="center">$\rtimes$</td><td align="center"></td><td align="center"><code>\divideontimes</code></td><td align="center">$\divideontimes$</td></tr><tr><td align="center"><code>\Cup</code>, <code>\doublecup</code></td><td align="center">$\Cup$</td><td align="center"></td><td align="center"><code>\Cap</code>, <code>\doublecap</code></td><td align="center">$\Cap$</td><td align="center"></td><td align="center"><code>\smallsetminus</code></td><td align="center">$\smallsetminus$</td></tr><tr><td align="center"><code>\veebar</code></td><td align="center">$\veebar$</td><td align="center"></td><td align="center"><code>\barwedge</code></td><td align="center">$\barwedge$</td><td align="center"></td><td align="center"><code>\doublebarwedge</code></td><td align="center">$\doublebarwedge$</td></tr><tr><td align="center"><code>\boxplus</code></td><td align="center">$\boxplus$</td><td align="center"></td><td align="center"><code>\boxminus</code></td><td align="center">$\boxminus$</td><td align="center"></td><td align="center"><code>\circleddash</code></td><td align="center">$\circleddash$</td></tr><tr><td align="center"><code>\boxtimes</code></td><td align="center">$\boxtimes$</td><td align="center"></td><td align="center"><code>\boxdot</code></td><td align="center">$\boxdot$</td><td align="center"></td><td align="center"><code>\circledcirc</code></td><td align="center">$\circledcirc$</td></tr><tr><td align="center"><code>\leftthreetimes</code></td><td align="center">$\leftthreetimes$</td><td align="center"></td><td align="center"><code>\rightthreetimes</code></td><td align="center">$\rightthreetimes$</td><td align="center"></td><td align="center"><code>\circledast</code></td><td align="center">$\circledast$</td></tr><tr><td align="center"><code>\curlyvee</code></td><td align="center">$\curlyvee$</td><td align="center"></td><td align="center"><code>\curlywedge</code></td><td align="center">$\curlywedge$</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="7-AMS其他符号"><a href="#7-AMS其他符号" class="headerlink" title="7. AMS其他符号"></a>7. AMS其他符号</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>\hbar</code></td><td align="center">$\hbar$</td><td align="center"></td><td align="center"><code>\hslash</code></td><td align="center">$\hslash$</td><td align="center"></td><td align="center"><code>\Bbbk</code></td><td align="center">$\Bbbk$</td></tr><tr><td align="center"><code>\square</code></td><td align="center">$\square$</td><td align="center"></td><td align="center"><code>\blacksquare</code></td><td align="center">$\blacksquare$</td><td align="center"></td><td align="center"><code>\circledS</code></td><td align="center">$\circledS$</td></tr><tr><td align="center"><code>\vartriangle</code></td><td align="center">$\vartriangle$</td><td align="center"></td><td align="center"><code>\blacktriangle</code></td><td align="center">$\blacktriangle$</td><td align="center"></td><td align="center"><code>\complement</code></td><td align="center">$\complement$</td></tr><tr><td align="center"><code>\triangledown</code></td><td align="center">$\triangledown$</td><td align="center"></td><td align="center"><code>\blacktriangledown</code></td><td align="center">$\blacktriangledown$</td><td align="center"></td><td align="center"><code>\Game</code></td><td align="center">$\Game$</td></tr><tr><td align="center"><code>\lozenge</code></td><td align="center">$\lozenge$</td><td align="center"></td><td align="center"><code>\blacklozenge</code></td><td align="center">$\blacklozenge$</td><td align="center"></td><td align="center"><code>\bigstar</code></td><td align="center">$\bigstar$</td></tr><tr><td align="center"><code>\angle</code></td><td align="center">$\angle$</td><td align="center"></td><td align="center"><code>\measuredangle</code></td><td align="center">$\measuredangle$</td><td align="center"></td><td align="center"><code>\bigstar</code></td><td align="center">$\bigstar$</td></tr><tr><td align="center"><code>\diagup</code></td><td align="center">$\diagup$</td><td align="center"></td><td align="center"><code>\diagdown</code></td><td align="center">$\diagdown$</td><td align="center"></td><td align="center"><code>\backprime</code></td><td align="center">$\backprime$</td></tr><tr><td align="center"><code>\nexists</code></td><td align="center">$\nexists$</td><td align="center"></td><td align="center"><code>\Finv</code></td><td align="center">$\Finv$</td><td align="center"></td><td align="center"><code>\varnothing</code></td><td align="center">$\varnothing$</td></tr><tr><td align="center"><code>\eth</code></td><td align="center">$\eth$</td><td align="center"></td><td align="center"><code>\mho</code></td><td align="center">$\mho$</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>参考：</p><ol><li><p><a href="http://persoweb.whu.edu.cn/mathsymb.pdf">数学符号表</a></p></li><li><p><a href="https://www.egr.msu.edu/~renjian/LaTeX-Math-Symbols.pdf">LATEX Mathematical Symbols</a></p></li><li><p><a href="https://artofproblemsolving.com/wiki/index.php/LaTeX:Symbols">LaTeX:Symbols</a></p></li><li><p><a href="https://artofproblemsolving.com/wiki/index.php/LaTeX:Commands">LaTeX:Commands</a></p></li></ol><p>本文源码：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">本文中所有符号与 <span class="token code-snippet code keyword">`LaTeX`</span> 命令均需添加 <span class="token code-snippet code keyword">`amssymb`</span> 宏包。<span class="token title important"><span class="token punctuation">##</span> 0. 非数学符号</span>| <span class="token code-snippet code keyword">`LaTeX`</span>命令 |  符号   |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令 | 符号 |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令  |     符号     || :---------: | :-----: | :--: | :---------: | :--: | :--: | :----------: | :----------: ||   <span class="token code-snippet code keyword">`\dag`</span>    | $\dag$  |      |    <span class="token code-snippet code keyword">`\S`</span>     | $\S$ |      | <span class="token code-snippet code keyword">`\copyright`</span> | $\copyright$ ||   <span class="token code-snippet code keyword">`\ddag`</span>   | $\ddag$ |      |    <span class="token code-snippet code keyword">`\P`</span>     | $\P$ |      |  <span class="token code-snippet code keyword">`\pounds`</span>   |  $\pounds$   |<span class="token title important"><span class="token punctuation">##</span> 1. AMS定界符</span>| <span class="token code-snippet code keyword">`LaTeX`</span>命令 |    符号     |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令 |    符号     |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令 |    符号     |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令 |    符号     || :---------: | :---------: | :--: | :---------: | :---------: | :--: | :---------: | :---------: | :--: | :---------: | :---------: || <span class="token code-snippet code keyword">`\ulcorner`</span> | $\ulcorner$ |      | <span class="token code-snippet code keyword">`\urcorner`</span> | $\urcorner$ |      | <span class="token code-snippet code keyword">`\llcorner`</span> | $\llcorner$ |      | <span class="token code-snippet code keyword">`\lrcorner`</span> | $\lrcorner$ ||  <span class="token code-snippet code keyword">`\lvert`</span>   |  $\lvert$   |      |  <span class="token code-snippet code keyword">`\rvert`</span>   |  $\rvert$   |      |  <span class="token code-snippet code keyword">`\lVert`</span>   |  $\lVert$   |      |  <span class="token code-snippet code keyword">`\rVert`</span>   |  $\rVert$   |<span class="token title important"><span class="token punctuation">##</span> 2. AMS希腊和希伯来字母</span>| <span class="token code-snippet code keyword">`LaTeX`</span>命令 |    符号    |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令  |    符号     |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令 |  符号   |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令 |   符号    |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令 |   符号   || :---------: | :--------: | :--: | :----------: | :---------: | :--: | :---------: | :-----: | :--: | :---------: | :-------: | :--: | :---------: | :------: || <span class="token code-snippet code keyword">`\digamma`</span>  | $\digamma$ |      | <span class="token code-snippet code keyword">`$\varkappa`</span> | $\varkappa$ |      |   <span class="token code-snippet code keyword">`\beth`</span>   | $\beth$ |      |  <span class="token code-snippet code keyword">`\daleth`</span>  | $\daleth$ |      |  <span class="token code-snippet code keyword">`\gimel`</span>   | $\gimel$ |<span class="token title important"><span class="token punctuation">##</span> 3. AMS二元关系符</span>|   <span class="token code-snippet code keyword">`LaTeX`</span>命令   | 符号 |      |    <span class="token code-snippet code keyword">`LaTeX`</span>命令    | 符号 |      |     <span class="token code-snippet code keyword">`LaTeX`</span>命令     | 符号 || :--------------: | :--: | :--: | :---------------: | :--: | :--: | :-----------------: | :--: ||     <span class="token code-snippet code keyword">`\lessdot`</span>     |     $\lessdot$     |      |      <span class="token code-snippet code keyword">`\gtrdot`</span>      |      $\gtrdot$      |      | <span class="token code-snippet code keyword">`\doteqdot`</span>, <span class="token code-snippet code keyword">`\Doteq`</span> | $\Doteq$ ||    <span class="token code-snippet code keyword">`\leqslant`</span>    |    $\leqslant$    |      |     <span class="token code-snippet code keyword">`\geqslant`</span>     |     $\geqslant$     |      |    <span class="token code-snippet code keyword">`\risingdotseq`</span>    |    $\risingdotseq$    ||   <span class="token code-snippet code keyword">`\eqslantless`</span>   |   $\eqslantless$   |      |    <span class="token code-snippet code keyword">`\eqslantgtr`</span>    |    $\eqslantgtr$    |      |   <span class="token code-snippet code keyword">`\fallingdotseq`</span>   |   $\fallingdotseq$   ||      <span class="token code-snippet code keyword">`\leqq`</span>      |      $\leqq$      |      |       <span class="token code-snippet code keyword">`\geqq`</span>       |       $\geqq$       |      |       <span class="token code-snippet code keyword">`\eqcirc`</span>       |       $\eqcirc$       || <span class="token code-snippet code keyword">`\lll`</span>, <span class="token code-snippet code keyword">`\llless`</span> |       $\lll$       |      |  <span class="token code-snippet code keyword">`\ggg`</span>, <span class="token code-snippet code keyword">`\gggtr`</span>  |  $\ggg$  |      |       <span class="token code-snippet code keyword">`\circeq`</span>       |       $\circeq$       ||     <span class="token code-snippet code keyword">`\lesssim`</span>     |     $\lesssim$     |      |      <span class="token code-snippet code keyword">`\gtrsim`</span>      |      $\gtrsim$      |      |     <span class="token code-snippet code keyword">`\triangleq`</span>     |     $\triangleq$     ||   <span class="token code-snippet code keyword">`\lessapprox`</span>   |   $\lessapprox$   |      |    <span class="token code-snippet code keyword">`\gtrapprox`</span>    |    $\gtrapprox$    |      |       <span class="token code-snippet code keyword">`\bumpeq`</span>       |       $\bumpeq$       ||     <span class="token code-snippet code keyword">`\lessgtr`</span>     |     $\lessgtr$     |      |     <span class="token code-snippet code keyword">`\gtrless`</span>     |     $\gtrless$     |      |       <span class="token code-snippet code keyword">`\Bumpeq`</span>       |       $\Bumpeq$       ||    <span class="token code-snippet code keyword">`\lesseqgtr`</span>    |    $\lesseqgtr$    |      |    <span class="token code-snippet code keyword">`\gtreqless`</span>    |    $\gtreqless$    |      |      <span class="token code-snippet code keyword">`\thicksim`</span>      |      $\thicksim$      ||   <span class="token code-snippet code keyword">`\lesseqqgtr`</span>   |   $\lesseqqgtr$   |      |    <span class="token code-snippet code keyword">`\gtreqqless`</span>    |    $\gtreqqless$    |      |    <span class="token code-snippet code keyword">`\thickapprox`</span>    |    $\thickapprox$    ||   <span class="token code-snippet code keyword">`\preccurlyeq`</span>   |   $\preccurlyeq$   |      |   <span class="token code-snippet code keyword">`\succcurlyeq`</span>   |   $\succcurlyeq$   |      |      <span class="token code-snippet code keyword">`\approxeq`</span>      |      $\approxeq$      ||   <span class="token code-snippet code keyword">`\curlyeqprec`</span>   |   $\curlyeqprec$   |      |   <span class="token code-snippet code keyword">`\curlyeqsucc`</span>   |   $\curlyeqsucc$   |      |      <span class="token code-snippet code keyword">`\backsim`</span>      |      $\backsim$      ||     <span class="token code-snippet code keyword">`\precsim`</span>     |     $\precsim$     |      |     <span class="token code-snippet code keyword">`\succsim`</span>     |     $\succsim$     |      |     <span class="token code-snippet code keyword">`\backsimeq`</span>     |     $\backsimeq$     ||   <span class="token code-snippet code keyword">`\precapprox`</span>   |   $\precapprox$   |      |    <span class="token code-snippet code keyword">`\succapprox`</span>    |    $\succapprox$    |      |       <span class="token code-snippet code keyword">`\vDash`</span>       |       $\vDash$       ||    <span class="token code-snippet code keyword">`\subseteqq`</span>    |    $\subseteqq$    |      |    <span class="token code-snippet code keyword">`\supseteqq`</span>    |    $\supseteqq$    |      |       <span class="token code-snippet code keyword">`\Vdash`</span>       |       $\Vdash$       ||     <span class="token code-snippet code keyword">`\Subset`</span>     |     $\Subset$     |      |      <span class="token code-snippet code keyword">`\Supset`</span>      |      $\Supset$      |      |       <span class="token code-snippet code keyword">`\Vvdash`</span>       |       $\Vvdash$       ||    <span class="token code-snippet code keyword">`\sqsubset`</span>    |    $\sqsubset$    |      |     <span class="token code-snippet code keyword">`\sqsupset`</span>     |     $\sqsupset$     |      |    <span class="token code-snippet code keyword">`\backepsilon`</span>    |    $\backepsilon$    ||    <span class="token code-snippet code keyword">`\therefore`</span>    |    $\therefore$    |      |     <span class="token code-snippet code keyword">`\because`</span>     |     $\because$     |      |     <span class="token code-snippet code keyword">`\varpropto`</span>     |     $\varpropto$     ||    <span class="token code-snippet code keyword">`\shortmid`</span>    |    $\shortmid$    |      |  <span class="token code-snippet code keyword">`\shortparallel`</span>  |  $\shortparallel$  |      |      <span class="token code-snippet code keyword">`\between`</span>      |      $\between$      ||   <span class="token code-snippet code keyword">`\smallsmile`</span>   |   $\smallsmile$   |      |    <span class="token code-snippet code keyword">`\smallfrown`</span>    |    $\smallfrown$    |      |     <span class="token code-snippet code keyword">`\pitchfork`</span>     |     $\pitchfork$     || <span class="token code-snippet code keyword">`\vartriangleleft`</span> | $\vartriangleleft$ |      | <span class="token code-snippet code keyword">`\vartriangleright`</span> | $\vartriangleright$ |      | <span class="token code-snippet code keyword">`\blacktriangleleft`</span> | $\blacktriangleleft$ || <span class="token code-snippet code keyword">`\trianglelefteq`</span> | $\trianglelefteq$ |      | <span class="token code-snippet code keyword">`\trianglerighteq`</span> | $\trianglerighteq$ |      | <span class="token code-snippet code keyword">`\blacktriangleright`</span> | $\blacktriangleright$ |<span class="token title important"><span class="token punctuation">##</span> 4. AMS箭头</span>|    <span class="token code-snippet code keyword">`LaTeX`</span>命令     | 符号 |      |    <span class="token code-snippet code keyword">`LaTeX`</span>命令     | 符号 |      |     <span class="token code-snippet code keyword">`LaTeX`</span>命令      | 符号 || :----------------: | :--: | :--: | :----------------: | :--: | :--: | :------------------: | :--: ||   <span class="token code-snippet code keyword">`\dashleftarrow`</span>   |   $\dashleftarrow$   |      |  <span class="token code-snippet code keyword">`\dashrightarrow`</span>  |  $\dashrightarrow$  |  |      <span class="token code-snippet code keyword">`\multimap`</span>      |      $\multimap$      ||  <span class="token code-snippet code keyword">`\leftleftarrows`</span>  |  $\leftleftarrows$  |      | <span class="token code-snippet code keyword">`\rightrightarrows`</span> | $\rightrightarrows$ |      |     <span class="token code-snippet code keyword">`\upuparrows`</span>     |     $\upuparrows$     ||  <span class="token code-snippet code keyword">`\leftrightarrows`</span>  |  $\leftrightarrows$  |      |  <span class="token code-snippet code keyword">`\rightleftarrows`</span>  |  $\rightleftarrows$  |      |   <span class="token code-snippet code keyword">`\downdownarrows`</span>   |   $\downdownarrows$   ||    <span class="token code-snippet code keyword">`\Lleftarrow`</span>    |    $\Lleftarrow$    |      |    <span class="token code-snippet code keyword">`\Rrightarrow`</span>    |    $\Rrightarrow$    |      |    <span class="token code-snippet code keyword">`\upharpoonleft`</span>    |    $\upharpoonleft$    || <span class="token code-snippet code keyword">`\twoheadleftarrow`</span> | $\twoheadleftarrow$ |      | <span class="token code-snippet code keyword">`\twoheadrightarrow`</span> | $\twoheadrightarrow$ |      |   <span class="token code-snippet code keyword">`\upharpoonright`</span>   |   $\upharpoonright$   ||   <span class="token code-snippet code keyword">`\leftarrowtail`</span>   |   $\leftarrowtail$   |      |  <span class="token code-snippet code keyword">`\rightarrowtail`</span>  |  $\rightarrowtail$  |      |   <span class="token code-snippet code keyword">`\downharpoonleft`</span>   |   $\downharpoonleft$   || <span class="token code-snippet code keyword">`\leftrightharpoons`</span> | $\leftrightharpoons$ |      | <span class="token code-snippet code keyword">`\rightleftharpoons`</span> | $\rightleftharpoons$ |      |  <span class="token code-snippet code keyword">`\downharpoonright`</span>  |  $\downharpoonright$  ||        <span class="token code-snippet code keyword">`\Lsh`</span>        |        $\Lsh$        |      |        <span class="token code-snippet code keyword">`\Rsh`</span>        |        $\Rsh$        |      |   <span class="token code-snippet code keyword">`\rightsquigarrow`</span>   |   $\rightsquigarrow$   ||   <span class="token code-snippet code keyword">`\looparrowleft`</span>   |   $\looparrowleft$   |      |  <span class="token code-snippet code keyword">`\looparrowright`</span>  |  $\looparrowright$  |      | <span class="token code-snippet code keyword">`\leftrightsquigarrow`</span> | $\leftrightsquigarrow$ ||  <span class="token code-snippet code keyword">`\curvearrowleft`</span>  |  $\curvearrowleft$  |      |  <span class="token code-snippet code keyword">`\curvearrowright`</span>  |  $\curvearrowright$  |      |                      |                      ||  <span class="token code-snippet code keyword">`\circlearrowleft`</span>  |  $\circlearrowleft$  |      | <span class="token code-snippet code keyword">`\circlearrowright`</span> | $\circlearrowright$ |      |                      |                      |<span class="token title important"><span class="token punctuation">##</span> 5. AMS二元否定关系符和箭头</span>|  <span class="token code-snippet code keyword">`LaTeX`</span>命令  | 符号 |      |  <span class="token code-snippet code keyword">`LaTeX`</span>命令  | 符号 |      |   <span class="token code-snippet code keyword">`LaTeX`</span>命令    | 符号 || :-----------: | :--: | :--: | :-----------: | :--: | :--: | :--------------: | :--: ||    <span class="token code-snippet code keyword">`\nless`</span>    |   $\nless$  ||<span class="token code-snippet code keyword">`\ngtr`</span>|$\ngtr$||<span class="token code-snippet code keyword">`\varsubsetneqq`</span>|$\varsubsetneqq$||     <span class="token code-snippet code keyword">`\lneq`</span>     | $\lneq$ ||<span class="token code-snippet code keyword">`\gneq`</span>|$\gneq$||<span class="token code-snippet code keyword">`\varsupsetneqq`</span>|$\varsupsetneqq$||     <span class="token code-snippet code keyword">`\nleq`</span>     |     $\nleq$     |      |     <span class="token code-snippet code keyword">`\ngeq`</span>     |     $\ngeq$     |      |   <span class="token code-snippet code keyword">`\nsubseteqq`</span>   |   $\nsubseteqq$   ||  <span class="token code-snippet code keyword">`\nleqslant`</span>  |  $\nleqslant$  |      |  <span class="token code-snippet code keyword">`\ngeqslant`</span>  |  $\ngeqslant$  |      |   <span class="token code-snippet code keyword">`\nsupseteqq`</span>   |   $\nsupseteqq$   ||    ``\lneqq<span class="token code-snippet code keyword">`    |    $\lneqq$    |      |    `</span>\gneqq<span class="token code-snippet code keyword">`    |    $\gneqq$    |      |      `</span>\nmid`      |      $\nmid$      ||  <span class="token code-snippet code keyword">`\lvertneqq`</span>  |  $\lvertneqq$  |      |  <span class="token code-snippet code keyword">`\gvertneqq`</span>  |  $\gvertneqq$  |      |    <span class="token code-snippet code keyword">`\nparallel`</span>    |    $\nparallel$    ||    <span class="token code-snippet code keyword">`\nleqq`</span>    |    $\nleqq$    |      |    <span class="token code-snippet code keyword">`\ngeqq`</span>    |    $\ngeqq$    |      |    <span class="token code-snippet code keyword">`\nshortmid`</span>    |    $\nshortmid$    ||    <span class="token code-snippet code keyword">`\lnsim`</span>    |    $\lnsim$    |      |    <span class="token code-snippet code keyword">`\gnsim`</span>    |    $\gnsim$    |      | <span class="token code-snippet code keyword">`\nshortparallel`</span> | $\nshortparallel$ ||   <span class="token code-snippet code keyword">`\lnapprox`</span>   |   $\lnapprox$   |      |   <span class="token code-snippet code keyword">`\gnapprox`</span>   |   $\gnapprox$   |      |      <span class="token code-snippet code keyword">`\nsim`</span>      |      $\nsim$      ||    <span class="token code-snippet code keyword">`\nprec`</span>    |    $\nprec$    |      |    <span class="token code-snippet code keyword">`\nsucc`</span>    |    $\nsucc$    |      |      <span class="token code-snippet code keyword">`\ncong`</span>      |      $\ncong$      ||   <span class="token code-snippet code keyword">`\npreceq`</span>   |   $\npreceq$   |      |   <span class="token code-snippet code keyword">`\nsucceq`</span>   |   $\nsucceq$   |      |     <span class="token code-snippet code keyword">`\nvdash`</span>     |     $\nvdash$     ||   <span class="token code-snippet code keyword">`\precneqq`</span>   |   $\precneqq$   |      |   <span class="token code-snippet code keyword">`\succneqq`</span>   |   $\succneqq$   |      |     <span class="token code-snippet code keyword">`\nvDash`</span>     |     $\nvDash$     ||   <span class="token code-snippet code keyword">`\precnsim`</span>   |   $\precnsim$   |      |   <span class="token code-snippet code keyword">`\succnsim`</span>   |   $\succnsim$   |      |     <span class="token code-snippet code keyword">`\nVdash`</span>     |     $\nVdash$     || <span class="token code-snippet code keyword">`\precnapprox`</span> | $\precnapprox$ |      | <span class="token code-snippet code keyword">`\succnapprox`</span> | $\succnapprox$ |      |     <span class="token code-snippet code keyword">`\nVDash`</span>     |     $\nVDash$     ||  <span class="token code-snippet code keyword">`\subsetneq`</span>  |  $\subsetneq$  |      |  <span class="token code-snippet code keyword">`\supsetneq`</span>  |  $\supsetneq$  |      |  <span class="token code-snippet code keyword">`\ntriangleleft`</span>  |  $\ntriangleleft$  || <span class="token code-snippet code keyword">`\varsubsetneq`</span> | $\varsubsetneq$ |      | <span class="token code-snippet code keyword">`\varsupsetneq`</span> | $\varsupsetneq$ |      | <span class="token code-snippet code keyword">`\ntriangleright`</span> | $\ntriangleright$ ||  <span class="token code-snippet code keyword">`\nsubseteq`</span>  |  $\nsubseteq$  |      |  <span class="token code-snippet code keyword">`\nsupseteq`</span>  |  $\nsupseteq$  |      | <span class="token code-snippet code keyword">`\ntrianglelefteq`</span> | $\ntrianglelefteq$ ||  <span class="token code-snippet code keyword">`\nleftarrow`</span>  |  $\nleftarrow$  |      | <span class="token code-snippet code keyword">`\nrightarrow`</span> | $\nrightarrow$ |      | <span class="token code-snippet code keyword">`\nleftrightarrow`</span> | $\nleftrightarrow$ ||  <span class="token code-snippet code keyword">`\nLeftarrow`</span>  |  $\nLeftarrow$  |      | <span class="token code-snippet code keyword">`\nRightarrow`</span> | $\nRightarrow$ |      | <span class="token code-snippet code keyword">`\nLeftrightarrow`</span> | $\nLeftrightarrow$ |<span class="token title important"><span class="token punctuation">##</span> 6. AMS二元运算符</span>|    <span class="token code-snippet code keyword">`LaTeX`</span>命令     | 符号 |      |    <span class="token code-snippet code keyword">`LaTeX`</span>命令     | 符号 |      |   <span class="token code-snippet code keyword">`LaTeX`</span>命令   | 符号 || :----------------: | :--: | :--: | :----------------: | :--: | :--: | :-------------: | :--: ||      <span class="token code-snippet code keyword">`\dotplus`</span>      |      $\dotplus$      |      |     <span class="token code-snippet code keyword">`\centerdot`</span>     |    $\centerdot$    |      |    <span class="token code-snippet code keyword">`\intercal`</span>    |    $\intercal$    ||      <span class="token code-snippet code keyword">`\ltimes`</span>      |      $\ltimes$      |      |      <span class="token code-snippet code keyword">`\rtimes`</span>      |      $\rtimes$      |      | <span class="token code-snippet code keyword">`\divideontimes`</span> | $\divideontimes$ || <span class="token code-snippet code keyword">`\Cup`</span>, <span class="token code-snippet code keyword">`\doublecup`</span> | $\Cup$ |      | <span class="token code-snippet code keyword">`\Cap`</span>, <span class="token code-snippet code keyword">`\doublecap`</span> | $\Cap$ |      | <span class="token code-snippet code keyword">`\smallsetminus`</span> | $\smallsetminus$ ||      <span class="token code-snippet code keyword">`\veebar`</span>      |      $\veebar$      |      |     <span class="token code-snippet code keyword">`\barwedge`</span>     |     $\barwedge$     |      | <span class="token code-snippet code keyword">`\doublebarwedge`</span> | $\doublebarwedge$ ||      <span class="token code-snippet code keyword">`\boxplus`</span>      |      $\boxplus$      |      |     <span class="token code-snippet code keyword">`\boxminus`</span>     |     $\boxminus$     |      |  <span class="token code-snippet code keyword">`\circleddash`</span>  |  $\circleddash$  ||     <span class="token code-snippet code keyword">`\boxtimes`</span>     |     $\boxtimes$     |      |      <span class="token code-snippet code keyword">`\boxdot`</span>      |      $\boxdot$      |      |  <span class="token code-snippet code keyword">`\circledcirc`</span>  |  $\circledcirc$  ||  <span class="token code-snippet code keyword">`\leftthreetimes`</span>  |  $\leftthreetimes$  |      |  <span class="token code-snippet code keyword">`\rightthreetimes`</span>  | $\rightthreetimes$ |      |   <span class="token code-snippet code keyword">`\circledast`</span>   |   $\circledast$   ||     <span class="token code-snippet code keyword">`\curlyvee`</span>     |     $\curlyvee$     |      |    <span class="token code-snippet code keyword">`\curlywedge`</span>    |    $\curlywedge$    |      |                 |                 |<span class="token title important"><span class="token punctuation">##</span> 7. AMS其他符号</span>|  <span class="token code-snippet code keyword">`LaTeX`</span>命令  | 符号 |      |    <span class="token code-snippet code keyword">`LaTeX`</span>命令     | 符号 |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令 | 符号 || :-----------: | :--: | :--: | :----------------: | :--: | :--: | :---------: | :--: ||     <span class="token code-snippet code keyword">`\hbar`</span>     |     $\hbar$     |      |      <span class="token code-snippet code keyword">`\hslash`</span>      |      $\hslash$      |      |    <span class="token code-snippet code keyword">`\Bbbk`</span>    |    $\Bbbk$    ||    <span class="token code-snippet code keyword">`\square`</span>    |    $\square$    |      |    <span class="token code-snippet code keyword">`\blacksquare`</span>    |    $\blacksquare$    |      |  <span class="token code-snippet code keyword">`\circledS`</span>  |  $\circledS$  || <span class="token code-snippet code keyword">`\vartriangle`</span> | $\vartriangle$ |      |   <span class="token code-snippet code keyword">`\blacktriangle`</span>   |   $\blacktriangle$   |      | <span class="token code-snippet code keyword">`\complement`</span> | $\complement$ || <span class="token code-snippet code keyword">`\triangledown`</span> | $\triangledown$ |      | <span class="token code-snippet code keyword">`\blacktriangledown`</span> | $\blacktriangledown$ |      |    <span class="token code-snippet code keyword">`\Game`</span>    |    $\Game$    ||   <span class="token code-snippet code keyword">`\lozenge`</span>   |   $\lozenge$   |      |   <span class="token code-snippet code keyword">`\blacklozenge`</span>   |   $\blacklozenge$   |      |  <span class="token code-snippet code keyword">`\bigstar`</span>  |  $\bigstar$  ||    <span class="token code-snippet code keyword">`\angle`</span>    |    $\angle$    |      |   <span class="token code-snippet code keyword">`\measuredangle`</span>   |   $\measuredangle$   |      |  <span class="token code-snippet code keyword">`\bigstar`</span>  |  $\bigstar$  ||    <span class="token code-snippet code keyword">`\diagup`</span>    |    $\diagup$    |      |     <span class="token code-snippet code keyword">`\diagdown`</span>     |     $\diagdown$     |      | <span class="token code-snippet code keyword">`\backprime`</span> | $\backprime$ ||   <span class="token code-snippet code keyword">`\nexists`</span>   |   $\nexists$   |      |       <span class="token code-snippet code keyword">`\Finv`</span>       |       $\Finv$       |      | <span class="token code-snippet code keyword">`\varnothing`</span> | $\varnothing$ ||     <span class="token code-snippet code keyword">`\eth`</span>     |     $\eth$     |      |        <span class="token code-snippet code keyword">`\mho`</span>        |        $\mho$        |      |             |             |参考：<span class="token list punctuation">1.</span> <span class="token url">[<span class="token content">数学符号表</span>](<span class="token url">http://persoweb.whu.edu.cn/mathsymb.pdf</span>)</span><span class="token list punctuation">2.</span> <span class="token url">[<span class="token content">LATEX Mathematical Symbols</span>](<span class="token url">https://www.egr.msu.edu/~renjian/LaTeX-Math-Symbols.pdf</span>)</span><span class="token list punctuation">3.</span> <span class="token url">[<span class="token content">LaTeX:Symbols</span>](<span class="token url">https://artofproblemsolving.com/wiki/index.php/LaTeX:Symbols</span>)</span><span class="token list punctuation">4.</span> <span class="token url">[<span class="token content">LaTeX:Commands</span>](<span class="token url">https://artofproblemsolving.com/wiki/index.php/LaTeX:Commands</span>)</span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> LaTeX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX数学符号</title>
      <link href="/2022/07/02/latex-shu-xue-fu-hao/"/>
      <url>/2022/07/02/latex-shu-xue-fu-hao/</url>
      
        <content type="html"><![CDATA[<p><font color="red"></font></p><p>两个 LaTeX 工具（其实是一个）：<a href="https://latex.codecogs.com/">https://latex.codecogs.com/</a> 和 <a href="https://latex.codecogs.com/eqneditor/editor.php">https://latex.codecogs.com/eqneditor/editor.php</a></p><p>注：红色命令需要导入宏包 <code>latexsym</code></p><h2 id="1-数学模式重音符"><a href="#1-数学模式重音符" class="headerlink" title="1. 数学模式重音符"></a>1. 数学模式重音符</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center"><strong>符号</strong></th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center"><strong>符号</strong></th></tr></thead><tbody><tr><td align="center"><code>\hat{a}</code></td><td align="center">$\hat{a}$</td><td align="center"></td><td align="center"><code>\widehat{A}</code></td><td align="center">$\widehat{A}$</td></tr><tr><td align="center"><code>\tilde{a}</code></td><td align="center">$\tilde{a}$</td><td align="center"></td><td align="center"><code>\widetilde{A}</code></td><td align="center">$\widetilde{A}$</td></tr><tr><td align="center"><code>\dot{a}</code></td><td align="center">$\dot{a}$</td><td align="center"></td><td align="center"><code>\ddot{a}</code></td><td align="center">$\ddot{a}$</td></tr><tr><td align="center"><code>\vec{a}</code></td><td align="center">$\vec{a}$</td><td align="center"></td><td align="center"><code>\breve{a}</code></td><td align="center">$\breve{a}$</td></tr><tr><td align="center"><code>\bar{a}</code></td><td align="center">$\bar{a}$</td><td align="center"></td><td align="center"><code>\acute{a}</code></td><td align="center">$\acute{a}$</td></tr><tr><td align="center"><code>\check{a}</code></td><td align="center">$\check{a}$</td><td align="center"></td><td align="center"><code>\grave{a}</code></td><td align="center">$\grave{a}$</td></tr></tbody></table><h2 id="2-希腊字母"><a href="#2-希腊字母" class="headerlink" title="2. 希腊字母"></a>2. 希腊字母</h2><table><thead><tr><th align="center">大写<code>LaTeX</code>命令</th><th align="center">小写<code>LaTeX</code>命令</th><th align="center">大写</th><th align="center">小写</th><th align="center"></th><th align="center">大写<code>LaTeX</code>命令</th><th align="center">小写<code>LaTeX</code>命令</th><th align="center">大写</th><th align="center">小写</th></tr></thead><tbody><tr><td align="center"><code>A</code></td><td align="center"><code>\alpha</code></td><td align="center">$A$</td><td align="center">$\alpha$</td><td align="center"></td><td align="center"><code>N</code></td><td align="center"><code>\nu</code></td><td align="center">$N$</td><td align="center">$\nu$</td></tr><tr><td align="center"><code>B</code></td><td align="center"><code>\beta</code></td><td align="center">$B$</td><td align="center">$\beta$</td><td align="center"></td><td align="center"><code>\Xi</code></td><td align="center"><code>\xi</code></td><td align="center">$\Xi$</td><td align="center">$\xi$</td></tr><tr><td align="center"><code>\Gamma</code></td><td align="center"><code>\gamma</code></td><td align="center">$\Gamma$</td><td align="center">$\gamma$</td><td align="center"></td><td align="center"><code>O</code></td><td align="center"><code>o</code></td><td align="center">$O$</td><td align="center">$o$</td></tr><tr><td align="center"><code>\Delta</code></td><td align="center"><code>\delta</code></td><td align="center">$\Delta$</td><td align="center">$\delta$</td><td align="center"></td><td align="center"><code>\Pi</code></td><td align="center"><code>\pi</code>, <code>\varpi</code></td><td align="center">$\Pi$</td><td align="center">$\pi$, $\varpi$</td></tr><tr><td align="center"><code>E</code></td><td align="center"><code>\epsilon</code>, <code>\varepsilon</code></td><td align="center">$E$</td><td align="center">$\epsilon$, $\varepsilon$</td><td align="center"></td><td align="center"><code>P</code></td><td align="center"><code>\rho</code>, <code>\varrho</code></td><td align="center">$P$</td><td align="center">$\rho$, $\varrho$</td></tr><tr><td align="center"><code>Z</code></td><td align="center"><code>\zeta</code></td><td align="center">$Z$</td><td align="center">$\zeta$</td><td align="center"></td><td align="center"><code>\Sigma</code></td><td align="center"><code>\sigma</code>, <code>\varsigma</code></td><td align="center">$\Sigma$</td><td align="center">$\sigma$, $\varsigma$</td></tr><tr><td align="center"><code>H</code></td><td align="center"><code>\eta</code></td><td align="center">$H$</td><td align="center">$\eta$</td><td align="center"></td><td align="center"><code>T</code></td><td align="center"><code>\tau</code></td><td align="center">$T$</td><td align="center">$\tau$</td></tr><tr><td align="center"><code>\Theta</code></td><td align="center"><code>\theta</code>, <code>\vartheta</code></td><td align="center">$\Theta$</td><td align="center">$\theta$, $\vartheta$</td><td align="center"></td><td align="center"><code>\Upsilon</code></td><td align="center"><code>\upsilon</code></td><td align="center">$\Upsilon$</td><td align="center">$\upsilon$</td></tr><tr><td align="center"><code>I</code></td><td align="center"><code>\iota</code></td><td align="center">$I$</td><td align="center">$\iota$</td><td align="center"></td><td align="center"><code>\Phi</code></td><td align="center"><code>\phi</code>, <code>\varphi</code></td><td align="center">$\Phi$</td><td align="center">$\phi$, $\varphi$</td></tr><tr><td align="center"><code>K</code></td><td align="center"><code>\kappa</code></td><td align="center">$K$</td><td align="center">$\kappa$</td><td align="center"></td><td align="center"><code>X</code></td><td align="center"><code>\chi</code></td><td align="center">$X$</td><td align="center">$\chi$</td></tr><tr><td align="center"><code>\Lambda</code></td><td align="center"><code>\lambda</code></td><td align="center">$\Lambda$</td><td align="center">$\lambda$</td><td align="center"></td><td align="center"><code>\Psi</code></td><td align="center"><code>\psi</code></td><td align="center">$\Psi$</td><td align="center">$\psi$</td></tr><tr><td align="center"><code>M</code></td><td align="center"><code>\mu</code></td><td align="center">$M$</td><td align="center">$\mu$</td><td align="center"></td><td align="center"><code>\Omega</code></td><td align="center"><code>\omega</code></td><td align="center">$\Omega$</td><td align="center">$\omega$</td></tr></tbody></table><h2 id="3-二元关系符"><a href="#3-二元关系符" class="headerlink" title="3. 二元关系符"></a>3. 二元关系符</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>&lt;</code></td><td align="center">$&lt;$</td><td align="center"></td><td align="center"><code>&gt;</code></td><td align="center">$&gt;$</td><td align="center"></td><td align="center"><code>=</code></td><td align="center">$=$</td></tr><tr><td align="center"><code>\leq</code>, <code>\le</code></td><td align="center">$\le$</td><td align="center"></td><td align="center"><code>\geq</code>, <code>\ge</code></td><td align="center">$\geq$</td><td align="center"></td><td align="center"><code>\equiv</code></td><td align="center">$\equiv$</td></tr><tr><td align="center"><code>\ll</code></td><td align="center">$\ll$</td><td align="center"></td><td align="center"><code>\gg</code></td><td align="center">$\gg$</td><td align="center"></td><td align="center"><code>\doteq</code></td><td align="center">$\doteq$</td></tr><tr><td align="center"><code>\prec</code></td><td align="center">$\prec$</td><td align="center"></td><td align="center"><code>\succ</code></td><td align="center">$\succ$</td><td align="center"></td><td align="center"><code>\sim</code></td><td align="center">$\sim$</td></tr><tr><td align="center"><code>\preceq</code></td><td align="center">$\preceq$</td><td align="center"></td><td align="center"><code>\succeq</code></td><td align="center">$\succeq$</td><td align="center"></td><td align="center"><code>\simeq</code></td><td align="center">$\simeq$</td></tr><tr><td align="center"><code>\subset</code></td><td align="center">$\subset$</td><td align="center"></td><td align="center"><code>\supset</code></td><td align="center">$\supset$</td><td align="center"></td><td align="center"><code>\approx</code></td><td align="center">$\approx$</td></tr><tr><td align="center"><code>\subseteq</code></td><td align="center">$\subseteq$</td><td align="center"></td><td align="center"><code>\supseteq</code></td><td align="center">$\supseteq$</td><td align="center"></td><td align="center"><code>\cong</code></td><td align="center">$\cong$</td></tr><tr><td align="center"><font color="red"><code>\sqsubset</code></font></td><td align="center"><font color="red">$\sqsubset$</font></td><td align="center"></td><td align="center"><font color="red"><code>\sqsupset</code></font></td><td align="center"><font color="red">$\sqsupset$</font></td><td align="center"></td><td align="center"><font color="red"><code>\Join</code></font></td><td align="center"><font color="red">$\Join$</font></td></tr><tr><td align="center"><code>\sqsubseteq</code></td><td align="center">$\sqsubseteq$</td><td align="center"></td><td align="center"><code>\sqsupseteq</code></td><td align="center">$\sqsupseteq$</td><td align="center"></td><td align="center"><code>\bowtie</code></td><td align="center">$\bowtie$</td></tr><tr><td align="center"><code>\in</code></td><td align="center">$\in$</td><td align="center"></td><td align="center"><code>\ni</code>, <code>\owns</code></td><td align="center">$\ni$</td><td align="center"></td><td align="center"><code>\propto</code></td><td align="center">$\propto$</td></tr><tr><td align="center"><code>\vdash</code></td><td align="center">$\vdash$</td><td align="center"></td><td align="center"><code>\dashv</code></td><td align="center">$\dashv$</td><td align="center"></td><td align="center"><code>\models</code></td><td align="center">$\models$</td></tr><tr><td align="center"><code>\mid</code></td><td align="center">$\mid$</td><td align="center"></td><td align="center"><code>\parallel</code></td><td align="center">$\parallel$</td><td align="center"></td><td align="center"><code>\perp</code></td><td align="center">$\perp$</td></tr><tr><td align="center"><code>\smile</code></td><td align="center">$\smile$</td><td align="center"></td><td align="center"><code>\frown</code></td><td align="center">$\frown$</td><td align="center"></td><td align="center"><code>\asymp</code></td><td align="center">$\asymp$</td></tr><tr><td align="center"><code>:</code></td><td align="center">$:$</td><td align="center"></td><td align="center"><code>\notin</code></td><td align="center">$\notin$</td><td align="center"></td><td align="center"><code>\neq</code>, <code>\ne</code></td><td align="center">$\neq$</td></tr></tbody></table><h2 id="4-二元运算符"><a href="#4-二元运算符" class="headerlink" title="4. 二元运算符"></a>4. 二元运算符</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>\pm</code></td><td align="center">$\pm$</td><td align="center"></td><td align="center"><code>\mp</code></td><td align="center">$\mp$</td><td align="center"></td><td align="center"><code>\triangleleft</code></td><td align="center">$\triangleleft$</td></tr><tr><td align="center"><code>\cdot</code></td><td align="center">$\cdot$</td><td align="center"></td><td align="center"><code>\div</code></td><td align="center">$\div$</td><td align="center"></td><td align="center"><code>\triangleright</code></td><td align="center">$\triangleright$</td></tr><tr><td align="center"><code>\times</code></td><td align="center">$\times$</td><td align="center"></td><td align="center"><code>\setminus</code></td><td align="center">$\setminus$</td><td align="center"></td><td align="center"><code>\star</code></td><td align="center">$\star$</td></tr><tr><td align="center"><code>\cup</code></td><td align="center">$\cup$</td><td align="center"></td><td align="center"><code>\cap</code></td><td align="center">$\cap$</td><td align="center"></td><td align="center"><code>\ast</code></td><td align="center">$\ast$</td></tr><tr><td align="center"><code>\sqcup</code></td><td align="center">$\sqcup$</td><td align="center"></td><td align="center"><code>\sqcap</code></td><td align="center">$\sqcap$</td><td align="center"></td><td align="center"><code>\circ</code></td><td align="center">$\circ$</td></tr><tr><td align="center"><code>\vee</code>, <code>\lor</code></td><td align="center">$\vee$</td><td align="center"></td><td align="center"><code>\wedge</code>, <code>land</code></td><td align="center">$\land$</td><td align="center"></td><td align="center"><code>\bullet</code></td><td align="center">$\bullet$</td></tr><tr><td align="center"><code>\oplus</code></td><td align="center">$\oplus$</td><td align="center"></td><td align="center"><code>\ominus</code></td><td align="center">$\ominus$</td><td align="center"></td><td align="center"><code>\diamond</code></td><td align="center">$\diamond$</td></tr><tr><td align="center"><code>\odot</code></td><td align="center">$\odot$</td><td align="center"></td><td align="center"><code>\oslash</code></td><td align="center">$\oslash$</td><td align="center"></td><td align="center"><code>\uplus</code></td><td align="center">$\uplus$</td></tr><tr><td align="center"><code>\otimes</code></td><td align="center">$\otimes$</td><td align="center"></td><td align="center"><code>\bigcirc</code></td><td align="center">$\bigcirc$</td><td align="center"></td><td align="center"><code>\amalg</code></td><td align="center">$\amalg$</td></tr><tr><td align="center"><code>\bigtriangleup</code></td><td align="center">$\bigtriangleup$</td><td align="center"></td><td align="center"><code>\bigtriangledown</code></td><td align="center">$\bigtriangledown$</td><td align="center"></td><td align="center"><code>\dagger</code></td><td align="center">$\dagger$</td></tr><tr><td align="center"><font color="red"><code>\lhd</code></font></td><td align="center"><font color="red">$\lhd$</font></td><td align="center"></td><td align="center"><font color="red"><code>\rhd</code></font></td><td align="center"><font color="red">$\rhd$</font></td><td align="center"></td><td align="center"><code>\ddagger</code></td><td align="center">$\ddagger$</td></tr><tr><td align="center"><font color="red"><code>\unlhd</code></font></td><td align="center"><font color="red">$\unlhd$</font></td><td align="center"></td><td align="center"><font color="red"><code>\unrhd</code></font></td><td align="center"><font color="red">$\unrhd$</font></td><td align="center"></td><td align="center"><code>\wr</code></td><td align="center">$\wr$</td></tr></tbody></table><h2 id="5-大尺度运算符"><a href="#5-大尺度运算符" class="headerlink" title="5. 大尺度运算符"></a>5. 大尺度运算符</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>\sum</code></td><td align="center">$\sum$</td><td align="center"></td><td align="center"><code>\bigcup</code></td><td align="center">$\bigcup$</td><td align="center"></td><td align="center"><code>\bigvee</code></td><td align="center">$\bigvee$</td><td align="center"></td><td align="center"><code>\bigoplus</code></td><td align="center">$\bigoplus$</td></tr><tr><td align="center"><code>\prod</code></td><td align="center">$\prod$</td><td align="center"></td><td align="center"><code>\bigcap</code></td><td align="center">$\bigcap$</td><td align="center"></td><td align="center"><code>\bigwedge</code></td><td align="center">$\bigwedge$</td><td align="center"></td><td align="center"><code>\bigotimes</code></td><td align="center">$\bigotimes$</td></tr><tr><td align="center"><code>\coprod</code></td><td align="center">$\coprod$</td><td align="center"></td><td align="center"><code>\bigsqcup</code></td><td align="center">$\bigsqcup$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"><code>\bigodot</code></td><td align="center">$\bigodot$</td></tr><tr><td align="center"><code>\int</code></td><td align="center">$\int$</td><td align="center"></td><td align="center"><code>\oint</code></td><td align="center">$\oint$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"><code>\biguplus</code></td><td align="center">$\biguplus$</td></tr></tbody></table><h2 id="6-箭头"><a href="#6-箭头" class="headerlink" title="6. 箭头"></a>6. 箭头</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>+</code></td><td align="center">$+$</td><td align="center"></td><td align="center"><code>-</code></td><td align="center">$-$</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><code>\leftarrow</code>, <code>\gets</code></td><td align="center">$\gets$</td><td align="center"></td><td align="center"><code>\longleftarrow</code></td><td align="center">$\longleftarrow$</td><td align="center"></td><td align="center"><code>\uparrow</code></td><td align="center">$\uparrow$</td></tr><tr><td align="center"><code>\rightarrow</code>, <code>\to</code></td><td align="center">$\to$</td><td align="center"></td><td align="center"><code>\longrightarrow</code></td><td align="center">$\longrightarrow$</td><td align="center"></td><td align="center"><code>\downarrow</code></td><td align="center">$\downarrow$</td></tr><tr><td align="center"><code>\leftrightarrow</code></td><td align="center">$\leftrightarrow$</td><td align="center"></td><td align="center"><code>\longleftrightarrow</code></td><td align="center">$\longleftrightarrow$</td><td align="center"></td><td align="center"><code>\updownarrow</code></td><td align="center">$\updownarrow$</td></tr><tr><td align="center"><code>\Leftarrow</code></td><td align="center">$\Leftarrow$</td><td align="center"></td><td align="center"><code>\Longleftarrow</code></td><td align="center">$\Longleftarrow$</td><td align="center"></td><td align="center"><code>\Uparrow</code></td><td align="center">$\Uparrow$</td></tr><tr><td align="center"><code>\Rightarrow</code></td><td align="center">$\Rightarrow$</td><td align="center"></td><td align="center"><code>\Longrightarrow</code></td><td align="center">$\Longrightarrow$</td><td align="center"></td><td align="center"><code>\Downarrow</code></td><td align="center">$\Downarrow$</td></tr><tr><td align="center"><code>\Leftrightarrow</code></td><td align="center">$\Leftrightarrow$</td><td align="center"></td><td align="center"><code>\Longleftrightarrow</code></td><td align="center">$\Longleftrightarrow$</td><td align="center"></td><td align="center"><code>\Updownarrow</code></td><td align="center">$\Updownarrow$</td></tr><tr><td align="center"><code>\mapsto</code></td><td align="center">$\mapsto$</td><td align="center"></td><td align="center"><code>\longmapsto</code></td><td align="center">$\longmapsto$</td><td align="center"></td><td align="center"><code>\nearrow</code></td><td align="center">$\nearrow$</td></tr><tr><td align="center"><code>\hookleftarrow</code></td><td align="center">$\hookleftarrow$</td><td align="center"></td><td align="center"><code>\hookrightarrow</code></td><td align="center">$\hookrightarrow$</td><td align="center"></td><td align="center"><code>\searrow</code></td><td align="center">$\searrow$</td></tr><tr><td align="center"><code>\leftharpoonup</code></td><td align="center">$\leftharpoonup$</td><td align="center"></td><td align="center"><code>\rightharpoonup</code></td><td align="center">$\rightharpoonup$</td><td align="center"></td><td align="center"><code>\swarrow</code></td><td align="center">$\swarrow$</td></tr><tr><td align="center"><code>\leftharpoondown</code></td><td align="center">$\leftharpoondown$</td><td align="center"></td><td align="center"><code>\rightharpoondown</code></td><td align="center">$\rightharpoondown$</td><td align="center"></td><td align="center"><code>\nwarrow</code></td><td align="center">$\nwarrow$</td></tr><tr><td align="center"><code>\rightleftharpoons</code></td><td align="center">$\rightleftharpoons$</td><td align="center"></td><td align="center"><code>\iff</code></td><td align="center">$\iff$</td><td align="center"></td><td align="center"><font color="red"><code>\leadsto</code></font></td><td align="center"><font color="red">$\leadsto$</font></td></tr></tbody></table><h2 id="7-定界符"><a href="#7-定界符" class="headerlink" title="7. 定界符"></a>7. 定界符</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>(</code></td><td align="center">$($</td><td align="center"></td><td align="center"><code>)</code></td><td align="center">$)$</td><td align="center"></td><td align="center"><code>\uparrow</code></td><td align="center">$\uparrow$</td><td align="center"></td><td align="center"><code>\Uparrow</code></td><td align="center">$\Uparrow$</td></tr><tr><td align="center"><code>[</code>, <code>\lbrack</code></td><td align="center">$[$</td><td align="center"></td><td align="center"><code>]</code>, <code>rbrack</code></td><td align="center">$]$</td><td align="center"></td><td align="center"><code>\downarrow</code></td><td align="center">$\downarrow$</td><td align="center"></td><td align="center"><code>\Downarrow</code></td><td align="center">$\Downarrow$</td></tr><tr><td align="center"><code>{</code>, <code>\lbrace</code></td><td align="center">$\lbrace$</td><td align="center"></td><td align="center"><code>}</code>, <code>\rbrace</code></td><td align="center">$\rbrace$</td><td align="center"></td><td align="center"><code>\updownarrow</code></td><td align="center">$\updownarrow$</td><td align="center"></td><td align="center"><code>\Updownarrow</code></td><td align="center">$\Updownarrow$</td></tr><tr><td align="center"><code>\langle</code></td><td align="center">$\langle$</td><td align="center"></td><td align="center"><code>\rangle</code></td><td align="center">$\rangle$</td><td align="center"></td><td align="center"><code>\vert</code></td><td align="center">$\vert$</td><td align="center"></td><td align="center"><code>\Vert</code></td><td align="center">$\Vert$</td></tr><tr><td align="center"><code>\lfloor</code></td><td align="center">$\lfloor$</td><td align="center"></td><td align="center"><code>\rfloor</code></td><td align="center">$\rfloor$</td><td align="center"></td><td align="center"><code>\lceil</code></td><td align="center">$\lceil$</td><td align="center"></td><td align="center"><code>\rceil</code></td><td align="center">$\rceil$</td></tr><tr><td align="center"><code>/</code></td><td align="center">$/$</td><td align="center"></td><td align="center"><code>\backslash</code></td><td align="center">$\backslash$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="8-大尺度定界符"><a href="#8-大尺度定界符" class="headerlink" title="8. 大尺度定界符"></a>8. 大尺度定界符</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>\lgroup</code></td><td align="center">$\lgroup$</td><td align="center"></td><td align="center"><code>\rgroup</code></td><td align="center">$\rgroup$</td><td align="center"></td><td align="center"><code>\lmoustache</code></td><td align="center">$\lmoustache$</td><td align="center"></td><td align="center"><code>\rmoustache</code></td><td align="center">$\rmoustache$</td></tr><tr><td align="center"><code>\arrowvert</code></td><td align="center">$\arrowvert$</td><td align="center"></td><td align="center"><code>\Arrowvert</code></td><td align="center">$\Arrowvert$</td><td align="center"></td><td align="center"><code>\bracevert</code></td><td align="center">$\bracevert$</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="9-其他符号"><a href="#9-其他符号" class="headerlink" title="9. 其他符号"></a>9. 其他符号</h2><table><thead><tr><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th><th align="center"></th><th align="center"><code>LaTeX</code>命令</th><th align="center">符号</th></tr></thead><tbody><tr><td align="center"><code>\dots</code></td><td align="center">$\dots$</td><td align="center"></td><td align="center"><code>\cdots</code></td><td align="center">$\cdots$</td><td align="center"></td><td align="center"><code>\vdots</code></td><td align="center">$\vdots$</td><td align="center"></td><td align="center"><code>\ddots</code></td><td align="center">$\ddots$</td></tr><tr><td align="center"><code>\hbar</code></td><td align="center">$\hbar$</td><td align="center"></td><td align="center"><code>\imath</code></td><td align="center">$\imath$</td><td align="center"></td><td align="center"><code>\jmath</code></td><td align="center">$\jmath$</td><td align="center"></td><td align="center"><code>\ell</code></td><td align="center">$\ell$</td></tr><tr><td align="center"><code>\Re</code></td><td align="center">$\Re$</td><td align="center"></td><td align="center"><code>\Im</code></td><td align="center">$\Im$</td><td align="center"></td><td align="center"><code>\aleph</code></td><td align="center">$\aleph$</td><td align="center"></td><td align="center"><code>\wp</code></td><td align="center">$\wp$</td></tr><tr><td align="center"><code>\forall</code></td><td align="center">$\forall$</td><td align="center"></td><td align="center"><code>\exists</code></td><td align="center">$\exists$</td><td align="center"></td><td align="center"><font color="red"><code>\mho</code></font></td><td align="center"><font color="red">$\mho$</font></td><td align="center"></td><td align="center"><code>\partial</code></td><td align="center">$\partial$</td></tr><tr><td align="center"><code>‘</code></td><td align="center">$‘$</td><td align="center"></td><td align="center"><code>\prime</code></td><td align="center">$\prime$</td><td align="center"></td><td align="center"><code>\emptyset</code></td><td align="center">$\emptyset$</td><td align="center"></td><td align="center"><code>\infty</code></td><td align="center">$\infty$</td></tr><tr><td align="center"><code>\nabla</code></td><td align="center">$\nabla$</td><td align="center"></td><td align="center"><code>\triangle</code></td><td align="center">$\triangle$</td><td align="center"></td><td align="center"><font color="red"><code>\Box</code></font></td><td align="center"><font color="red">$\Box$</font></td><td align="center"></td><td align="center"><font color="red"><code>\Diamond</code></font></td><td align="center"><font color="red">$\Diamond$</font></td></tr><tr><td align="center"><code>\bot</code></td><td align="center">$\bot$</td><td align="center"></td><td align="center"><code>\top</code></td><td align="center">$\top$</td><td align="center"></td><td align="center"><code>\angle</code></td><td align="center">$\angle$</td><td align="center"></td><td align="center"><code>\surd</code></td><td align="center">$\surd$</td></tr><tr><td align="center"><code>\diamondsuit</code></td><td align="center">$\diamondsuit$</td><td align="center"></td><td align="center"><code>\heartsuit</code></td><td align="center">$\heartsuit$</td><td align="center"></td><td align="center"><code>\clubsuit</code></td><td align="center">$\clubsuit$</td><td align="center"></td><td align="center"><code>\spadesuit</code></td><td align="center">$\spadesuit$</td></tr><tr><td align="center"><code>\neg</code>, <code>lnot</code></td><td align="center">$\neg$</td><td align="center"></td><td align="center"><code>\flat</code></td><td align="center">$\flat$</td><td align="center"></td><td align="center"><code>\natural</code></td><td align="center">$\natural$</td><td align="center"></td><td align="center"><code>\sharp</code></td><td align="center">$\sharp$</td></tr></tbody></table><h2 id="10-数字字母"><a href="#10-数字字母" class="headerlink" title="10. 数字字母"></a>10. 数字字母</h2><table><thead><tr><th align="center">例子</th><th align="center">命令</th><th align="center">所需宏包</th></tr></thead><tbody><tr><td align="center">$\mathrm{ABCdef}$</td><td align="center"><code>\mathrm{ABCdef}</code></td><td align="center"></td></tr><tr><td align="center">$\mathit{ABCdef}$</td><td align="center"><code>\mathit{ABCdef}</code></td><td align="center"></td></tr><tr><td align="center">$\mathnormal{ABCdef}$</td><td align="center"><code>\mathnormal{ABCdef}</code></td><td align="center"></td></tr><tr><td align="center">$\mathcal{ABCdef}$</td><td align="center"><code>\mathcal{ABCdef}</code></td><td align="center"></td></tr><tr><td align="center">$\mathscr{ABCdef}$</td><td align="center"><code>\mathscr{ABCdef}</code></td><td align="center"></td></tr><tr><td align="center">$\mathfrak{ABCdef}$</td><td align="center"><code>\mathfrak{ABCdef}</code></td><td align="center"><code>eufrak</code></td></tr><tr><td align="center">$\mathbb{RZQ}$</td><td align="center"><code>\mathbb{RZQ}</code></td><td align="center"><code>amsfonts</code> or <code>amssymb</code></td></tr><tr><td align="center">$\mathbf{RZQ}$</td><td align="center"><code>\mathbf{RZQ}</code></td><td align="center"></td></tr></tbody></table><p>参考：</p><ol><li><p><a href="http://persoweb.whu.edu.cn/mathsymb.pdf">数学符号表</a></p></li><li><p><a href="https://www.egr.msu.edu/~renjian/LaTeX-Math-Symbols.pdf">LATEX Mathematical Symbols</a></p></li><li><p><a href="https://artofproblemsolving.com/wiki/index.php/LaTeX:Symbols">LaTeX:Symbols</a></p></li><li><p><a href="https://artofproblemsolving.com/wiki/index.php/LaTeX:Commands">LaTeX:Commands</a></p></li></ol><p>本文源码：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">两个 LaTeX 工具（其实是一个）：<span class="token url">[<span class="token content">https://latex.codecogs.com/</span>](<span class="token url">https://latex.codecogs.com/</span>)</span> 和 <span class="token url">[<span class="token content">https://latex.codecogs.com/eqneditor/editor.php</span>](<span class="token url">https://latex.codecogs.com/eqneditor/editor.php</span>)</span>注：红色命令需要导入宏包 <span class="token code-snippet code keyword">`latexsym`</span><span class="token title important"><span class="token punctuation">##</span> 1. 数学模式重音符</span>| <span class="token code-snippet code keyword">`LaTeX`</span>命令 |  <span class="token bold"><span class="token punctuation">**</span><span class="token content">符号</span><span class="token punctuation">**</span></span>   |      |   <span class="token code-snippet code keyword">`LaTeX`</span>命令   |    <span class="token bold"><span class="token punctuation">**</span><span class="token content">符号</span><span class="token punctuation">**</span></span>     || :---------: | :---------: | :--: | :-------------: | :-------------: ||  <span class="token code-snippet code keyword">`\hat{a}`</span>  |  $\hat{a}$  |      |  <span class="token code-snippet code keyword">`\widehat{A}`</span>  |  $\widehat{A}$  || <span class="token code-snippet code keyword">`\tilde{a}`</span> | $\tilde{a}$ |      | <span class="token code-snippet code keyword">`\widetilde{A}`</span> | $\widetilde{A}$ ||  <span class="token code-snippet code keyword">`\dot{a}`</span>  |  $\dot{a}$  |      |   <span class="token code-snippet code keyword">`\ddot{a}`</span>    |   $\ddot{a}$    ||  <span class="token code-snippet code keyword">`\vec{a}`</span>  |  $\vec{a}$  |      |   <span class="token code-snippet code keyword">`\breve{a}`</span>   |   $\breve{a}$   ||  <span class="token code-snippet code keyword">`\bar{a}`</span>  |  $\bar{a}$  |      |   <span class="token code-snippet code keyword">`\acute{a}`</span>   |   $\acute{a}$   || <span class="token code-snippet code keyword">`\check{a}`</span> | $\check{a}$ |      |   <span class="token code-snippet code keyword">`\grave{a}`</span>   |   $\grave{a}$   |<span class="token title important"><span class="token punctuation">##</span> 2. 希腊字母</span>| 大写<span class="token code-snippet code keyword">`LaTeX`</span>命令 |      小写<span class="token code-snippet code keyword">`LaTeX`</span>命令      |   大写    |           小写            |      | 大写<span class="token code-snippet code keyword">`LaTeX`</span>命令 |    小写<span class="token code-snippet code keyword">`LaTeX`</span>命令    |    大写    |         小写          || :-------------: | :-----------------------: | :-------: | :-----------------------: | :--: | :-------------: | :-------------------: | :--------: | :-------------------: ||       <span class="token code-snippet code keyword">`A`</span>       |         <span class="token code-snippet code keyword">`\alpha`</span>          |    $A$    |         $\alpha$          |      |       <span class="token code-snippet code keyword">`N`</span>       |         <span class="token code-snippet code keyword">`\nu`</span>         |    $N$     |         $\nu$         ||       <span class="token code-snippet code keyword">`B`</span>       |          <span class="token code-snippet code keyword">`\beta`</span>          |    $B$    |          $\beta$          |      |      <span class="token code-snippet code keyword">`\Xi`</span>      |         <span class="token code-snippet code keyword">`\xi`</span>         |   $\Xi$    |         $\xi$         ||    <span class="token code-snippet code keyword">`\Gamma`</span>     |         <span class="token code-snippet code keyword">`\gamma`</span>          | $\Gamma$  |         $\gamma$          |      |       <span class="token code-snippet code keyword">`O`</span>       |          <span class="token code-snippet code keyword">`o`</span>          |    $O$     |          $o$          ||    <span class="token code-snippet code keyword">`\Delta`</span>     |         <span class="token code-snippet code keyword">`\delta`</span>          | $\Delta$  |         $\delta$          |      |      <span class="token code-snippet code keyword">`\Pi`</span>      |    <span class="token code-snippet code keyword">`\pi`</span>, <span class="token code-snippet code keyword">`\varpi`</span>    |   $\Pi$    |    $\pi$, $\varpi$    ||       <span class="token code-snippet code keyword">`E`</span>       | <span class="token code-snippet code keyword">`\epsilon`</span>, <span class="token code-snippet code keyword">`\varepsilon`</span> |    $E$    | $\epsilon$, $\varepsilon$ |      |       <span class="token code-snippet code keyword">`P`</span>       |   <span class="token code-snippet code keyword">`\rho`</span>, <span class="token code-snippet code keyword">`\varrho`</span>   |    $P$     |   $\rho$, $\varrho$   ||       <span class="token code-snippet code keyword">`Z`</span>       |          <span class="token code-snippet code keyword">`\zeta`</span>          |    $Z$    |          $\zeta$          |      |    <span class="token code-snippet code keyword">`\Sigma`</span>     | <span class="token code-snippet code keyword">`\sigma`</span>, <span class="token code-snippet code keyword">`\varsigma`</span> |  $\Sigma$  | $\sigma$, $\varsigma$ ||       <span class="token code-snippet code keyword">`H`</span>       |          <span class="token code-snippet code keyword">`\eta`</span>           |    $H$    |          $\eta$           |      |       <span class="token code-snippet code keyword">`T`</span>       |        <span class="token code-snippet code keyword">`\tau`</span>         |    $T$     |        $\tau$         ||    <span class="token code-snippet code keyword">`\Theta`</span>     |   <span class="token code-snippet code keyword">`\theta`</span>, <span class="token code-snippet code keyword">`\vartheta`</span>   | $\Theta$  |   $\theta$, $\vartheta$   |      |   <span class="token code-snippet code keyword">`\Upsilon`</span>    |      <span class="token code-snippet code keyword">`\upsilon`</span>       | $\Upsilon$ |      $\upsilon$       ||       <span class="token code-snippet code keyword">`I`</span>       |          <span class="token code-snippet code keyword">`\iota`</span>          |    $I$    |          $\iota$          |      |     <span class="token code-snippet code keyword">`\Phi`</span>      |   <span class="token code-snippet code keyword">`\phi`</span>, <span class="token code-snippet code keyword">`\varphi`</span>   |   $\Phi$   |   $\phi$, $\varphi$   ||       <span class="token code-snippet code keyword">`K`</span>       |         <span class="token code-snippet code keyword">`\kappa`</span>          |    $K$    |         $\kappa$          |      |       <span class="token code-snippet code keyword">`X`</span>       |        <span class="token code-snippet code keyword">`\chi`</span>         |    $X$     |        $\chi$         ||    <span class="token code-snippet code keyword">`\Lambda`</span>    |         <span class="token code-snippet code keyword">`\lambda`</span>         | $\Lambda$ |         $\lambda$         |      |     <span class="token code-snippet code keyword">`\Psi`</span>      |        <span class="token code-snippet code keyword">`\psi`</span>         |   $\Psi$   |        $\psi$         ||       <span class="token code-snippet code keyword">`M`</span>       |           <span class="token code-snippet code keyword">`\mu`</span>           |    $M$    |           $\mu$           |      |    <span class="token code-snippet code keyword">`\Omega`</span>     |       <span class="token code-snippet code keyword">`\omega`</span>        |  $\Omega$  |       $\omega$        |<span class="token title important"><span class="token punctuation">##</span> 3. 二元关系符</span>|             <span class="token code-snippet code keyword">`LaTeX`</span>命令              |                 符号                 |      |             <span class="token code-snippet code keyword">`LaTeX`</span>命令              |                 符号                 |      |           <span class="token code-snippet code keyword">`LaTeX`</span>命令            |               符号               || :----------------------------------: | :----------------------------------: | :--: | :----------------------------------: | :----------------------------------: | :--: | :------------------------------: | :------------------------------: ||                 <span class="token code-snippet code keyword">`&lt;`</span>                  |                 $&lt;$                  |      |                 <span class="token code-snippet code keyword">`&gt;`</span>                  |                 $&gt;$                  |      |               <span class="token code-snippet code keyword">`=`</span>                |               $=$                ||            <span class="token code-snippet code keyword">`\leq`</span>, <span class="token code-snippet code keyword">`\le`</span>             |                $\le$                 |      |            <span class="token code-snippet code keyword">`\geq`</span>, <span class="token code-snippet code keyword">`\ge`</span>             |                $\geq$                |      |             <span class="token code-snippet code keyword">`\equiv`</span>             |             $\equiv$             ||                <span class="token code-snippet code keyword">`\ll`</span>                 |                $\ll$                 |      |                <span class="token code-snippet code keyword">`\gg`</span>                 |                $\gg$                 |      |             <span class="token code-snippet code keyword">`\doteq`</span>             |             $\doteq$             ||               <span class="token code-snippet code keyword">`\prec`</span>                |               $\prec$                |      |               <span class="token code-snippet code keyword">`\succ`</span>                |               $\succ$                |      |              <span class="token code-snippet code keyword">`\sim`</span>              |              $\sim$              ||              <span class="token code-snippet code keyword">`\preceq`</span>               |              $\preceq$               |      |              <span class="token code-snippet code keyword">`\succeq`</span>               |              $\succeq$               |      |             <span class="token code-snippet code keyword">`\simeq`</span>             |             $\simeq$             ||              <span class="token code-snippet code keyword">`\subset`</span>               |              $\subset$               |      |              <span class="token code-snippet code keyword">`\supset`</span>               |              $\supset$               |      |            <span class="token code-snippet code keyword">`\approx`</span>             |            $\approx$             ||             <span class="token code-snippet code keyword">`\subseteq`</span>              |             $\subseteq$              |      |             <span class="token code-snippet code keyword">`\supseteq`</span>              |             $\supseteq$              |      |             <span class="token code-snippet code keyword">`\cong`</span>              |             $\cong$              || <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token code-snippet code keyword">`\sqsubset`</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>$\sqsubset$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> |      | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token code-snippet code keyword">`\sqsupset`</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>$\sqsupset$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> |      | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token code-snippet code keyword">`\Join`</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>$\Join$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> ||            <span class="token code-snippet code keyword">`\sqsubseteq`</span>             |            $\sqsubseteq$             |      |            <span class="token code-snippet code keyword">`\sqsupseteq`</span>             |            $\sqsupseteq$             |      |            <span class="token code-snippet code keyword">`\bowtie`</span>             |            $\bowtie$             ||                <span class="token code-snippet code keyword">`\in`</span>                 |                $\in$                 |      |            <span class="token code-snippet code keyword">`\ni`</span>, <span class="token code-snippet code keyword">`\owns`</span>            |                $\ni$                 |      |            <span class="token code-snippet code keyword">`\propto`</span>             |            $\propto$             ||               <span class="token code-snippet code keyword">`\vdash`</span>               |               $\vdash$               |      |               <span class="token code-snippet code keyword">`\dashv`</span>               |               $\dashv$               |      |            <span class="token code-snippet code keyword">`\models`</span>             |            $\models$             ||                <span class="token code-snippet code keyword">`\mid`</span>                |                $\mid$                |      |             <span class="token code-snippet code keyword">`\parallel`</span>              |             $\parallel$              |      |             <span class="token code-snippet code keyword">`\perp`</span>              |             $\perp$              ||               <span class="token code-snippet code keyword">`\smile`</span>               |               $\smile$               |      |               <span class="token code-snippet code keyword">`\frown`</span>               |               $\frown$               |      |             <span class="token code-snippet code keyword">`\asymp`</span>             |             $\asymp$             ||                 <span class="token code-snippet code keyword">`:`</span>                  |                 $:$                  |      |               <span class="token code-snippet code keyword">`\notin`</span>               |               $\notin$               |      |          <span class="token code-snippet code keyword">`\neq`</span>, <span class="token code-snippet code keyword">`\ne`</span>           |              $\neq$              |<span class="token title important"><span class="token punctuation">##</span> 4. 二元运算符</span>|            <span class="token code-snippet code keyword">`LaTeX`</span>命令            |               符号                |      |            <span class="token code-snippet code keyword">`LaTeX`</span>命令            |               符号                |      |   <span class="token code-snippet code keyword">`LaTeX`</span>命令    |       符号       || :-------------------------------: | :-------------------------------: | :--: | :-------------------------------: | :-------------------------------: | :--: | :--------------: | :--------------: ||               <span class="token code-snippet code keyword">`\pm`</span>               |               $\pm$               |      |               <span class="token code-snippet code keyword">`\mp`</span>               |               $\mp$               |      | <span class="token code-snippet code keyword">`\triangleleft`</span>  | $\triangleleft$  ||              <span class="token code-snippet code keyword">`\cdot`</span>              |              $\cdot$              |      |              <span class="token code-snippet code keyword">`\div`</span>               |              $\div$               |      | <span class="token code-snippet code keyword">`\triangleright`</span> | $\triangleright$ ||             <span class="token code-snippet code keyword">`\times`</span>              |             $\times$              |      |            <span class="token code-snippet code keyword">`\setminus`</span>            |            $\setminus$            |      |     <span class="token code-snippet code keyword">`\star`</span>      |     $\star$      ||              <span class="token code-snippet code keyword">`\cup`</span>               |              $\cup$               |      |              <span class="token code-snippet code keyword">`\cap`</span>               |              $\cap$               |      |      <span class="token code-snippet code keyword">`\ast`</span>      |      $\ast$      ||             <span class="token code-snippet code keyword">`\sqcup`</span>              |             $\sqcup$              |      |             <span class="token code-snippet code keyword">`\sqcap`</span>              |             $\sqcap$              |      |     <span class="token code-snippet code keyword">`\circ`</span>      |     $\circ$      ||          <span class="token code-snippet code keyword">`\vee`</span>, <span class="token code-snippet code keyword">`\lor`</span>           |              $\vee$               |      |         <span class="token code-snippet code keyword">`\wedge`</span>, <span class="token code-snippet code keyword">`land`</span>          |              $\land$              |      |    <span class="token code-snippet code keyword">`\bullet`</span>     |    $\bullet$     ||             <span class="token code-snippet code keyword">`\oplus`</span>              |             $\oplus$              |      |             <span class="token code-snippet code keyword">`\ominus`</span>             |             $\ominus$             |      |    <span class="token code-snippet code keyword">`\diamond`</span>    |    $\diamond$    ||              <span class="token code-snippet code keyword">`\odot`</span>              |              $\odot$              |      |             <span class="token code-snippet code keyword">`\oslash`</span>             |             $\oslash$             |      |     <span class="token code-snippet code keyword">`\uplus`</span>     |     $\uplus$     ||            <span class="token code-snippet code keyword">`\otimes`</span>     |     $\otimes$     ||<span class="token code-snippet code keyword">`\bigcirc`</span>|$\bigcirc$||<span class="token code-snippet code keyword">`\amalg`</span>|$\amalg$||         <span class="token code-snippet code keyword">`\bigtriangleup`</span>          |         $\bigtriangleup$          |      |        <span class="token code-snippet code keyword">`\bigtriangledown`</span>         |        $\bigtriangledown$         |      |    <span class="token code-snippet code keyword">`\dagger`</span>     |    $\dagger$     ||  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token code-snippet code keyword">`\lhd`</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>  |  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>$\lhd$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>  |      |  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token code-snippet code keyword">`\rhd`</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>  |  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>$\rhd$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>  |      |    <span class="token code-snippet code keyword">`\ddagger`</span>    |    $\ddagger$    || <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token code-snippet code keyword">`\unlhd`</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>$\unlhd$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> |      | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token code-snippet code keyword">`\unrhd`</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>$\unrhd$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> |      |      <span class="token code-snippet code keyword">`\wr`</span>       |      $\wr$       |<span class="token title important"><span class="token punctuation">##</span> 5. 大尺度运算符</span>| <span class="token code-snippet code keyword">`LaTeX`</span>命令 |   符号    |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令 |    符号     |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令 |    符号     |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令  |     符号     || :---------: | :-------: | :--: | :---------: | :---------: | :--: | :---------: | :---------: | :--: | :----------: | :----------: ||   <span class="token code-snippet code keyword">`\sum`</span>    |  $\sum$   |      |  <span class="token code-snippet code keyword">`\bigcup`</span>  |  $\bigcup$  |      |  <span class="token code-snippet code keyword">`\bigvee`</span>  |  $\bigvee$  |      | <span class="token code-snippet code keyword">`\bigoplus`</span>  | $\bigoplus$  ||   <span class="token code-snippet code keyword">`\prod`</span>   |  $\prod$  |      |  <span class="token code-snippet code keyword">`\bigcap`</span>  |  $\bigcap$  |      | <span class="token code-snippet code keyword">`\bigwedge`</span> | $\bigwedge$ |      | <span class="token code-snippet code keyword">`\bigotimes`</span> | $\bigotimes$ ||  <span class="token code-snippet code keyword">`\coprod`</span>  | $\coprod$ |      | <span class="token code-snippet code keyword">`\bigsqcup`</span> | $\bigsqcup$ |      |             |             |      |  <span class="token code-snippet code keyword">`\bigodot`</span>  |  $\bigodot$  ||   <span class="token code-snippet code keyword">`\int`</span>    |  $\int$   |      |   <span class="token code-snippet code keyword">`\oint`</span>   |   $\oint$   |      |             |             |      | <span class="token code-snippet code keyword">`\biguplus`</span>  | $\biguplus$  |<span class="token title important"><span class="token punctuation">##</span> 6. 箭头</span>|      <span class="token code-snippet code keyword">`LaTeX`</span>命令      |         符号         |      |      <span class="token code-snippet code keyword">`LaTeX`</span>命令      |         符号          |      |             <span class="token code-snippet code keyword">`LaTeX`</span>命令             |                符号                 || :-------------------: | :------------------: | :--: | :-------------------: | :-------------------: | :--: | :---------------------------------: | :---------------------------------: ||          <span class="token code-snippet code keyword">`+`</span>          |         $+$          |      |          <span class="token code-snippet code keyword">`-`</span>          |          $-$          |      |                                     |                                     || <span class="token code-snippet code keyword">`\leftarrow`</span>, <span class="token code-snippet code keyword">`\gets`</span> |       $\gets$        |      |   <span class="token code-snippet code keyword">`\longleftarrow`</span>    |   $\longleftarrow$    |      |             <span class="token code-snippet code keyword">`\uparrow`</span>              |             $\uparrow$              || <span class="token code-snippet code keyword">`\rightarrow`</span>, <span class="token code-snippet code keyword">`\to`</span>  |         $\to$             ||<span class="token code-snippet code keyword">`\longrightarrow`</span>|$\longrightarrow$||<span class="token code-snippet code keyword">`\downarrow`</span>|$\downarrow$||   <span class="token code-snippet code keyword">`\leftrightarrow`</span>   |  $\leftrightarrow$   |      | <span class="token code-snippet code keyword">`\longleftrightarrow`</span> | $\longleftrightarrow$ |      |           <span class="token code-snippet code keyword">`\updownarrow`</span>            |           $\updownarrow$            ||     <span class="token code-snippet code keyword">`\Leftarrow`</span>      |     $\Leftarrow$     |      |   <span class="token code-snippet code keyword">`\Longleftarrow`</span>    |   $\Longleftarrow$    |      |             <span class="token code-snippet code keyword">`\Uparrow`</span>              |             $\Uparrow$              ||     <span class="token code-snippet code keyword">`\Rightarrow`</span>     |    $\Rightarrow$     |      |   <span class="token code-snippet code keyword">`\Longrightarrow`</span>   |   $\Longrightarrow$   |      |            <span class="token code-snippet code keyword">`\Downarrow`</span>             |            $\Downarrow$             ||   <span class="token code-snippet code keyword">`\Leftrightarrow`</span>   |  $\Leftrightarrow$   |      | <span class="token code-snippet code keyword">`\Longleftrightarrow`</span> | $\Longleftrightarrow$ |      |           <span class="token code-snippet code keyword">`\Updownarrow`</span>            |           $\Updownarrow$            ||       <span class="token code-snippet code keyword">`\mapsto`</span>       |      $\mapsto$       |      |     <span class="token code-snippet code keyword">`\longmapsto`</span>     |     $\longmapsto$     |      |             <span class="token code-snippet code keyword">`\nearrow`</span>              |             $\nearrow$              ||   <span class="token code-snippet code keyword">`\hookleftarrow`</span>    |   $\hookleftarrow$   |      |   <span class="token code-snippet code keyword">`\hookrightarrow`</span>   |   $\hookrightarrow$   |      |             <span class="token code-snippet code keyword">`\searrow`</span>              |             $\searrow$              ||   <span class="token code-snippet code keyword">`\leftharpoonup`</span>    |   $\leftharpoonup$   |      |   <span class="token code-snippet code keyword">`\rightharpoonup`</span>   |   $\rightharpoonup$   |      |             <span class="token code-snippet code keyword">`\swarrow`</span>              |             $\swarrow$              ||  <span class="token code-snippet code keyword">`\leftharpoondown`</span>   |  $\leftharpoondown$  |      |  <span class="token code-snippet code keyword">`\rightharpoondown`</span>  |  $\rightharpoondown$  |      |             <span class="token code-snippet code keyword">`\nwarrow`</span>              |             $\nwarrow$              || <span class="token code-snippet code keyword">`\rightleftharpoons`</span>  | $\rightleftharpoons$ |      |        <span class="token code-snippet code keyword">`\iff`</span>         |        $\iff$         |      | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token code-snippet code keyword">`\leadsto`</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>$\leadsto$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> |<span class="token title important"><span class="token punctuation">##</span> 7. 定界符</span>|  <span class="token code-snippet code keyword">`LaTeX`</span>命令   |   符号    |      |  <span class="token code-snippet code keyword">`LaTeX`</span>命令   |     符号     |      |  <span class="token code-snippet code keyword">`LaTeX`</span>命令   |      符号      |      |  <span class="token code-snippet code keyword">`LaTeX`</span>命令   |      符号      || :------------: | :-------: | :--: | :------------: | :----------: | :--: | :------------: | :------------: | :--: | :------------: | :------------: ||      <span class="token code-snippet code keyword">`(`</span>       |    $($    |      |      <span class="token code-snippet code keyword">`)`</span>       |     $)$      |      |   <span class="token code-snippet code keyword">`\uparrow`</span>   |   $\uparrow$   |      |   <span class="token code-snippet code keyword">`\Uparrow`</span>   |   $\Uparrow$   || <span class="token code-snippet code keyword">`[`</span>, <span class="token code-snippet code keyword">`\lbrack`</span> |    $[$    |      | <span class="token code-snippet code keyword">`]`</span>, <span class="token code-snippet code keyword">`rbrack`</span>  |     $]$      |      |  <span class="token code-snippet code keyword">`\downarrow`</span>  |  $\downarrow$  |      |  <span class="token code-snippet code keyword">`\Downarrow`</span>  |  $\Downarrow$  || <span class="token code-snippet code keyword">`{`</span>, <span class="token code-snippet code keyword">`\lbrace`</span> | $\lbrace$ |      | <span class="token code-snippet code keyword">`}`</span>, <span class="token code-snippet code keyword">`\rbrace`</span> |  $\rbrace$   |      | <span class="token code-snippet code keyword">`\updownarrow`</span> | $\updownarrow$ |      | <span class="token code-snippet code keyword">`\Updownarrow`</span> | $\Updownarrow$ ||   <span class="token code-snippet code keyword">`\langle`</span>    | $\langle$ |      |   <span class="token code-snippet code keyword">`\rangle`</span>    |  $\rangle$   |      |    <span class="token code-snippet code keyword">`\vert`</span>     |    $\vert$     |      |    <span class="token code-snippet code keyword">`\Vert`</span>     |    $\Vert$     ||   <span class="token code-snippet code keyword">`\lfloor`</span>    | $\lfloor$ |      |   <span class="token code-snippet code keyword">`\rfloor`</span>    |  $\rfloor$   |      |    <span class="token code-snippet code keyword">`\lceil`</span>    |    $\lceil$    |      |    <span class="token code-snippet code keyword">`\rceil`</span>    |    $\rceil$    ||      <span class="token code-snippet code keyword">`/`</span>       |    $/$    |      |  <span class="token code-snippet code keyword">`\backslash`</span>  | $\backslash$ |      |                |                |      |                |                |<span class="token title important"><span class="token punctuation">##</span> 8. 大尺度定界符</span>| <span class="token code-snippet code keyword">`LaTeX`</span>命令  |     符号     |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令  |     符号     |      |  <span class="token code-snippet code keyword">`LaTeX`</span>命令  |     符号      |      |  <span class="token code-snippet code keyword">`LaTeX`</span>命令  |     符号      || :----------: | :----------: | :--: | :----------: | :----------: | :--: | :-----------: | :-----------: | :--: | :-----------: | :-----------: ||  <span class="token code-snippet code keyword">`\lgroup`</span>   |  $\lgroup$   |      |  <span class="token code-snippet code keyword">`\rgroup`</span>   |  $\rgroup$   |      | <span class="token code-snippet code keyword">`\lmoustache`</span> | $\lmoustache$ |      | <span class="token code-snippet code keyword">`\rmoustache`</span> | $\rmoustache$ || <span class="token code-snippet code keyword">`\arrowvert`</span> | $\arrowvert$ |      | <span class="token code-snippet code keyword">`\Arrowvert`</span> | $\Arrowvert$ |      | <span class="token code-snippet code keyword">`\bracevert`</span>  | $\bracevert$  |      |               |               |<span class="token title important"><span class="token punctuation">##</span> 9. 其他符号</span>|  <span class="token code-snippet code keyword">`LaTeX`</span>命令   |      符号      |      | <span class="token code-snippet code keyword">`LaTeX`</span>命令  |     符号     |      |           <span class="token code-snippet code keyword">`LaTeX`</span>命令           |              符号               |      |             <span class="token code-snippet code keyword">`LaTeX`</span>命令             |                符号                 || :------------: | :------------: | :--: | :----------: | :----------: | :--: | :-----------------------------: | :-----------------------------: | :--: | :---------------------------------: | :---------------------------------: ||    <span class="token code-snippet code keyword">`\dots`</span>     |    $\dots$     |      |   <span class="token code-snippet code keyword">`\cdots`</span>   |   $\cdots$   |      |            <span class="token code-snippet code keyword">`\vdots`</span>             |            $\vdots$             |      |              <span class="token code-snippet code keyword">`\ddots`</span>               |              $\ddots$               ||    <span class="token code-snippet code keyword">`\hbar`</span>     |    $\hbar$     |      |   <span class="token code-snippet code keyword">`\imath`</span>   |   $\imath$   |      |            <span class="token code-snippet code keyword">`\jmath`</span>             |            $\jmath$             |      |               <span class="token code-snippet code keyword">`\ell`</span>                |               $\ell$                ||     <span class="token code-snippet code keyword">`\Re`</span>      |     $\Re$      |      |    <span class="token code-snippet code keyword">`\Im`</span>     |    $\Im$     |      |            <span class="token code-snippet code keyword">`\aleph`</span>             |            $\aleph$             |      |                <span class="token code-snippet code keyword">`\wp`</span>                |                $\wp$                ||   <span class="token code-snippet code keyword">`\forall`</span>    |   $\forall$    |      |  <span class="token code-snippet code keyword">`\exists`</span>   |  $\exists$   |      | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token code-snippet code keyword">`\mho`</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>$\mho$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> |      |             <span class="token code-snippet code keyword">`\partial`</span>              |             $\partial$              ||      <span class="token code-snippet code keyword">`‘`</span>       |      $‘$       |      |   <span class="token code-snippet code keyword">`\prime`</span>   |   $\prime$   |      |           <span class="token code-snippet code keyword">`\emptyset`</span>           |           $\emptyset$           |      |              <span class="token code-snippet code keyword">`\infty`</span>               |              $\infty$               ||    <span class="token code-snippet code keyword">`\nabla`</span>    |    $\nabla$    |      | <span class="token code-snippet code keyword">`\triangle`</span>  | $\triangle$  |      | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token code-snippet code keyword">`\Box`</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>$\Box$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> |      | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token code-snippet code keyword">`\Diamond`</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> | <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>$\Diamond$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> ||     <span class="token code-snippet code keyword">`\bot`</span>     |     $\bot$     |      |    <span class="token code-snippet code keyword">`\top`</span>    |    $\top$    |      |            <span class="token code-snippet code keyword">`\angle`</span>             |            $\angle$             |      |               <span class="token code-snippet code keyword">`\surd`</span>               |               $\surd$               || <span class="token code-snippet code keyword">`\diamondsuit`</span> | $\diamondsuit$ |      | <span class="token code-snippet code keyword">`\heartsuit`</span> | $\heartsuit$ |      |           <span class="token code-snippet code keyword">`\clubsuit`</span>           |           $\clubsuit$           |      |            <span class="token code-snippet code keyword">`\spadesuit`</span>             |            $\spadesuit$             || <span class="token code-snippet code keyword">`\neg`</span>, <span class="token code-snippet code keyword">`lnot`</span> |     $\neg$     |      |   <span class="token code-snippet code keyword">`\flat`</span>    |   $\flat$    |      |           <span class="token code-snippet code keyword">`\natural`</span>            |           $\natural$            |      |              <span class="token code-snippet code keyword">`\sharp`</span>               |              $\sharp$               |<span class="token title important"><span class="token punctuation">##</span> 10. 数字字母</span><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important">         例子          </span><span class="token punctuation">|</span><span class="token table-header important">         命令          </span><span class="token punctuation">|</span><span class="token table-header important">        所需宏包         </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">:-------------------:</span> <span class="token punctuation">|</span> <span class="token punctuation">:-------------------:</span> <span class="token punctuation">|</span> <span class="token punctuation">:---------------------:</span> <span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data">   $\mathrm{ABCdef}$   </span><span class="token punctuation">|</span><span class="token table-data">   <span class="token code-snippet code keyword">`\mathrm{ABCdef}`</span>   </span><span class="token punctuation">|</span><span class="token table-data">                         </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data">   $\mathit{ABCdef}$   </span><span class="token punctuation">|</span><span class="token table-data">   <span class="token code-snippet code keyword">`\mathit{ABCdef}`</span>   </span><span class="token punctuation">|</span><span class="token table-data">                         </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data"> $\mathnormal{ABCdef}$ </span><span class="token punctuation">|</span><span class="token table-data"> <span class="token code-snippet code keyword">`\mathnormal{ABCdef}`</span> </span><span class="token punctuation">|</span><span class="token table-data">                         </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data">  $\mathcal{ABCdef}$   </span><span class="token punctuation">|</span><span class="token table-data">  <span class="token code-snippet code keyword">`\mathcal{ABCdef}`</span>   </span><span class="token punctuation">|</span><span class="token table-data">                         </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data">  $\mathscr{ABCdef}$   </span><span class="token punctuation">|</span><span class="token table-data">  <span class="token code-snippet code keyword">`\mathscr{ABCdef}`</span>   </span><span class="token punctuation">|</span><span class="token table-data">                         </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data">  $\mathfrak{ABCdef}$  </span><span class="token punctuation">|</span><span class="token table-data">  <span class="token code-snippet code keyword">`\mathfrak{ABCdef}`</span>  </span><span class="token punctuation">|</span><span class="token table-data">        <span class="token code-snippet code keyword">`eufrak`</span>         </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data">    $\mathbb{RZQ}$     </span><span class="token punctuation">|</span><span class="token table-data">    <span class="token code-snippet code keyword">`\mathbb{RZQ}`</span>     </span><span class="token punctuation">|</span><span class="token table-data"> <span class="token code-snippet code keyword">`amsfonts`</span> or <span class="token code-snippet code keyword">`amssymb`</span> </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data">    $\mathbf{RZQ}$     </span><span class="token punctuation">|</span><span class="token table-data">    <span class="token code-snippet code keyword">`\mathbf{RZQ}`</span>     </span><span class="token punctuation">|</span><span class="token table-data">                         </span><span class="token punctuation">|</span></span></span>参考：<span class="token list punctuation">1.</span> <span class="token url">[<span class="token content">数学符号表</span>](<span class="token url">http://persoweb.whu.edu.cn/mathsymb.pdf</span>)</span><span class="token list punctuation">2.</span> <span class="token url">[<span class="token content">LATEX Mathematical Symbols</span>](<span class="token url">https://www.egr.msu.edu/~renjian/LaTeX-Math-Symbols.pdf</span>)</span><span class="token list punctuation">3.</span> <span class="token url">[<span class="token content">LaTeX:Symbols</span>](<span class="token url">https://artofproblemsolving.com/wiki/index.php/LaTeX:Symbols</span>)</span><span class="token list punctuation">4.</span> <span class="token url">[<span class="token content">LaTeX:Commands</span>](<span class="token url">https://artofproblemsolving.com/wiki/index.php/LaTeX:Commands</span>)</span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> LaTeX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第5章-集成运算放大器及其应用</title>
      <link href="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/"/>
      <url>/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="第5章-集成运算放大器及其应用"><a href="#第5章-集成运算放大器及其应用" class="headerlink" title="第5章-集成运算放大器及其应用"></a>第5章-集成运算放大器及其应用</h1><p>[toc]</p><p>集成运放：（负反馈的缺点：①增益下降②可能产生自激）<br>　　线性特点：$\begin{cases}be ~ (gs、+-)\ 虚短、虚断\end{cases}$ 负反馈<br>　　非线性特点：$\begin{cases}虚断\ 输出只有两种 0 或 1（电压比较器）\end{cases}$ 开环正反馈</p><p>平衡电阻（补偿电阻）：<strong>提高运算精度</strong></p><h2 id="5-1-理想集成运算放大器线性工作特性"><a href="#5-1-理想集成运算放大器线性工作特性" class="headerlink" title="5.1 理想集成运算放大器线性工作特性"></a>5.1 理想集成运算放大器线性工作特性</h2><p>集成运放：<br>　　输出端 $u_o$<br>　　反相输入端 $u_-$<br>　　同相输入端 $u_+$<br>　　开环差模增益 $A_{od}$<br>　　线性工作区 $u_o = A_{od}(u_+ - u_-)$，$u_+ - u_-$ 很小</p><p>通常，因为工程上认为 $A_{od} \to \infin$，<strong>电压传输特性曲线</strong> 近似为<strong>符号函数</strong></p><p>如何保证集成运放工作在线性区：引入负反馈</p><p>理想集成运放工作在线性区<strong>特点</strong>：<br>　　虚短：不是短路，只是同反向电压近似相等 $u_+ \to u_-$<br>　　虚断：不是开路，只是电流小到可以忽略不计 $i_+ = i_- \to 0$</p><hr><h2 id="5-2-信号运算电路之反相比例运算电路"><a href="#5-2-信号运算电路之反相比例运算电路" class="headerlink" title="5.2 信号运算电路之反相比例运算电路"></a>5.2 信号运算电路之反相比例运算电路</h2><p>电路结构特点：<br>　　①输入信号从<strong>反相输入端</strong>输入<br>　　②引入负反馈（虚断、虚短）</p><p>反相比例运算电路：${\large u_o \approx \textcolor{red}{-} \frac{R_f}{R_1}u_i}$</p><p><strong>补偿电阻</strong>：$R_2 = R_1 // R_f$，用于保证集成运放输入端的对称性</p><details><summary>展开说说</summary><p>电路：</p><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.2 信号运算电路之反相比例运算电路.png"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.2 信号运算电路之反相比例运算电路1.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.2 信号运算电路之反相比例运算电路2.jpg"></details><hr><h2 id="5-3-信号运算电路之同相比例运算电路"><a href="#5-3-信号运算电路之同相比例运算电路" class="headerlink" title="5.3 信号运算电路之同相比例运算电路"></a>5.3 信号运算电路之同相比例运算电路</h2><p>电路结构特点：<br>　　①输入信号从<strong>同相输入端</strong>输入<br>　　②引入负反馈（虚断、虚短）</p><p>同相比例运算电路：${\large u_o \approx (1 + \frac{R_f}{R_1})u_i}$</p><p><strong>补偿电阻</strong>：$R_2 = R_1 // R_f$，用于保证集成运放输入端的对称性</p><details><summary>展开说说</summary><p>电路：</p><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.3 信号运算电路之同相比例运算电路.png"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.3 信号运算电路之同相比例运算电路1.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.3 信号运算电路之同相比例运算电路2.jpg"></details><hr><h2 id="5-4-信号运算电路之电压跟随器"><a href="#5-4-信号运算电路之电压跟随器" class="headerlink" title="5.4 信号运算电路之电压跟随器"></a>5.4 信号运算电路之电压跟随器</h2><p>基于<strong>同相比例运算电路</strong>可以实现<strong>电压跟随器</strong></p><p>由同相比例运算电路 ${\large u_o \approx (1 + \frac{R_f}{R_1})u_i}$ 可知——令 $R_1 = \infin$ 或者 $R_f = 0$ 可以实现电压跟随器。<br>通常，实际中，同时令 $R_1 = \infin <del>,</del> R_f = 0$ 来实现电压跟随器 $u_o = u_i$</p><details><summary>展开说说</summary><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.4 信号运算电路之电压跟随器1.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.4 信号运算电路之电压跟随器2.jpg"></details><hr><h2 id="5-5-信号运算电路之反相加法运算电路"><a href="#5-5-信号运算电路之反相加法运算电路" class="headerlink" title="5.5 信号运算电路之反相加法运算电路"></a>5.5 信号运算电路之反相加法运算电路</h2><p>假设电阻及电源均为线性元件，由于集成运放工作在线性区，亦为线性元件，因此该电路为<strong>线性电路</strong>，满足<strong>叠加定理</strong>条件。</p><p>电路结构特点：<br>　　①输入信号<strong>均</strong>从<strong>反相输入端</strong>输入<br>　　②引入负反馈：为了保证运放工作在<strong>线性区</strong>（虚断、虚短）</p><p>反相加法运算电路：${\large u_o \approx - \left( \frac{R_f}{R_1} u_{i1} + \frac{R_f}{R_2} u_{i2} \right)}$（使用<strong>叠加定理</strong>进行分析！）</p><p><strong>补偿电阻</strong>：$R_3 = R_1 // R_2 //R_f$，用于保证集成运放输入端的对称性</p><details><summary>展开说说</summary><p>电路：</p><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.5 信号运算电路之反相加法运算电路.png"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.5 信号运算电路之反相加法运算电路1.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.5 信号运算电路之反相加法运算电路2.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.5 信号运算电路之反相加法运算电路3.jpg"></details><hr><h2 id="5-6-信号运算电路之同相加法运算电路"><a href="#5-6-信号运算电路之同相加法运算电路" class="headerlink" title="5.6 信号运算电路之同相加法运算电路"></a>5.6 信号运算电路之同相加法运算电路</h2><p>假设电阻及电源均为线性元件，由于集成运放工作在线性区，亦为线性元件，因此该电路为<strong>线性电路</strong>，满足<strong>叠加定理</strong>条件。</p><p>电路结构特点：<br>　　①输入信号<strong>均</strong>从<strong>同相输入端</strong>输入<br>　　②引入负反馈：为了保证运放工作在<strong>线性区</strong>（虚断、虚短）</p><p>同相加法运算电路：${\large u_o \approx \left( 1 + \frac{R_f}{R_3} \right) \left( \frac{R_2}{R_1 + R_2} u_{i1} + \frac{R_1}{R_1 + R_2} u_{i2} \right)}$（使用<strong>叠加定理</strong>进行分析！）</p><details><summary>展开说说</summary><p>电路：</p><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.6 信号运算电路之同相加法运算电路.png"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.6 信号运算电路之同相加法运算电路1.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.6 信号运算电路之同相加法运算电路2.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.6 信号运算电路之同相加法运算电路3.jpg"></details><hr><h2 id="5-7-信号运算电路之减法运算电路"><a href="#5-7-信号运算电路之减法运算电路" class="headerlink" title="5.7 信号运算电路之减法运算电路"></a>5.7 信号运算电路之减法运算电路</h2><p>假设电阻及电源均为线性元件，由于集成运放工作在线性区，亦为线性元件，因此该电路为<strong>线性电路</strong>，满足<strong>叠加定理</strong>条件。</p><p>电路结构特点：<br>　　①输入信号从<strong>不同输入端</strong>输入<br>　　②引入负反馈：为了保证运放工作在<strong>线性区</strong>（虚断、虚短）</p><p>减法运算电路：${\large u_o \approx \left( 1 + \frac{R_f}{R_1} \right) \left( \frac{R_3}{R_2 + R_3} u_{i2} - \frac{R_f}{R_1 + R_f} u_{i1} \right)}$（使用<strong>叠加定理</strong>进行分析！）</p><details><summary>展开说说</summary><p>电路：</p><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.7 信号运算电路之减法运算电路.png"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.7 信号运算电路之减法运算电路1.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.7 信号运算电路之减法运算电路2.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.7 信号运算电路之减法运算电路3.jpg"></details><hr><h2 id="5-8-信号运算电路之微积分运算电路"><a href="#5-8-信号运算电路之微积分运算电路" class="headerlink" title="5.8 信号运算电路之微积分运算电路"></a>5.8 信号运算电路之微积分运算电路</h2><p>${\large q = Cu_c <del>,</del> i_c = \frac{dq}{dt} <del>,</del> i_c = C \frac{du_c}{dt} <del>,</del> u_c = - \frac1C \int i_c dt}$</p><p>积分运算电路：${\large u_o = -\frac{1}{RC}\int u_i dt}$<br>微分运算电路：${\large u_o = -RC \frac{du_i}{dt}}$</p><details><summary>展开说说</summary><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.8 信号运算电路之微积分运算电路1.jpg"><p><font color="red" size="5">注：电容、电阻互换即可！（这里 PPT 做了动画，所以没有显示）</font></p><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.8 信号运算电路之微积分运算电路2.jpg"></details><hr><h2 id="5-9-信号处理电路之有源滤波器概述"><a href="#5-9-信号处理电路之有源滤波器概述" class="headerlink" title="5.9 信号处理电路之有源滤波器概述"></a>5.9 信号处理电路之有源滤波器概述</h2><p>截止频率 f_p</p><p>全通滤波器：利用其相频特性接近<strong>线性</strong>，实现<strong>延时</strong>功能</p><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.9 信号处理电路之有源滤波器概述1.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.9 信号处理电路之有源滤波器概述2.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.9 信号处理电路之有源滤波器概述3.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.9 信号处理电路之有源滤波器概述4.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.9 信号处理电路之有源滤波器概述5.jpg"><hr><h2 id="5-10-信号处理电路之一阶低通有源滤波器"><a href="#5-10-信号处理电路之一阶低通有源滤波器" class="headerlink" title="5.10 信号处理电路之一阶低通有源滤波器"></a>5.10 信号处理电路之一阶低通有源滤波器</h2><p>频率 f 的最高次项为 1 次，故为<strong>一阶</strong>滤波器</p><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.10 信号处理电路之一阶低通有源滤波器1.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.10 信号处理电路之一阶低通有源滤波器2.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.10 信号处理电路之一阶低通有源滤波器3.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.10 信号处理电路之一阶低通有源滤波器4.jpg"><hr><h2 id="5-11-信号处理电路之二阶低通有源滤波器"><a href="#5-11-信号处理电路之二阶低通有源滤波器" class="headerlink" title="5.11 信号处理电路之二阶低通有源滤波器"></a>5.11 信号处理电路之二阶低通有源滤波器</h2><p>实际滤波器设计中，需要截止频率 $f_p$ 等于特征频率 f_0$</p><p>Q 为滤波器的品质因数</p><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.11 信号处理电路之二阶低通有源滤波器1.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.11 信号处理电路之二阶低通有源滤波器2.jpg"><hr><h2 id="5-12-理想集成运算放大器非线性工作特性"><a href="#5-12-理想集成运算放大器非线性工作特性" class="headerlink" title="5.12 理想集成运算放大器非线性工作特性"></a>5.12 理想集成运算放大器非线性工作特性</h2><p>集成运放<strong>不引入</strong>负反馈，则工作在<strong>非线性区</strong>：$\begin{cases}开环\正反馈\end{cases}$</p><p>非线性工作特性：$\begin{cases}虚断\输出只有两种可能\end{cases}$</p><details><summary>展开说说</summary><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.12 理想集成运算放大器非线性工作特性1.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.12 理想集成运算放大器非线性工作特性2.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.12 理想集成运算放大器非线性工作特性3.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.12 理想集成运算放大器非线性工作特性4.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.12 理想集成运算放大器非线性工作特性5.jpg"></details><hr><h2 id="5-13-信号处理电路之过零比较器"><a href="#5-13-信号处理电路之过零比较器" class="headerlink" title="5.13 信号处理电路之过零比较器"></a>5.13 信号处理电路之过零比较器</h2><p>电压比较器：用来比较输入电压和参考电压的大小</p><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.13 信号处理电路之过零比较器1.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.13 信号处理电路之过零比较器2.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.13 信号处理电路之过零比较器3.jpg"><hr><h2 id="5-14-信号处理电路之单限比较器"><a href="#5-14-信号处理电路之单限比较器" class="headerlink" title="5.14 信号处理电路之单限比较器"></a>5.14 信号处理电路之单限比较器</h2><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.14 信号处理电路之单限比较器1.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.14 信号处理电路之单限比较器2.jpg"><hr><h2 id="5-15-信号处理电路之滞回比较器"><a href="#5-15-信号处理电路之滞回比较器" class="headerlink" title="5.15 信号处理电路之滞回比较器"></a>5.15 信号处理电路之滞回比较器</h2><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.15 信号处理电路之滞回比较器1.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.15 信号处理电路之滞回比较器2.jpg"><img src="/2022/06/29/di-5-zhang-ji-cheng-yun-suan-fang-da-qi-ji-qi-ying-yong/5.15 信号处理电路之滞回比较器3.jpg"><hr><hr><ul><li>在理想运算放大器中，常用“虚断”的概念进行电路分析，是因为其（<strong>输入电阻无穷大</strong>）</li></ul><p>电压跟随器要求：输入阻抗越大越好，输出阻抗越小越好</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 模电笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4章-反馈放大结构与应用</title>
      <link href="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/"/>
      <url>/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="第4章-反馈放大结构与应用"><a href="#第4章-反馈放大结构与应用" class="headerlink" title="第4章-反馈放大结构与应用"></a>第4章-反馈放大结构与应用</h1><p>[toc]</p><h2 id="4-1-反馈的基本概念"><a href="#4-1-反馈的基本概念" class="headerlink" title="4.1 反馈的基本概念"></a>4.1 反馈的基本概念</h2><p>净输入信号 $\dot{X}’<em>{i}$ $=$ 输入信号 $\dot{X}</em>{if}$ $+$ 反馈信号 $\dot{X}_f$</p><p>输入输出回路存在<strong>联系</strong>，则存在<strong>反馈</strong>。</p><p>多级放大电路中：<br>　　局部反馈：只对本级起作用的反馈<br>　　级间反馈：反馈跨级起作用（常见：从整个电路的输出端引回到输入端）</p><hr><h2 id="4-2-正反馈和负反馈"><a href="#4-2-正反馈和负反馈" class="headerlink" title="4.2 正反馈和负反馈"></a>4.2 正反馈和负反馈</h2><p>判断：<font color="red" size="5">（单极化传输条件：先放大，后反馈）</font><br>　　同端异号 -&gt; 负反馈<br>　　同端同号 -&gt; 正反馈<br>　　异端异号 -&gt; 正反馈<br>　　异端同号 -&gt; 负反馈</p><hr><h2 id="4-3-电压反馈和电流反馈"><a href="#4-3-电压反馈和电流反馈" class="headerlink" title="4.3 电压反馈和电流反馈"></a>4.3 电压反馈和电流反馈</h2><p><strong>输出</strong>端短路法：<br>　　短路之后反馈不存在：电压反馈<br>　　短路之后反馈存在：电流反馈</p><hr><h2 id="4-4-串联反馈和并联反馈"><a href="#4-4-串联反馈和并联反馈" class="headerlink" title="4.4 串联反馈和并联反馈"></a>4.4 串联反馈和并联反馈</h2><p><strong>输入</strong>端：<br>　　并联反馈：反馈信号和输入信号接于基本放大电路的<strong>同一</strong>输入端<br>　　串联反馈：反馈信号和输入信号接于基本放大电路的<strong>不同</strong>输入端</p><hr><h2 id="4-5-反馈放大电路的一般表达式"><a href="#4-5-反馈放大电路的一般表达式" class="headerlink" title="4.5 反馈放大电路的一般表达式"></a>4.5 反馈放大电路的一般表达式</h2><p>$x_i’ = x_{if} - x_f$</p><p>输入（输入信号）：$x_{if}$<br>基本放大器输入（净输入）：$x_i’$<br>反馈网络输出：$x_f$</p><p>基本放大器放大倍数（<strong>开环增益</strong>）：$\textcolor{red}{\large A’ = \frac{x_o’}{x_i’}}$<br>基本放大器输出：$x_o’$<br>基本放大器输入（净输入）：$x_i’$</p><p>反馈网络<strong>反馈系数</strong>：$\textcolor{red}{\large k_f = \frac{x_f}{x_{of}}}$<br>反馈网络输出：$x_f$<br>反馈网络输入：$x_{of}$</p><p>基本放大器输出就是反馈网络输入：$x_o’ = x_{of}$</p><p>环路增益（<strong>闭环增益</strong>）：$\textcolor{red}{\large A_f = \frac{x_{of}}{x_{if}} = \frac{A’}{1 + A’k_f}}$</p><p><strong>闭环增益</strong>根据<strong>反馈组态</strong>不同而不同！</p><hr><h2 id="4-6-深度负反馈的近似计算"><a href="#4-6-深度负反馈的近似计算" class="headerlink" title="4.6 深度负反馈的近似计算"></a>4.6 深度负反馈的近似计算</h2><p>反馈深度：$1 + A’k_f$</p><p>负反馈：$|1 + Ak_f| &gt; 1 \Rightarrow |A_f| &lt; |A|$<br>深度负反馈：$|1 + Ak_f| \gg 1$<br>　　$A_f \approx \frac{1}{k_f}$<br>　　$x_{if} \approx x_f, x_i’ \to 0$<br>正反馈：$|1 + Ak_f| &lt; 1 \Rightarrow |A_f| &gt; |A|$<br>深度正反馈：$|1 + Ak_f| \ll 1$<br>　　$A_f \approx \frac{x_{of}}{x_{if}} \to \infin $<br>　　振荡器、信号发生器</p><p>深度负反馈特点：<strong>虚断、虚断</strong><br>${\large A_f = \frac{x_{of}}{x_{if}} \approx \frac{1}{k_f} = \frac{x_{f}}{x_{x_{of}}}}$<br>$x_{if} \approx x_{f}$<br>$x_i’ = x_{if} - x_f \to 0$</p><details><summary>例1.</summary><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4. 反馈放大结构与应用/4.6 深度负反馈的近似计算1.jpg"></details><details><summary>例2.</summary><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4. 反馈放大结构与应用/4.6 深度负反馈的近似计算2.jpg"></details><details><summary>例3.</summary><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4. 反馈放大结构与应用/4.6 深度负反馈的近似计算3.jpg"></details><hr><h2 id="4-7-负反馈提高增益的稳定性"><a href="#4-7-负反馈提高增益的稳定性" class="headerlink" title="4.7 负反馈提高增益的稳定性"></a>4.7 负反馈提高增益的稳定性</h2><p>$\frac{\Delta A_f}{A_f} = \frac{1}{1 + A k_f} \frac{\Delta A}{A}$</p><p>$\frac{\Delta A_f}{A_f}$：闭环增益相对变化量<br>$\frac{\Delta A}{A}$：开环增益相对变化量</p><p>灵敏度降低，稳定性提高。</p><p>深度负反馈下，<strong>闭环增益</strong>只取决于反馈网络：<br>　　电压串联负反馈只能稳定电压增益<br>　　电压并联负反馈只能稳定互阻增益<br>　　电流串联负反馈只能稳定互导增益<br>　　电流并联负反馈只能稳定电流增益</p><hr><h2 id="4-8-负反馈减小非线性失真"><a href="#4-8-负反馈减小非线性失真" class="headerlink" title="4.8 负反馈减小非线性失真"></a>4.8 负反馈减小非线性失真</h2><p>负反馈只能减小反馈环内产生的失真，<br>不能减小输入信号的失真。</p><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.8 负反馈减小非线性失真.jpg"><hr><h2 id="4-9-负反馈展宽通频带"><a href="#4-9-负反馈展宽通频带" class="headerlink" title="4.9 负反馈展宽通频带"></a>4.9 负反馈展宽通频带</h2><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.9 负反馈展宽通频带1.jpg"><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.9 负反馈展宽通频带2.jpg"><p>引入负反馈后，放大电路的上限频率提高到原来的 $1 + A_fk_f$ 倍，下限频率降低到原来的 $\frac{1}{1 + A_fk_f}$ 倍，<strong>总通频带展宽</strong>。</p><p>引入负反馈前后，放大电路的增益带宽积（$=$ 通带增益 $*$ 通频带）几乎不变。</p><hr><h2 id="4-10-负反馈对输入电阻的影响"><a href="#4-10-负反馈对输入电阻的影响" class="headerlink" title="4.10 负反馈对输入电阻的影响"></a>4.10 负反馈对输入电阻的影响</h2><p>主要取决于<strong>串联反馈</strong>还是<strong>并联反馈</strong>。</p><p>引入串联负反馈，增大输入电阻（到原来 $1 + A k_f$ 倍）；<br>引入并联负反馈，减小输入电阻（到原来 ${\large \frac{1}{1 + A k_f}}$ 倍）</p><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.10 负反馈对输入电阻的影响1.jpg"><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.10 负反馈对输入电阻的影响2.jpg"><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.10 负反馈对输入电阻的影响3.jpg"><hr><h2 id="4-11-负反馈对输出电阻的影响"><a href="#4-11-负反馈对输出电阻的影响" class="headerlink" title="4.11 负反馈对输出电阻的影响"></a>4.11 负反馈对输出电阻的影响</h2><p>主要取决于<strong>电压反馈</strong>还是<strong>电流反馈</strong>。</p><p>引入电压负反馈，<strong>减小</strong>输出电阻到原来 ${\large \frac{1}{1 + A_o k_f}}$ 倍（稳定输出电压）；<br>引入电流负反馈，<strong>增大</strong>输出电阻到原来 $1 + A_s k_f$ 倍（稳定输出电流）</p><p>$R_o$ 是考虑了反馈网络负载效应的基本放大电路的输出电阻<br>$A_o$ 为基本放大电路的开环增益<br>$A_s$ 为基本放大电路的短路增益</p><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.10 负反馈对输入电阻的影响1.jpg"><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.10 负反馈对输入电阻的影响2.jpg"><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.10 负反馈对输入电阻的影响3.jpg"><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.11 负反馈对输出电阻的影响4.jpg"><hr><h2 id="4-12-负反馈放大电路的自激振荡现象"><a href="#4-12-负反馈放大电路的自激振荡现象" class="headerlink" title="4.12 负反馈放大电路的自激振荡现象"></a>4.12 负反馈放大电路的自激振荡现象</h2><p>负反馈一般在中频区，在高频/低频区，因为电路的附加相移，电路在某个频率电变成<strong>正反馈</strong>，甚至产生<strong>自激振荡</strong>（电路自己激励自己产生震荡：输入信号为零，放大电路仍有输出信号）。</p><p>耦合电容、旁路电容、级间电容、杂散电容等影响相位。</p><p>自激振荡的好坏：<br>　　放大电路中，为了电路的稳定性，需要避免产生自激振荡<br>　　正弦波振荡器中，需要通过电路自激振荡产生正弦波</p><p>自激振荡的平衡条件：幅值、相位平衡条件</p><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.12 负反馈放大电路的自激振荡现象.jpg"><hr><h2 id="4-13-负反馈放大电路的稳定性分析及相位补偿"><a href="#4-13-负反馈放大电路的稳定性分析及相位补偿" class="headerlink" title="4.13 负反馈放大电路的稳定性分析及相位补偿"></a>4.13 负反馈放大电路的稳定性分析及相位补偿</h2><p>相位补偿原理：</p><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.13 负反馈放大电路的稳定性分析及相位补偿1.jpg"><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.13 负反馈放大电路的稳定性分析及相位补偿2.jpg"><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.13 负反馈放大电路的稳定性分析及相位补偿3.jpg"><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.13 负反馈放大电路的稳定性分析及相位补偿4.jpg"><img src="/2022/06/29/di-4-zhang-fan-kui-fang-da-jie-gou-yu-ying-yong/4.13 负反馈放大电路的稳定性分析及相位补偿5.jpg"><p>稳定裕度：<br>　　增益裕量：一般负反馈电路要求：$G_m \le -10dB$，$G_m$ 越负越稳定<br>　　相位裕量：一般负反馈电路要求：$\varphi_m \ge 45°$，$\varphi_m$ 越大越稳定</p><p>滞后补偿法消除自激振荡：代价——通频带变窄</p><hr><hr><p>交流：${\large \frac{v_o}{v_i} = -\frac{R_1}{R_f}}$</p><p>反馈之路：<br>　　输入回路：包含 be (gs, +-) 的回路<br>　　输出回路：包含最后一个晶体管的回路</p><p>判断反馈类型（法1）：离晶体管最近处短路<br>　　令$<br>\begin{cases}<br>v_0 = 0<br>    \begin{cases}<br>    输出回路不存在 &amp; 电压反馈\<br>    输出回路存在 &amp; 电流反馈\<br>    \end{cases}\<br>v_i = 0<br>    \begin{cases}<br>    输入回路不存在 &amp; 并联反馈\<br>    输入回路存在 &amp; 串联反馈\<br>    \end{cases}\<br>\end{cases}<br>$</p><p>判断反馈类型（法2）：<br>条件：①信号源与负载<strong>有公共接地端</strong>②反馈网络<strong>无晶体管</strong><br>　　反馈网络通过晶体管与<strong>输出</strong>相连：$\begin{cases}是 &amp; 电流反馈\ 否 &amp; 电压反馈\end{cases}$<br>　　反馈网络通过晶体管与<strong>输入</strong>相连：$\begin{cases}是 &amp; 串联反馈\ 否 &amp; 并联反馈\end{cases}$</p><p>电压放大器：输出电压稳定<br>输入电阻大：$R_i \to \infin$<br>输出电阻小：$R_o \to 0$</p><p>电流放大器：输出电流稳定<br>输入电阻小：$R_i \to 0$<br>输出电阻大：$R_o \to \infin$</p><p>深度负反馈：<br>电压负反馈稳定输出电压<br>电力负反馈稳定输出电流<br>与输出电阻无关</p><p>虚短虚断：离晶体三极管最近处 be (gx, +-)<br>$A_f = \frac{1}{k_f}$<br>$x_{if} \approx x_f, x_i’ \to 0$</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 模电笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第3章-放大器频率特性基础</title>
      <link href="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/"/>
      <url>/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="第3章-放大器频率特性基础"><a href="#第3章-放大器频率特性基础" class="headerlink" title="第3章-放大器频率特性基础"></a>第3章-放大器频率特性基础</h1><p>[toc]</p><h2 id="3-1-放大器频率特性的基本概念"><a href="#3-1-放大器频率特性的基本概念" class="headerlink" title="3.1 放大器频率特性的基本概念"></a>3.1 放大器频率特性的基本概念</h2><p>一般，放大器中含有电抗元件。在多频率的模拟信号激励下，因频率不同，放大器的增益会随之改变，因此，在正弦稳态情况下，增益必须采用复数表示，即<strong>复增益</strong>：</p><p><strong>复增益</strong>：${\large A(j\omega)=A(\omega)e^{j\phi_A(\omega)}}$<br>幅频特性：${\large A(\omega)}$；相频特性：${\large \phi_A(\omega)}$</p><p>或者</p><p><strong>复增益</strong>：${\large A(jf)=A(f)e^{j\phi_A(f)}}$<br>幅频特性：${\large A(f)}$；相频特性：${\large \phi_A(f)}$</p><p>相应的，可以画出幅频特性曲线和相频特性曲线。</p><p>大的耦合电容认为短路，小的极间电容认为开路。耦合电容是高通，极间电容是低通；所以高频要考虑极间电容，低频考虑耦合电容。</p><p>我们认为，当放大器增益下降到最大增益的 $\frac{1}{\sqrt{2}}$ 时，对应了两个频率，分别为上限截止频率 $f_H$ 和 下限截止频率 $f_L$，这两个频率之间的频率就是放大器的<strong>通频带</strong>，在这个频率范围内，我们近似认为放大器的增益是一个常数，即通频带以内，放大器的增益无失真。</p><p>在频率很高和频率很低的时候出现的失真是由于<strong>线性电抗元件</strong>引起的，称之为<strong>线性失真</strong>（<strong>频率失真</strong>）。</p><p>频率失真包括<strong>幅频失真</strong>和<strong>相频失真</strong>，线性失真的<strong>特点</strong>：不产生新的频率成分。</p><p>非线性失真：功率放大器的<strong>交越失真</strong>、放大器的<strong>饱和失真和截止失真</strong></p><hr><h2 id="3-2-频率特性的稳态描述方法及波特图坐标系"><a href="#3-2-频率特性的稳态描述方法及波特图坐标系" class="headerlink" title="3.2 频率特性的稳态描述方法及波特图坐标系"></a>3.2 频率特性的稳态描述方法及波特图坐标系</h2><p><strong>波特图</strong>，即幅频特性曲线和相频特性曲线</p><p>幅频和相频特性波特图的<strong>横坐标</strong>均采用<strong>对数坐标</strong>（横坐标没有 $0$）</p><p><strong>相频</strong>特性曲线的<strong>纵坐标</strong> $\varphi_H(f)$ 采用传统的<strong>比例坐标</strong></p><p><strong>幅频</strong>特性曲线的<strong>纵坐标</strong> $A_v(f)(dB)$ 采用<strong>对数坐标</strong>，$A_v(f)(dB) = 20lgA_v(f) = 20lg|A_v(jf)|$</p><hr><h2 id="3-3-一阶低通和高通RC滤波器的渐近波特图"><a href="#3-3-一阶低通和高通RC滤波器的渐近波特图" class="headerlink" title="3.3 一阶低通和高通RC滤波器的渐近波特图"></a>3.3 一阶低通和高通RC滤波器的渐近波特图</h2><p>什么是一阶？：<strong>一个独立</strong>动态元件</p><ul><li>一阶低通 RC 滤波器</li></ul><p>${\large A_v(j\omega) = \frac{1}{1 + j\frac{\omega}{\omega_H}}},~ \omega_H = \frac{1}{RC}$</p><p>幅值：$A_v(j\omega)|_{dB} = -20log\sqrt{(1 + (\frac{\omega}{\omega_H})^2)}$<br>相角：$\varphi_A(\omega) = -arctan\frac{\omega}{\omega_H}$</p><p>波特图：<br>幅频渐进波特图：从 $\omega_H$ 开始，-20dB/10倍频<br>相频渐进波特图：从 $0.1\omega_H$ 开始，-45°/10倍频</p><!-- <details><summary>展开说说</summary> --><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.3 一阶低通和高通RC滤波器的渐近波特图1.jpg"><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.3 一阶低通和高通RC滤波器的渐近波特图2.jpg"><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.3 一阶低通和高通RC滤波器的渐近波特图3.jpg"><!-- </details> --><ul><li>一阶高通 RC 滤波器</li></ul><p>${\large A_v(j\omega) = \frac{1}{1 - j\frac{\omega_L}{\omega}}},~ \omega = \frac{1}{RC}$</p><p>幅值：$A_v(j\omega)|_{dB} = -20log\sqrt{(1 + (\frac{\omega_L}{\omega})^2)}$<br>相角：$\varphi_A(\omega) = arctan\frac{\omega_L}{\omega}$</p><p>波特图：<br>幅频渐进波特图：从 $\omega_L$ 之前，20dB/10倍频<br>相频渐进波特图：从 $0.1\omega_L$ 开始，-45°/10倍频</p><!-- <details><summary>展开说说</summary> --><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.3 一阶低通和高通RC滤波器的渐近波特图4.jpg"><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.3 一阶低通和高通RC滤波器的渐近波特图5.jpg"><!-- </details> --><hr><h2 id="3-4-多因子增益的渐近波特图画法"><a href="#3-4-多因子增益的渐近波特图画法" class="headerlink" title="3.4 多因子增益的渐近波特图画法"></a>3.4 多因子增益的渐近波特图画法</h2><ul><li>RC 高通电路波特图的<strong>另解</strong></li></ul><p>已知：${\large A_v(j\omega) = (j\frac{\omega}{\omega_H})(\frac{1}{1 + j\frac{\omega}{\omega_H}})}$</p><p>幅值：${\large A_v(\omega)|_{dB} = [20lg\frac{\omega}{\omega_H}] + [20lg\sqrt{\frac{1}{1 + (\frac{\omega}{\omega_H})^2}}]}$<br>相角：${\large \varphi_A(\omega) = [90°] + [-arctan\frac{\omega}{\omega_H}]}$</p><p>因此，波特图可以由各个低通/高通因子<strong>叠加</strong>形成。</p><ul><li>例：${\large A_v(j\omega) = \frac{1000}{(1 + j\frac{\omega}{\omega_{H1}})(1 + j\frac{\omega}{\omega_{H2}})}}$</li></ul><p>幅频：（1）$20lg1000 = 60dB$（2）$20lg\frac{1}{\sqrt{1 + (\frac{\omega}{\omega_{H1}})^2}}$（3）$20lg\frac{1}{\sqrt{1 + (\frac{\omega}{\omega_{H2}})^2}}$<br>相角：（1）$0°$（2）$-arctan\frac{\omega}{\omega_{H1}}$（3）$-arctan\frac{\omega}{\omega_{H2}}$</p><ol><li>耦合大电容、旁路大电容是<strong>高通因子</strong></li><li>PN 结结电容 $C_{b’e}$ 和 $C_{b’c}$ 是<strong>低通因子</strong><ul><li>$C_{b’c}$ 势垒电容</li><li>$C_{b’e}$ 扩散电容：$C_{b’e} \gg C_{b’c}$</li></ul></li></ol><p>增益：${\large A_v(jf) \approx = \frac{A_{vm}}{(1 - j\frac{f_{L1}}{f})\cdots(1 - j\frac{f_{Ln}}{f})(1 + j\frac{f}{f_{H1}})\cdots(1 + j\frac{f}{f_{Hm}})}}$</p><p>$n$ 为独立耦合、旁路大电容个数，$m$ 为 PN 结结电容个数。</p><p>上限截止频率：$f_H \approx 1 / (\frac{1}{f_{H1}} + \cdots + \frac{1}{f_{Hm}}) = 1 / (2 \pi (\tau_{1} + \cdots + \tau_{m}))$<br>下限截止频率：$f_L \approx f_{L1} + \cdots + f_{Ln}$</p><p>一般来说，放大器级数越多，其中的电容越多，通频带越<strong>窄</strong>。</p><hr><h2 id="3-5-晶体管的高频小信号电路模型和频率特性参数"><a href="#3-5-晶体管的高频小信号电路模型和频率特性参数" class="headerlink" title="3.5 晶体管的高频小信号电路模型和频率特性参数"></a>3.5 晶体管的高频小信号电路模型和频率特性参数</h2><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.5 晶体管的高频小信号电路模型和频率特性参数1.jpg"><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.5 晶体管的高频小信号电路模型和频率特性参数2.jpg"><p>共发射电路：</p><p>截止角频率：$\omega_\beta = \frac{1}{rC} = \frac{1}{r_{b’e}(C_{b’e} + C_{b’c})}$<br>其中，势垒电容（手册有）：$C_{b’c}$<br>放大倍数（复数）：$\beta(j\omega) = \frac{I_c(j\omega)}{I_b(j\omega)}|<em>{</em>{V_{ce}=0}} \approx \frac{\beta}{1+j\frac{\omega}{\omega_\beta}}$<br>故，放大倍数：$\beta(\omega) = \beta / \sqrt{1 + (\omega_T / \omega_\beta)^2}$<br>特征角频率：$\omega_T = \beta \omega_\beta \approx g_m r_{b’e}\frac{1}{r_{b’e}C_{b’e}} = \frac{g_m}{C_{b’e}}$<br>特征频率（手册有）：$f_T = \omega / 2 \pi = \frac{g_m}{2 \pi C_{b’e}}$<br>故，扩散电容：$C_{b’e} \approx \frac{g_m}{2 \pi f_T}$</p><details><summary>场效应管的频率特性描述</summary><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.5 晶体管的高频小信号电路模型和频率特性参数3.jpg"></details><hr><h2 id="3-6-共发射极放大器高频频率特性分析（密勒等效）"><a href="#3-6-共发射极放大器高频频率特性分析（密勒等效）" class="headerlink" title="3.6 共发射极放大器高频频率特性分析（密勒等效）"></a>3.6 共发射极放大器高频频率特性分析（密勒等效）</h2><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.6 共发射极放大器高频频率特性分析（密勒等效）1.jpg"><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.6 共发射极放大器高频频率特性分析（密勒等效）2.jpg"><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.6 共发射极放大器高频频率特性分析（密勒等效）3.jpg"><p>密勒定理：<br>    $C_1 = C[1 - A(j\omega)]$<br>    $C_2 = C[1 - {\large \frac{1}{A(j\omega)}}]$</p><p>密勒定理：<br>    ①电容模拟电感<br>    ②小电容模拟大电容</p><p>共发射极放大电路：<br>增益：$A(j\omega) \approx -g_mR_L’$</p><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.6 共发射极放大器高频频率特性分析（密勒等效）4.jpg"><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.6 共发射极放大器高频频率特性分析（密勒等效）5.jpg"><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.6 共发射极放大器高频频率特性分析（密勒等效）6.jpg"><p>有一项：$R_tg_mR_L’C_{b’c}$，远大于其他项，说明 $C_{b’c}$ 对上限截止频率更大一些。</p><hr><h2 id="3-7-共发射极放大器频率特性工程近似分析"><a href="#3-7-共发射极放大器频率特性工程近似分析" class="headerlink" title="3.7 共发射极放大器频率特性工程近似分析"></a>3.7 共发射极放大器频率特性工程近似分析</h2><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.7 共发射极放大器频率特性工程近似分析1.jpg"><font color="red"><p><strong>工程近似</strong>：<br>　　低频：求其他电容<strong>短路</strong>戴维南等效电阻 $R_n$<br>　　高频：求其他电容<strong>开路</strong>戴维南等效电阻 $R_m$</p></font><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.7 共发射极放大器频率特性工程近似分析2.jpg"><p>高频：$f_H \approx 1 / [2 \pi (R_tC_{b’e} + R_{b’c}C_{b’c})]$<br>$R_t = [(R_S // R_B) + r_{bb’}] // r_{b’e}$<br>$R_{b’c} = R_t + (1 + g_mR_t)R_L’$</p><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.7 共发射极放大器频率特性工程近似分析3.jpg"><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.7 共发射极放大器频率特性工程近似分析4.jpg"><p>低频：$f_L \approx f_{L1} + f_{L2} + f_{L3} \approx f_{L3}$<br>$f_{L3} \gg f_{L1} + f_{L2}$</p><p><strong>旁路</strong>电容 $C_E$ 对放大器的<strong>低频</strong>特性影响最大</p><img src="/2022/06/29/di-3-zhang-fang-da-qi-pin-lu-te-xing-ji-chu/3.7 共发射极放大器频率特性工程近似分析5.jpg"><p>增益带宽积和放大器的增益没有太大关系，即在共发射极放大器里面，信号源和晶体管确定之后，增益带宽积近似为一个常数。</p><p>提高增益带宽积：使用好的信号源（理想电压源：信号源内阻小）、好的晶体管（$r_{bb’} 小、C_{b’c} 小、f_T 高$）</p><hr><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 模电笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章-放大单元与基本组成电路</title>
      <link href="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/"/>
      <url>/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="第2章-放大单元与基本组成电路"><a href="#第2章-放大单元与基本组成电路" class="headerlink" title="第2章-放大单元与基本组成电路"></a>第2章-放大单元与基本组成电路</h1><p>[toc]</p><h2 id="2-1-放大的概念"><a href="#2-1-放大的概念" class="headerlink" title="2.1 放大的概念"></a>2.1 放大的概念</h2><p>放大的本质是能量放大&amp;能量转换</p><p>耦合电路：增加电容</p><hr><h2 id="2-2-放大电路的直流工作平台"><a href="#2-2-放大电路的直流工作平台" class="headerlink" title="2.2 放大电路的直流工作平台"></a>2.2 放大电路的直流工作平台</h2><ul><li>放大电路中直流电源的作用：<ol><li>提供放大功率</li><li>保证放大期间具有正向受控作用</li></ol></li></ul><p>放大电路的放大是建立在直流工作平台基础上的信号放大。</p><hr><h2 id="2-3-直流通路和交流通路"><a href="#2-3-直流通路和交流通路" class="headerlink" title="2.3 直流通路和交流通路"></a>2.3 直流通路和交流通路</h2><ul><li><p>直流通路：</p><ul><li>交流信号置零</li><li>电容开路</li><li>电感短路</li></ul></li><li><p>交流通路：</p><ul><li>直流信号置零</li><li>电容短路</li><li>电感开路</li></ul></li></ul><hr><h2 id="2-4-静态工作点的稳定"><a href="#2-4-静态工作点的稳定" class="headerlink" title="2.4 静态工作点的稳定"></a>2.4 静态工作点的稳定</h2><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.4 三极管共发射极放大电路1.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.4 三极管共发射极放大电路2-计算.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.4 三极管共发射极放大电路3-静态工作点的稳定.jpg" width="800px"><hr><h2 id="2-5-放大电路的性能指标"><a href="#2-5-放大电路的性能指标" class="headerlink" title="2.5 放大电路的性能指标"></a>2.5 放大电路的性能指标</h2><ul><li>性能指标<ul><li>增益（放大倍数）：输出与输入之比<ol><li>电压增益 ${\large A_u = \frac{\dot{U_o}}{\dot{U_i}}}$</li><li>电流增益 ${\large A_i = \frac{\dot{I_o}}{\dot{I_i}}}$</li><li>互阻增益 ${\large A_r = \frac{\dot{U_o}}{\dot{I_i}}}$</li><li>互导增益 ${\large A_g = \frac{\dot{I_o}}{\dot{U_i}}}$</li></ol></li><li>输入阻抗：${\large Z_i = \frac{\dot{U_i}}{\dot{I_i}}}$</li><li>输出阻抗：${\large Z_o = \frac{\dot{U_o}}{\dot{I_o}}|_{R_L = \infin <del>,</del> \dot{U}_S = 0}}$</li></ul></li></ul><p>**放大倍数、$R_i$、$R_o$**、通频带、非线性失真、最大不失真输出电压、最大输出功率与频率</p><hr><h2 id="2-6-晶体管的H参数等效模型"><a href="#2-6-晶体管的H参数等效模型" class="headerlink" title="2.6 晶体管的H参数等效模型"></a>2.6 晶体管的H参数等效模型</h2><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.6 晶体管的H参数等效模型1-微变等效模型.jpg" width="800px"><ul><li>三极管的三种组态的微变等效模型</li></ul><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.6 晶体管的H参数等效模型2-三种组态的微变等效模型.jpg" width="800px"><hr><h2 id="2-7-共发射极放大电路的动态分析"><a href="#2-7-共发射极放大电路的动态分析" class="headerlink" title="2.7 共发射极放大电路的动态分析"></a>2.7 共发射极放大电路的动态分析</h2><!-- - 增益  - 无 $R_E$：$A_u = - \frac{R_L'\beta I_b}{r_{be}I_b} = - \frac{R_L'\beta}{r_{be}}$ 增加放大增益  - 有 $R_E$：$A_u = - \frac{R_L'\beta I_b}{r_{be}I_b + I_eR_E} = - \frac{R_L'\beta}{r_{be} + (1 + \beta)R_E}$ 稳定放大增益 --><details><summary><b>一个具体的例子</b>：增益、输入阻抗、输出阻抗</summary><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.7 共发射极放大电路的动态分析1.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.7 共发射极放大电路的动态分析2.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.7 共发射极放大电路的动态分析3.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.7 共发射极放大电路的动态分析4.jpg" width="800px"></details><hr><h2 id="2-8-增益稳定的共发射极放大电路动态电路分析"><a href="#2-8-增益稳定的共发射极放大电路动态电路分析" class="headerlink" title="2.8 增益稳定的共发射极放大电路动态电路分析"></a>2.8 增益稳定的共发射极放大电路动态电路分析</h2><p><strong>(发射极)旁路电容</strong>能提高放大增益：当无这电容时候，共发射放大电路由于发射极有电阻，这个电阻现成<strong>负反馈</strong>，使得放大电路的<strong>增益降低</strong>；当并联了旁路电容后，交流等效短路这个电阻，那么极大的<strong>减少负反馈量</strong>，这样可以<strong>提高</strong>本级的放大量，即增益。</p><details><summary><b>一个具体的例子</b>：增益、输入阻抗、输出阻抗</summary><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.8 增益稳定的共发射极放大电路动态电路分析1.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.8 增益稳定的共发射极放大电路动态电路分析2.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.8 增益稳定的共发射极放大电路动态电路分析3.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.8 增益稳定的共发射极放大电路动态电路分析4.jpg" width="800px"></details><hr><h2 id="2-9-共集电极放大电路"><a href="#2-9-共集电极放大电路" class="headerlink" title="2.9 共集电极放大电路"></a>2.9 共集电极放大电路</h2><details><summary><b>一个具体的例子</b>：增益、输入阻抗、输出阻抗</summary><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.9 共集电极放大电路1.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.9 共集电极放大电路2.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.9 共集电极放大电路3.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.9 共集电极放大电路4.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.9 共集电极放大电路5.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.9 共集电极放大电路6.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.9 共集电极放大电路7.jpg" width="800px"></details><hr><h2 id="2-10-共基极放大电路"><a href="#2-10-共基极放大电路" class="headerlink" title="2.10 共基极放大电路"></a>2.10 共基极放大电路</h2><details><summary><b>一个具体的例子</b>：增益、输入阻抗、输出阻抗</summary><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.10 共基极放大电路1.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.10 共基极放大电路2.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.10 共基极放大电路3.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.10 共基极放大电路4.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.10 共基极放大电路5.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.10 共基极放大电路6.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.10 共基极放大电路7.jpg" width="800px"></details><hr><h2 id="2-11-晶体管基本放大电路三种接法的比较"><a href="#2-11-晶体管基本放大电路三种接法的比较" class="headerlink" title="2.11 晶体管基本放大电路三种接法的比较"></a>2.11 晶体管基本放大电路三种接法的比较</h2><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.11 晶体管基本放大电路三种接法的比较.jpg" width="800px"><ul><li><font color="red">三种基本放大单元电路性能</font></li></ul><table><thead><tr><th align="center"></th><th align="center">电压增益 $A_u$</th><th align="center">电流增益 $A_i$</th><th align="center">输入电阻 $R_i$</th><th align="center">输出电阻 $R_o$</th></tr></thead><tbody><tr><td align="center">共发射极 CE</td><td align="center">$- \frac{\beta R_L}{r_{be}}$</td><td align="center">$\beta$</td><td align="center">$r_{be}$</td><td align="center">$\infin$</td></tr><tr><td align="center">共基极 CB</td><td align="center">$\frac{\beta R_L}{r_{be}}$</td><td align="center">$-1$</td><td align="center">$\frac{r_{be}}{1 + \beta}$</td><td align="center">$\infin$</td></tr><tr><td align="center">共集电极 CC</td><td align="center">$- \frac{(1 + \beta) R_L}{r_{be} + (1 + \beta) R_L}$</td><td align="center">$- (1 + \beta)$</td><td align="center">$r_{be} + (1 + \beta)R_L$</td><td align="center">$\frac{r_{be} + R_S}{1 + \beta}$</td></tr></tbody></table><p><strong>接口电路</strong>：共集电极放大电路</p><hr><h2 id="派生电路"><a href="#派生电路" class="headerlink" title="派生电路"></a>派生电路</h2><ul><li>复合管</li></ul><p>小功率管子($\beta$ 大)在前级，大功率管子($\beta$ 小)的后级。</p><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/复合管方向.png"><ul><li><p>共射-共集放大电路</p></li><li><p>共集-共集放大电路</p></li></ul><h2 id="晶体管恒流源"><a href="#晶体管恒流源" class="headerlink" title="晶体管恒流源"></a>晶体管恒流源</h2><ul><li><p><strong>1. 镜像恒流源</strong></p></li><li><p><strong>2. 非对称恒流源</strong></p></li></ul><hr><h2 id="2-12-共源极放大电路"><a href="#2-12-共源极放大电路" class="headerlink" title="2.12 共源极放大电路"></a>2.12 共源极放大电路</h2><details><summary><b>一个具体的例子</b>：增益、输入阻抗、输出阻抗</summary><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.12 共源极放大电路1.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.12 共源极放大电路2.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.12 共源极放大电路3.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.12 共源极放大电路4.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.12 共源极放大电路5.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.12 共源极放大电路6.jpg" width="800px"></details><hr><h2 id="2-13-多级放大电路"><a href="#2-13-多级放大电路" class="headerlink" title="2.13 多级放大电路"></a>2.13 多级放大电路</h2><ul><li><p>电路中各级基本放大电路的连接方式</p><ul><li>多级放大电路常采用两种耦合方式：<ul><li>间接耦合（隔直流）<ul><li>阻容耦合——通过电容连接</li><li>变压器耦合——通过变压器连接</li></ul></li><li>直接耦合——不通过任何器件连接</li></ul></li></ul></li><li><p>各个的优缺点</p><ul><li>阻容耦合<ul><li>优点：各级静态工作点相互独立，互不影响</li><li>缺点：①低频特性差，不利于传递缓慢变化的信号②电容体积大，不易集成</li></ul></li><li>变压器耦合<ul><li>优点：①各级静态工作点<strong>相互独立</strong>，互不影响②在传递交流信号的同时实现<strong>阻抗变换</strong></li><li>缺点：①低频特性差，不利于传递缓慢变化的信号②变压器笨重，无法集成</li></ul></li><li>直接耦合<ul><li>优点：①利用集成②低频特性好</li><li>缺点：①前后静态工作点相互影响②零点漂移</li></ul></li></ul></li><li><p>零点漂移（可以参考：<a href="http://www.jdzj.com/diangong/article/2018-2-3/96884-1.htm">直接耦合多级放大电路的零点漂移</a>）</p><ul><li>当输入信号电压为零时，输出电压发生缓慢无规则变化的现象</li><li>产生的原因：<strong>①温度变化（主要）</strong>②直流电源波动③元件老化……</li><li>解决方法：<strong>差分放大电路</strong></li></ul></li></ul><hr><h2 id="2-14-多级放大电路性能指标分析"><a href="#2-14-多级放大电路性能指标分析" class="headerlink" title="2.14 多级放大电路性能指标分析"></a>2.14 多级放大电路性能指标分析</h2><p>总电压增益等于各级电压增益之积</p><p>多级放大电路的<strong>输入阻抗</strong> = 第一级（输入级）的输入阻抗<font color="grey">（但是这不意味着与后级无关）</font></p><p>前级的<strong>负载阻抗</strong>可以看作后级的<strong>输入阻抗</strong>。</p><p>前级的<strong>输出阻抗</strong>可以看作后级的<strong>信号源内阻抗</strong>。</p><p>多级放大电路的<strong>输出阻抗</strong> = 最后一级（输出级）的输出阻抗<font color="grey">（但是这不意味着与前级无关）</font></p><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.14 多级放大电路性能指标分析：多级放大电路的输入输出阻抗.jpg" width="800px"><hr><h2 id="2-15-对称结构单元放大电路之差分放大电路工作原理"><a href="#2-15-对称结构单元放大电路之差分放大电路工作原理" class="headerlink" title="2.15 对称结构单元放大电路之差分放大电路工作原理"></a>2.15 对称结构单元放大电路之差分放大电路工作原理</h2><ul><li>温度漂移解决方案<ul><li>直流负反馈</li><li>温度补偿</li><li>寻找电路对称结构——差分放大电路</li></ul></li></ul><p>差分放大电路：静态工作点 + 小信号的放大电路</p><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.15 对称结构单元放大电路之差分放大电路工作原理1.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.15 对称结构单元放大电路之差分放大电路工作原理2.jpg" width="800px"><p>$R_L$ 两端电压相等，可视为开路。</p><hr><h2 id="2-16-对称结构单元放大电路之差分放大电路的信号选择性"><a href="#2-16-对称结构单元放大电路之差分放大电路的信号选择性" class="headerlink" title="2.16 对称结构单元放大电路之差分放大电路的信号选择性"></a>2.16 对称结构单元放大电路之差分放大电路的信号选择性</h2><p>差分放大电路对信号有<strong>选择性</strong></p><p>${\large i_o = \frac{R_C}{2R_C + R_L}(i_{c2} - i_{c1})}\<br>{\large u_o = \frac{R_LR_C}{2R_C + R_L}(i_{c2} - i_{c1})}$</p><p>$输入信号 = 共模信号 \pm 差模信号$</p><p>差分放大电路<strong>抑制共模信号，放大差模信号</strong></p><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.16 对称结构单元放大电路之差分放大电路的信号选择性1.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.16 对称结构单元放大电路之差分放大电路的信号选择性2.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.16 对称结构单元放大电路之差分放大电路的信号选择性3.jpg" width="800px"><hr><h2 id="2-17-对称结构单元放大电路之差分放大电路指标分析"><a href="#2-17-对称结构单元放大电路之差分放大电路指标分析" class="headerlink" title="2.17 对称结构单元放大电路之差分放大电路指标分析"></a>2.17 对称结构单元放大电路之差分放大电路指标分析</h2><details><summary><b>一个具体的例子</b>：增益、输入阻抗、输出阻抗</summary><ul><li><p>电路分析</p><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.17 对称结构单元放大电路之差分放大电路指标分析1.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.17 对称结构单元放大电路之差分放大电路指标分析2.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.17 对称结构单元放大电路之差分放大电路指标分析3.jpg" width="800px"></li><li><p>双端输出<br>共模信号</p><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.17 对称结构单元放大电路之差分放大电路指标分析4.jpg" width="800px">差模信号<img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.17 对称结构单元放大电路之差分放大电路指标分析5.jpg" width="800px">差模信号的电压增益、输入电阻和输出电阻<img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.17 对称结构单元放大电路之差分放大电路指标分析6.jpg" width="800px"></li><li><p>单端输出<br>共模信号</p><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.17 对称结构单元放大电路之差分放大电路指标分析7.jpg" width="800px">差模信号的电压增益、输入电阻和输出电阻<img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.17 对称结构单元放大电路之差分放大电路指标分析8.jpg" width="800px"></li><li><p>共模信号和差模信号的微变等效电路及电压增益</p><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.17 对称结构单元放大电路之差分放大电路指标分析9.jpg" width="800px"></li></ul></details><p>差分放大器可以抑制共模信号的原因：</p><pre><code>1. 电路结构对称2. 共模抑制电阻 $R_{EE}$</code></pre><p>共模抑制比：${\large K_{CMR} = |\frac{A_{ud}}{A_{uc}}|}$，<strong>共模抑制比越大性能越好</strong>。</p><hr><h2 id="2-18-对称结构单元放大电路之功率放大电路工作原理"><a href="#2-18-对称结构单元放大电路之功率放大电路工作原理" class="headerlink" title="2.18 对称结构单元放大电路之功率放大电路工作原理"></a>2.18 对称结构单元放大电路之功率放大电路工作原理</h2><p>功放：通常作为多级放大电路的<strong>输出级</strong>，主要功能：为了推动负载工作，如：使扬声器发声，继电器动作，仪表指针偏转等</p><ul><li><p>功放<strong>设计需求</strong></p><ul><li>（1）在不失真前提下尽可能的输出较大功率</li><li>（2）具有较高的效率（前面学习的<strong>小信号放大电路效率较低</strong>）</li></ul></li><li><p>小信号放大电路效率较低的原因<br>在放大静态工作状态时会<strong>消耗功率</strong>，导致效率较低（<strong>甲类工作状态</strong>）；在截止静态工作状态时，虽然不会消耗功率而且输入交流信号的动态范围提升，但是产生了<strong>严重的失真</strong>，晶体管只在半个周期内处于导通状态（<strong>乙类工作状态</strong>）。</p></li></ul><p>传统功放常采用变压器耦合方式（无法集成，影响低频性能）</p><p><strong>OTL</strong>(Output Transformerless，无输出变压器)<strong>互补对称功放</strong></p><ul><li>晶体管的两类工作状态</li></ul><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.18 对称结构单元放大电路之功率放大电路工作原理1.jpg" width="800px"><ul><li>静态工作点电压</li></ul><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.18 对称结构单元放大电路之功率放大电路工作原理2.jpg" width="800px"><ul><li>两晶体管在一个周期内轮流交替导通，每个晶体管在半个周期内工作，处于<strong>乙类工作状态</strong>，均为共集电极放大电路</li></ul><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.18 对称结构单元放大电路之功率放大电路工作原理3.jpg" width="800px"><hr><h2 id="2-19-对称结构单元放大电路之OCL功率放大电路"><a href="#2-19-对称结构单元放大电路之OCL功率放大电路" class="headerlink" title="2.19 对称结构单元放大电路之OCL功率放大电路"></a>2.19 对称结构单元放大电路之OCL功率放大电路</h2><p><strong>OTL</strong> 电路虽然省去了输出变压器，但是输出还存在大容量电容，该电容无法<strong>集成</strong>，并且还影响低频性能。</p><p><font color="red">电容 $C_2$ 在电路中的作用：①保证三极管 $T_2$ 导通 ②为信号放大提供能量</font></p><p>无法直接去掉电容，解决办法：添加一个负电源代替该电容的功能——电路采用正负双电源供电，得到——<strong>OCL</strong>(Ouput Capacitorless，无输出电容)<strong>乙类互补对称功放</strong></p><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.19 对称结构单元放大电路之OCL功率放大电路.jpg" width="800px"><hr><h2 id="2-20-对称结构单元放大电路之功率放大电路的交越失真"><a href="#2-20-对称结构单元放大电路之功率放大电路的交越失真" class="headerlink" title="2.20 对称结构单元放大电路之功率放大电路的交越失真"></a>2.20 对称结构单元放大电路之功率放大电路的交越失真</h2><p>三极管加上一个正向电压，该电压一定要大于<strong>开启电压</strong>，三极管才开始导通。当信号在零附近时，两个三极管都处于截止状态，这样，信号在过零点附近就会产生失真——交越失真。</p><ul><li><strong>交越失真</strong></li></ul><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.20 对称结构单元放大电路之功率放大电路的交越失真1.jpg" width="800px"><ul><li>对OCL乙类互补对称功放做出<strong>改进</strong></li></ul><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.20 对称结构单元放大电路之功率放大电路的交越失真2.jpg" width="800px"><p><strong>OCL甲乙类互补对称功率放大电路</strong>（工作状态介于甲类和乙类之间，更接近于乙类）</p><hr><h2 id="2-21-对称结构单元放大电路之功率放大电路指标分析"><a href="#2-21-对称结构单元放大电路之功率放大电路指标分析" class="headerlink" title="2.21 对称结构单元放大电路之功率放大电路指标分析"></a>2.21 对称结构单元放大电路之功率放大电路指标分析</h2><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.21 对称结构单元放大电路之功率放大电路指标分析1.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.21 对称结构单元放大电路之功率放大电路指标分析2.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.21 对称结构单元放大电路之功率放大电路指标分析3.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.21 对称结构单元放大电路之功率放大电路指标分析4.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.21 对称结构单元放大电路之功率放大电路指标分析5.jpg" width="800px"><hr><h2 id="2-22-对称结构单元放大电路之OTL功率放大电路指标分析"><a href="#2-22-对称结构单元放大电路之OTL功率放大电路指标分析" class="headerlink" title="2.22 对称结构单元放大电路之OTL功率放大电路指标分析"></a>2.22 对称结构单元放大电路之OTL功率放大电路指标分析</h2><p>OTL电路中的电容作用——做电源</p><p>因为OTL电路中 $V_B = \frac{Vcc}{2}$，所以可以看作是 OCL点路中的 $Vcc$ 换成 $\frac{Vcc}{2}$，效果一样。</p><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2.22 对称结构单元放大电路之OTL功率放大电路指标分析1.jpg" width="800px"><img src="/2022/06/29/di-2-zhang-fang-da-dan-yuan-yu-ji-ben-zu-cheng-dian-lu/2. 放大单元与基本组成电路/2.22 对称结构单元放大电路之OTL功率放大电路指标分析2.jpg" width="800px"><hr><hr><p>射极输出器（射极跟随器）是三极管<strong>共集电极</strong>组成的放大器。因为输出在射极电阻 RE 两端,故名射极输出器。</p><p>共栅极放大电路称为电流接续器；<br>共漏极放大电路称为电压跟随器</p><p>源电压增益：${\large A_{vs} = \frac{v_o}{v_s} = \frac{v_i}{v_s} \cdot \frac{v_o}{v_i} = \frac{R_i}{R_i + R_s}A_v}$</p><p>旁路电容：提高增益</p><p>长尾电阻 -&gt; 理想电流源：提高共模抑制比（使得单端输出具有双端输出的共模抑制比）</p><p>模电：第一级输入R大，中间级放大倍数大，最后一级输出R小</p><p>差分放大器双端输出抑制效果最好</p><p>如何理解对称：直流时，包含B、E的回路对称</p><p>长尾电阻：REE –》电流源 IEE：提高共模抑制比</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 模电笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章-半导体基础元件于非线性电路</title>
      <link href="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/"/>
      <url>/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-半导体基础元件于非线性电路"><a href="#第1章-半导体基础元件于非线性电路" class="headerlink" title="第1章-半导体基础元件于非线性电路"></a>第1章-半导体基础元件于非线性电路</h1><p>[toc]</p><p>$大_{大} V_D：直流量，常数（手册有）$</p><p>$小_{小} i_d：交流量$</p><p>$大_{小} V_{im}：交流有效值 幅值$</p><p>$小_{大}：交流直流之和的瞬时总量，（既有直流又有交流）$</p><h2 id="1-1-本征半导体"><a href="#1-1-本征半导体" class="headerlink" title="1.1 本征半导体"></a>1.1 本征半导体</h2><p>半导体：导电能力介于导体和绝缘体之间的一种物质。（常见半导体材料：硅晶体、锗晶体、砷化镓化合物等）</p><p>一个硅原子会与四个相邻的硅原子形成共价键结构。</p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/硅原子.png"><p>本征半导体：纯净的、不含杂质(纯度$99.9999999%$)的半导体</p><p>共价键的束缚力很强，当热力学温度为零度，而且没有其他外界能量激发的时候，价电子全部会束缚在共价键中，晶格中没有自由移动的载流子，所以此时的半导体不导电，相当于绝缘体。</p><p><strong>本征激发</strong>：当温度升高/光照加强时，会产生自由电子空穴对这种现象。</p><p>自由电子（热激发产生）和空穴（价电子挣脱束缚后留下的空位）是成对出现的，称为自由电子空穴对。</p><p>自由电子带负电荷，可自由移动；空穴带与电子等量的正电荷，也可移动。</p><p>空穴的移动反映了价电子的移动，价电子移动方向与空穴移动反向相反。即，空穴能自由移动而参与导电。这样，可以用空穴移动产生的电流代表价电子移动产生的电流。<strong>可以把空穴看成一种可移动的带电粒子。</strong></p><p>载流子：参与导电的粒子。半导体中有两种载流子：自由电子和空穴。</p><p>复合：自由电子和空穴相遇而同时消失。外部条件不变时，载流子的产生和复合处于动态平衡之中。</p><hr><h2 id="1-2-杂质半导体"><a href="#1-2-杂质半导体" class="headerlink" title="1.2 杂质半导体"></a>1.2 杂质半导体</h2><p>半导体中的热敏性、光敏性、参杂性</p><p>热敏性：温度升高，导电能力显著提高<br>光敏性：光照加强，导电能力显著变化<br>参杂性：本征半导体加入杂质，导电能力显著提高</p><p>本征半导体 –加杂质元素–&gt; 杂质半导体</p><p>掺入少量杂质元素产生的空穴/自由电子数目远大于本征激发产生的载流子数目</p><p>添加的杂质主要是三价/五价元素：硼 B、磷 P 等</p><ul><li>P型半导体（+3价杂质，如 B）</li></ul><p>三价杂质接收电子 -&gt; 受主杂质</p><p>杂质元素 –常温电离–&gt; $\begin{cases}空穴（可以自由移动，参与导电）\\ 负离子（不能自由移动，不参与导电）\end{cases}$</p><p>P型半导体（空穴半导体）$\begin{cases}多子——空穴（产生：杂质电离(主要) + 本征激发）\\ 少子——自由电子（产生：本征激发）\end{cases}$</p><p>P半导体简化模型表示：</p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/P型半导体简化模型.png"><ul><li>N型半导体（+5价杂质，如 P）</li></ul><p>五价杂质接收电子 -&gt; 施主杂质</p><p>杂质元素 –常温电离–&gt; $\begin{cases}自由电子（可以自由移动，参与导电）\\ 正离子（不能自由移动，不参与导电）\end{cases}$</p><p>N型半导体（电子半导体）$\begin{cases}多子——自由电子（产生：杂质电离(主要) + 本征激发）\\ 少子——空穴（产生：本征激发）\end{cases}$</p><p>N半导体简化模型表示：</p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/N型半导体简化模型.png"><p>杂质半导体呈电中性$\begin{cases}多子浓度主要取决于参杂浓度\\ 少子浓度取决于本征激发\end{cases}$</p><hr><h2 id="1-3-PN结及其单向导电性"><a href="#1-3-PN结及其单向导电性" class="headerlink" title="1.3 PN结及其单向导电性"></a>1.3 PN结及其单向导电性</h2><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/PN结.png"><ul><li>PN结<strong>正偏</strong>特性：<strong>正向导通</strong></li></ul><p>呈小电阻特性，理想情况下相当于开关闭合，处于导通状态。</p><p>外电场与内电场方向相反，内建电场减弱 -&gt; 多子扩散 -&gt; 多子向PN结移动，中和部分离子 -&gt; 阻挡层(耗尽层)变窄 -&gt; 多子扩散形成扩散电流 -&gt; PN结导通</p><p>电压 $V_D$ 略微升高，电流 $i_D$ 显著升高</p><p>导通电压：$V_{D(on)} \approx \begin{cases}0.7V &amp; (Si)\ 0.2V &amp; (Ge)\end{cases}$</p><ul><li>PN结<strong>反偏</strong>特性：<strong>反向截止</strong></li></ul><p>呈大电阻特性，理想情况下相当于开关断开，处于截止状态。</p><p>外电场与内电场方向相同，内建电场增强 -&gt; 少子漂移 -&gt; 多子背离PN结移动，中和部分离子 -&gt; 阻挡层变宽 -&gt; 少子漂移形成扩散电流 -&gt; PN结截止</p><ul><li>PN结单向导电的<strong>伏安特性</strong></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/PN结的伏安特性曲线.png"><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/PN结的伏安特性方程.png"><hr><h2 id="1-4-二极管简介"><a href="#1-4-二极管简介" class="headerlink" title="1.4 二极管简介"></a>1.4 二极管简介</h2><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/二极管的结构示意图和电路符号.png"><p>常见封装形式的二极管：有特殊色环/色带对应的电极是阴极</p><ul><li>二极管的特性</li></ul><p>伏安特性方程：${\large i_D \approx I_S (e^{\frac{\nu_{D} }{V_{T} } } - 1)}$<br>此方程只描述单向导电特性、温度特性和电容特性。</p><p>开启电压/门坎电压(二极管$\approx$0.5V，Si 0.7V，Ge 0.2V)：只有正偏电压超过一定电流值时，电流才明显增加。</p><ul><li>硅二极管的伏安特性曲线：<strong>正向特性、反向特性、反向击穿特性</strong></li></ul><p>二极管的正向压降近似等于导通电压，反向电流近似为反向饱和电流</p><hr><h2 id="1-5-二极管简化模型"><a href="#1-5-二极管简化模型" class="headerlink" title="1.5 二极管简化模型"></a>1.5 二极管简化模型</h2><p>工程上，使用二极管的简化模型代替其指数模型——使用分段线性</p><ul><li><p>二极管的几种<strong>简化模型</strong></p><ul><li>直折线模型</li><li>恒压降模型</li><li>理想模型</li><li>小信号模型（前三种都是打信号模型）</li></ul></li><li><p>大信号模型建模思路：使用<font color="orange">分段线性</font>方法，把二极管<font color="orange">非线性关系</font>近似表示为几段<font color="orange">线性关系</font>。</p><ul><li>大电压大电流工作的等效模型</li><li>只反映二极管的<font color="orange">单向导通型</font></li><li>关键判断二极管是导通还是截止</li></ul></li><li><p>小信号模型</p><ul><li>高频工作时，还需考虑二极管的结电容特性</li></ul></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/二极管的大信号模型.png"><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/二极管的小信号模型.png"><p>工程上，使用<strong>简化模型</strong>分析、设计二极管电路，但是最终工程实现和电路优化时，使用<strong>复杂模型</strong>进行精度误差分析。</p><blockquote><p>根据二极管的伏安特性曲线和方程：二极管的动态电阻 $r_d$ 随着加在其两端的电压增大而增大。</p></blockquote><hr><h2 id="1-6-二极管应用电路之整流电路"><a href="#1-6-二极管应用电路之整流电路" class="headerlink" title="1.6 二极管应用电路之整流电路"></a>1.6 二极管应用电路之整流电路</h2><p>若电路中有多个二极管，正偏电压最大的二极管优先导通</p><ul><li>判断二极管导通/截止</li></ul><p>理想二极管：$V_D &gt; 0$ 导通，反之截止<br>实际二极管：$V_D &gt; V_{D(on)}$ 导通，反之截止</p><p>当电路中有多个二极管时，<strong>正偏电压最大</strong>的管子优先导通，其余管子需要<strong>重新分析其工作状态</strong>。</p><ul><li><strong>半波整流电路</strong></li></ul><p>使用二极管的理想模型分析电路</p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/半波整流电路.png"><ul><li><strong>桥式整流电路</strong></li></ul><p>使用二极管的理想模型分析电路</p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/桥式整流电路0.png"><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/桥式整流电路.png"><hr><h2 id="1-7-二极管应用之限幅电路及开关电路"><a href="#1-7-二极管应用之限幅电路及开关电路" class="headerlink" title="1.7 二极管应用之限幅电路及开关电路"></a>1.7 二极管应用之限幅电路及开关电路</h2><ul><li><strong>限幅电路</strong></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/二极管限幅电路理想模型.png"><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/二极管限幅电路.png"><ul><li><strong>开关电路</strong></li></ul><p>设：二极管的导通电压为$V_{D(on)}=0.7V$</p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/二极管开关电路.png"><hr><h2 id="1-8-二极管的小信号应用"><a href="#1-8-二极管的小信号应用" class="headerlink" title="1.8 二极管的小信号应用"></a>1.8 二极管的小信号应用</h2><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/二极管的小信号应用.png"><ul><li><strong>等效电路法</strong></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/二极管的小信号应用——等效电阻法0.png"><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/二极管的小信号应用——等效电阻法1.png"><ul><li><strong>图解分析法</strong></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/二极管的小信号应用——图解分析法.png"><hr><h2 id="1-9-稳压二极管"><a href="#1-9-稳压二极管" class="headerlink" title="1.9 稳压二极管"></a>1.9 稳压二极管</h2><p>稳压二极管由特殊工艺制作的二极管，可以在反向击穿状态下工作。（稳压管正常工作都处于反向击穿状态）</p><p><strong>击穿电压</strong> $V_{BR}$：反向击穿所需要的电压称为击穿电压（击穿原因：破坏原子中共价键的束缚，使自由电子空穴对数目急剧增加造成）</p><p>${击穿} = \begin{cases}热击穿_{（不可逆，必须避免）}：PN 结烧毁{i_D \cdot v_D &gt; P_M}\\  电击穿_{（可逆，可以利用）}：PN 结未破坏_{（断点/降压恢复）}{i_D \cdot v_D &lt; P_M}\end{cases}$，$P_M$ 为 $PN$ 结耗散功率</p><p>若反向电流小于 $I_{Zmin}$，稳压管就会回到<strong>截止状态</strong>，即无法稳压；<br>若反向电流大于 $I_{Zmax}$，稳压管可能被<strong>热击穿</strong>。</p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/稳压管的主要参数.jpg"><p>稳压管正常工作时，处于反向击穿状态，所以，电路中电压电流的参考方向与普通二极管相反，即反向击穿电压和反向电流都标注为正值。</p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/稳压电路.jpg"><hr><h2 id="1-10-双极结型三极管结构"><a href="#1-10-双极结型三极管结构" class="headerlink" title="1.10 双极结型三极管结构"></a>1.10 双极结型三极管结构</h2><p>$BJT$</p><p>箭头标注在发射极上，表示发射结正偏时<font color="red" size="5">电流的实际方向，由 $P \to N$</font></p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/三极管种类.jpg"><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/三极管结构及电路符号.jpg"><p><font color="red">基区薄</font>，减少基区复合概率，保证发射区载流子能扩散到集电结边界。</p><hr><h2 id="1-11-双极结型三极管导电原理"><a href="#1-11-双极结型三极管导电原理" class="headerlink" title="1.11 双极结型三极管导电原理"></a>1.11 双极结型三极管导电原理</h2><ul><li><p>三极管工作状态 &amp; 外部条件：</p><ul><li>放大模式：发射结<font color="red">正</font>偏，集电结<font color="red">反</font>偏</li><li>饱和模式：发射结正偏，集电结正偏</li><li>截止模式：发射结反偏，集电结反偏<br></li></ul></li><li><p>放大模式（放大电流）</p><br>- ${\large \alpha = \frac{收集电流}{发射电流} = \frac{i_{Cn} }{i_{En} } }$  <br>- ${\large \beta = \frac{收集电流}{复合电流} = \frac{i_{Cn} }{i_{En} - i_{Cn} } = \frac{i_{Cn} }{i_{Bn} } }$  <br>- ${I_C \approx \beta I_B} \approx \alpha I_E ,~ I_E \approx (1 + \beta)I_B$  <br></li><li><p>三极管的正向受控作用</p></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/三极管的正向受控作用.jpg"><p>NPN，发射极电压最低</p><p>PNP，发射极电压最高</p><ul><li>举个例子：( From <a href="https://blog.csdn.net/qq_40924641/article/details/110233536">三极管类型及工作状态判断</a> )</li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/CSDN-三极管类型及工作状态判断.png"><ul><li>$(a) ~ \because V_{BE} = 0.7V, V_C = 5V ,~ \therefore V_E = 0V, V_B = 0.7V ,~ NPN硅管$</li><li>$(b) ~ \because V_{BE} = 0.3V, V_C = -10V ,~ \therefore V_E = -5V, V_B = -5.3V ,~ PNP锗管$</li></ul><hr><h2 id="1-12-三极管伏安特性曲线"><a href="#1-12-三极管伏安特性曲线" class="headerlink" title="1.12 三极管伏安特性曲线"></a>1.12 三极管伏安特性曲线</h2><p><font color="red" size="6" face="楷体">集电极不能做输入；基极不能做输出。</font></p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/三极管电路的三种组态.png"><ul><li><font size="4">共发射极</font></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/共发射极.jpg"><p>输入特性：<font size="5">$i_B = f(v_{BE})|_{v_{CE} = _{常数} }$</font></p><p>输出特性：<font size="5">$i_C = f(v_{CE})|_{i_B = _{常数} }$</font></p><ul><li><font size="4">三极管的输入特性曲线</font></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/三极管的输入特性曲线.jpg"><p>$V_{CE} &lt; 1V$ 说明工作在饱和区</p><p>$V_{CE} \ge 1V$ 说明工作在放大区，$V_{BE}$ 为<strong>发射结导通电压</strong></p><p>基区宽度调制效应：NPN：</p><p>$V_{CE} = V_{CB} + V_{BE}$，$V_{BE}$ 几乎不变，$V_{CE}$ 增大，$V_{CB}$增大，</p><p>CE 结电压变大（从发射极到集电极的引力越大，速率越快），</p><p>BC 结变宽，基区变窄（多子/自由电子很快到集电极，发射极的电子发射能力不行，电子供给不够，导致基极电子少了，电流小）。</p><p>$V_{CE}$ 越大，$V_{BE}$ 也要跟着变大，电流才能一致，或者在 $i_E$ 处增加一个电流源，使其电流恒定。</p><p><font color="red" size="4">放大的本质：自由电子从发射极到集电极。$V_{BE} $不变，发射极发射的电子不变，$i_E$ 不变，$V_{CE}$增大，$i_C$增大，$i_B$自然就减小了，$i_{E} = i_{C} + i_{B}$</font></p><ul><li><font size="4">三极管的输出特性曲线</font></li></ul><p>输出特性曲线：饱和区、放大区、截止区、击穿区</p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/三极管的输出特性曲线.jpg"><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/三极管安全工作区.jpg"><ul><li><font size="4"><strong>三极管模型</strong></font></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/共发射极.png"><ul><li><font size="4">三极管的线性等效：直折线</font></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/三极管输出输出等效直折线.png"><ul><li><font size="4">饱和区直流电路简化模型</font></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/直流电路简化模型-饱和区.png"><p><font size="4">通常，饱和压降 $V_{CE(set)} \approx \begin{cases}0.3V &amp; Si\ 0.1V &amp; Ge\end{cases}$</font></p><ul><li><font size="4">放大区直流电路简化模型</font></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/直流电路简化模型-放大区.png"><p><font size="4">发射结导通电压 $V_{BE(on)} = \begin{cases}0.7V &amp; Si\ 0.2-0.3V &amp; Ge\end{cases}$</font></p><ul><li><font size="4">截止区直流电路简化模型</font></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/直流电路简化模型-截止区.png"><ul><li><font size="4"><strong>例、静态工作点的近似计算（直折线模型）</strong></font></li></ul><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TD    <span class="token keyword">subgraph</span> <span class="token string">"直流分析"</span>        step-s1<span class="token text string">[截止区]</span>        step-s2<span class="token text string">[放大区]</span>        step-s3<span class="token text string">[饱和区]</span>        step-1<span class="token text string">[画直流通路]</span>        step-2<span class="token text string">[看发射结是否导通]</span>        step-3<span class="token text string">[假设在放大区]</span>        step-4<span class="token text string">[否则在饱和区]</span>        step-1 <span class="token arrow operator">--&gt;</span> step-2        step-2 <span class="token arrow operator">--&gt;</span><span class="token label property">|no|</span> step-s1        step-2 <span class="token arrow operator">--&gt;</span><span class="token label property">|yes|</span> step-3        step-3 <span class="token arrow operator">--&gt;</span><span class="token label property">|yes|</span> step-s2        step-3 <span class="token arrow operator">--&gt;</span><span class="token label property">|no|</span> step-4        step-4 <span class="token arrow operator">--&gt;</span> step-s3    <span class="token keyword">end</span></code></pre><ul><li><p>放大区</p><ul><li>$\begin{cases}V_{BE} \approx V_{BE(on)}\ I_C = \beta I_B\end{cases} \Rightarrow I_B、I_C、V_{CE}$</li><li>$NPN：V_{CE} &gt; V_{CES}$，$PNP：V_{EC} &gt; V_{ECS}$</li></ul></li><li><p>饱和区</p><ul><li>$\begin{cases}V_{BE} \approx V_{BE(on)}\ V_{CE} \approx V_{CES}\end{cases}$<br></li></ul></li><li><p><font size="4"><strong>三极管交流放大区小信号模型</strong></font></p></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/三极管放大区小信号模型.png"><p>$<br>{\large r_{be} = r_{bb’} + r_{b’e} }\<br>{\large\quad~ \approx r_{bb’} + \frac{26(mV)}{I_{BQ} } }\<br>{\large\quad~ \approx r_{bb’} + (1 + \beta)\frac{26(mV)}{I_{EQ} } }\<br>{\large\quad~ \approx r_{bb’} + \beta\frac{26(mV)}{I_{CQ} } }\<br>$</p><p><font color="red">注意</font>：小信号电路模型只能用来分析叠加在  $Q$ 点上各<strong>交流</strong>量之间的相互关系，不能分析直流参量。</p><hr><h2 id="1-13-场效应管的结构及电路符号"><a href="#1-13-场效应管的结构及电路符号" class="headerlink" title="1.13 场效应管的结构及电路符号"></a>1.13 场效应管的结构及电路符号</h2><p>PN 结处处<strong>反偏</strong>，场效应管工作</p><p>多子 $S \to D$</p><p>$i_D \approx K(v_{GS} - v_{GS(off)})^2$</p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/场效应管的种类.jpg"><p><font color="red">转移特性曲线</font>：$i_D = I_{DO}(\frac{u_{GS} }{VGS(th)} - 1)^2$</p><ul><li><p>沟道：载流子流通的渠道、路径</p><ul><li>N 沟道：以 N 型区作为路径</li><li>P 沟道：以 P 型区作为路径</li></ul></li><li><p>结型场效应管的结构示意图及电路符号</p></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/结型场效应管的结构示意图及电路符号.jpg"><ul><li>绝缘栅场效应管的结构示意图及电路符号</li></ul><p>绝缘栅场效应管：也称为 金属-氧化物-半导体型场效应管，简称为 MOS管</p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/绝缘栅场效应管的结构示意图及电路符号.jpg"><p>对 N 沟道增强型：</p><p>S 源极和 D 漏极之间要导电，需要通过栅极绝缘层下方称为沟道的区域。</p><p>一般 S 源极和 D 漏极均会和 P 型衬底之间形成 PN 结，导致 S 源极和 D 漏极无法导通。</p><p>要形成导电通道，必须在栅极加一定的电压，让沟道区域由 P 型衬底变成 N 型区</p><ul><li>另外</li></ul><p>几个区：可变电阻区、横流区、夹断区、击穿区<br>也叫做：非饱和区、饱和区、截止区、击穿区</p><p>控制 G 栅极的电压，可以控制 S 源极和 D 漏极的电流，即控制 S 源极和 D 漏极的电阻，所以就得到一个<font color="red">电压控制的可变电阻器</font></p><ul><li>对于增强型：</li></ul><p>$V_{GS(th)}$ 开启电压（th: threshold 阈值）</p><p>预夹断之后进入恒流区，$V_{GS}$ 可以控制 $i_D$</p><ul><li>对于耗尽型：</li></ul><p>$V_{GS(off)}$ 关断电压</p><hr><h2 id="1-14-场效应管的工作原理及特性曲线"><a href="#1-14-场效应管的工作原理及特性曲线" class="headerlink" title="1.14 场效应管的工作原理及特性曲线"></a>1.14 场效应管的工作原理及特性曲线</h2><p><font color="red" size="6" face="楷体">漏极不能做输入；栅极不能做输出。</font></p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/场效应管的工作原理和特性曲线.jpg"><p>简单来说，就是通过控制电压 $v_{GS}$ 和 $v_{DS}$ 控制电流 $v_{D}$，即<strong>受电压控制的电流源</strong>。</p><ul><li><strong>转移特性曲线</strong></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/场效应管的转移特性曲线.jpg"><p>工作在饱和区的<strong>条件</strong>：</p><table><thead><tr><th align="center">场效应管类型</th><th align="center">条件</th></tr></thead><tbody><tr><td align="center">N 沟道结型</td><td align="center">${\large \begin{cases}v_{DS} &gt; v_{GS} - v_{GS(off)}\\ v_{GS(off)} &gt; v_{GS} &gt; 0\end{cases} }$</td></tr><tr><td align="center">N 沟道耗尽型</td><td align="center">${\large \begin{cases}v_{DS} &gt; v_{GS} - v_{GS(off)}\\ v_{GSs} &gt; v_{GS(off)}\end{cases} }$</td></tr><tr><td align="center">N 沟道增强型</td><td align="center">${\large \begin{cases}v_{DS} &gt; v_{GS} - v_{GS(th)}\\ v_{GS} &gt; v_{GS(th)}\end{cases} }$</td></tr></tbody></table><p>转移特性<strong>关系</strong>：</p><p>${\large i_D \approx K(v_{GS} - v_{GS(X)})^2 } ,~ X = th ~ or ~ off$</p><ul><li><strong>输出特性曲线</strong></li></ul><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/场效应管的输出特性曲线.jpg"><p>工作状态及其条件和特点：</p><table><thead><tr><th align="center">工作状态</th><th align="center">条件</th><th align="center">特点</th></tr></thead><tbody><tr><td align="center">非饱和区<br>(可变电阻区)</td><td align="center">${\large v_{GS} &gt; v_{GS(th)},~ v_{DS} &lt; v_{GS} - v_{GS(th)} }$</td><td align="center">$i_d$ 受 $v_{GS}$ 和 $v_{DS}$ 控制</td></tr><tr><td align="center">饱和区<br>(恒流区)</td><td align="center">${\large v_{GS} &gt; v_{GS(th)},~ v_{DS} &gt; v_{GS} - v_{GS(th)} }$</td><td align="center">$i_d$ 受 $v_{GS}$ 控制，与 $v_{DS}$ 几乎无关</td></tr><tr><td align="center">截止区</td><td align="center">${\large v_{GS} &lt; v_{GS(th)} }$</td><td align="center">$i_d = 0$</td></tr><tr><td align="center">击穿区</td><td align="center"></td><td align="center">应尽量<strong>避免</strong>工作在该区域</td></tr></tbody></table><ul><li><strong>三极管 &amp; 场效应管</strong></li></ul><p>三极管的放大区和场效应管的饱和区特点一样：</p><img src="/2022/06/29/di-1-zhang-ban-dao-ti-ji-chu-yuan-jian-yu-fei-xian-xing-dian-lu/img/1. 半导体基础元件于非线性电路/三极管在放大区、场效应管在恒流区.jpg"><hr><p>三极管是<strong>双极性电流</strong>控制型器件，场效应管是<strong>单极性电压</strong>控制型器件。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 模电笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fbprophet</title>
      <link href="/2022/06/29/fbprophet/"/>
      <url>/2022/06/29/fbprophet/</url>
      
        <content type="html"><![CDATA[<h1 id="fbprophet"><a href="#fbprophet" class="headerlink" title="fbprophet"></a>fbprophet</h1><p>[toc]</p><h2 id="1-fbprophet介绍"><a href="#1-fbprophet介绍" class="headerlink" title="1. fbprophet介绍"></a>1. fbprophet介绍</h2><h3 id="1-1-fbprophet简介"><a href="#1-1-fbprophet简介" class="headerlink" title="1.1. fbprophet简介"></a>1.1. fbprophet简介</h3><p>Prophet（先知）是 Facebook 开源的一个时间序列预测工具，所以叫 fbprophet。Prophet 算法不仅可以处理时间序列存在一些<font color="red">异常值</font>的情况，也可以处理部分<font color="red">缺失值</font>的情形，还能够<font color="red">几乎全自动地预测</font>时间序列未来的走势。从论文上的描述来看，这个 prophet 算法是基于<font color="red">时间序列分解</font>（趋势+季节+节假日）和<font color="red">机器学习</font>的拟合来做的，其中在拟合模型的时候使用了 pyStan 这个开源工具，因此能够在较快的时间内得到需要预测的结果。</p><p>Github：<a href="https://github.com/facebook/prophet">https://github.com/facebook/prophet</a><br>官方网址：<a href="https://facebook.github.io/prophet/">https://github.com/facebook/prophet</a><br>论文名字与网址：Forecasting at scale，<a href="https://peerj.com/preprints/3190/">https://github.com/facebook/prophet</a></p><h3 id="1-2-fbprophet原理"><a href="#1-2-fbprophet原理" class="headerlink" title="1.2. fbprophet原理"></a>1.2. fbprophet原理</h3><p><font color="grey">可以先不看原理，看完实例再回来看原理。</font></p><ul><li><strong>传统时间序列预测方法缺陷</strong><ul><li>适用的时序数据过于局限<br>例如：最通用的 ARIMA 模型，其要求时序数据是稳定的，或者通过差分化后是稳定的，且在差分运算时提取的是固定周期的信息。<br>回忆：automated ARIMA 要求输入的参数是差分的最大阶数、自回归分量和移动平均分量。</li><li>缺失值需要填补</li><li>模型缺乏灵活性</li><li>指导作用较弱</li></ul></li></ul><hr><ul><li><strong>prophet整体框架</strong>：<em>Modeling</em>、<em>Forecast Evaluation</em>、<em>Surface Problems</em> 以及 <em>Visually Inspect Forecasts</em><br><img src="/2022/06/29/fbprophet/fbprophet_framework.png" alt="fbprophet_framework"><ul><li><em>Modeling</em>：<font color="orange">建立时间序列模型</font>。分析师根据预测问题的背景选择一个合适的模型。</li><li><em>Forecast Evaluation</em>：<font color="orange">模型评估</font>。根据模型对历史数据进行仿真，在模型的参数不确定的情况下，我们可以进行多种尝试，并根据对应的仿真效果评估哪种模型更适合。</li><li><em>Surface Problems</em>：<font color="orange">呈现问题</font>。如果尝试了多种参数后，模型的整体表现依然不理想，这个时候可以将误差较大的潜在原因呈现给分析师。</li><li><em>Visually Inspect Forecasts</em>：<font color="orange">可视化反馈整个预测结果</font>。当问题反馈给分析师后，分析师考虑是否进一步调整和构建模型。</li></ul></li></ul><hr><ul><li><strong>prophet适用场景</strong>：<br>a. 有至少几个月（最好是一年）的<font color="orange">每小时、每天或每周观察</font>的<strong>历史数据</strong>；<br>b. 有多种人类规模级别的较强的<strong>季节性趋势</strong>：<font color="orange">每周的一些天和每年的一些时间</font>；<br>c. 有事先知道的以<font color="orange">不定期的间隔</font>发生的<strong>重要节假日</strong>（比如国庆节）；<br>d. <font color="orange">缺失的历史数据或较大的异常数据的数量</font>在<strong>合理范围</strong>内；<br>e. 有<strong>历史趋势的变化</strong>（比如因为产品发布）；<br>f. 对于数据中蕴含的<font color="orange">非线性增长的趋势</font>都有一个<strong>自然极限或饱和状态</strong>。</li></ul><hr><ul><li><strong>时间序列分解的三个主要组成部分</strong>：growth 增长趋势、seasonality 季节趋势、holidays 节假日<br>$$y(t) = g(t) + s(t) + h(t) + \epsilon_t$$<ul><li>$g(t)$：用于拟合时间序列中的分段线性增长或逻辑增长等<font color="orange">非周期变化</font>。</li><li>$s(t)$：<font color="orange">周期变化</font>（如：每周/每年的季节性）。</li><li>$h(t)$：非规律性的<font color="orange">节假日效应</font>（用户造成）。</li><li>$\epsilon_t$：噪声项用来反映未在模型中体现的<font color="orange">异常变动</font>，假设服从高斯分布。</li></ul></li></ul><hr><ul><li><p><strong>$g(t)$ 增长趋势(growth)</strong><br>增长趋势是整个模型的核心组件，它表示认为<font color="reorange">整个时间序列是如何增长</font>的，以及<font color="reorange">预期未来时间里是如何增长</font>的。这部分为分析师提供了两种模型：<strong>Non-linear growth</strong>（非线性增长）和 <strong>Linear growth</strong>（线性增长）。</p><br><ul><li><ol><li><strong>Non-linear growth</strong>（非线性增长）</li></ol></li></ul><p>非线性增长的公式采用了逻辑回归的模型：${\large g(t) = \frac{C}{1 + e^{-k(t - b)}}}$</p><p><br>其中，$C$ 是承载量，它限定了所能增长的最大值，$k$ 表示增长率，$b$ 为偏移量。（若 $C=1,k=1,m=0$，则是 sigmoid 函数）</p><p>但是，实际的增长模型没有这么简单，所以 Prophet 的作者把这三个参数都换成了随时间变化的函数，即 $C=C(t), k=k(t), m=m(t)$</p><p>而且，在现实的时间序列中，曲线的走势肯定不会一直保持不变，在某些特定的时候或者有着某种潜在的周期曲线会发生变化（变点）。</p><p><br>所以，对于以上问题的解决方法：</p><p><br>（1）将 $C$ 构建成随时间变化的函数：$C(t) = K$ 或者 $C(t) = Mt + K$。（确定 $C(t)$）</p><p><br>（2）在 Prophet 里面设置变点的位置：1.人工指定 <code>n_changepoints</code>；2.算法自动选择。假设已经设置了 $S$ 个变点，并且变点的位置为时间戳 $s_j \ (1 \le j \le S)$。在这些时间戳上，需要知道其增长率的变化，假设有一个向量 $\delta \in \mathbb{R}^S$，其中 $\delta_j$ 表示在时间戳 $s_j$ 上的增长率的变化量。如果一开始的增长率为 $k$，那么在时间戳 $t$ 上的增长率就是 $k + \sum_{j: \ t &gt; s_j}^{}{\delta_j}$。为了简化公式，定义一个指示函数 $a(t) \in {0, 1}^S$ 为 $a_j(t) = \begin{cases}1,&amp;if \ t \ge s_j\0,&amp;otherwise\end{cases}$。那么在时间戳 $t$ 上的增长率就是 $k + a^T\delta$。（确定 $k=k(t)$）</p><p><br>（3）参数 $m$ 确定线段的边界 ${\large \gamma_j = (s_j - m - \sum_{l &lt; j}^{}{\gamma_l})(1 - \frac{k + \sum_{l &lt; j}^{}{\delta_l}}{k + \sum_{l \le j}^{}{\delta_l}})}$（确定 $m=m(t)$）</p><p><br>所以，分段的逻辑回归增长模型就是：<font color="orangered">${\large g(t) = \frac{C(t)}{1 + e^{-(k + a(t)^t\delta)(t - (m + a(t)^T\gamma))}}}$</font><br>其中，$a(t) = (a_1(t), \dots, a_S(t))^T, \delta = (\delta_1, \dots, \delta_S)^T, \gamma = (\gamma_1, \dots, \gamma_S)^T$<br><br></p><ul><li><ol start="2"><li><strong>Linear growth</strong>（线性增长）</li></ol></li></ul><p>线性增长采用线性模型：<font color="orangered">${\large g(t) = (k + a(t)\delta)t + (m + a(t)^T\gamma)}$</font></p><p>其中，$k$ 表示增长率，$\delta$ 表示增长率的变化量，$m$ 表示偏移参数，$\gamma = (\gamma_1, \dots, \gamma_S)^T, \gamma_j = -s_j\delta_j$ 用于确定线段边界。</p></li></ul><hr><ul><li><strong>$s(t)$ 季节趋势(seasonality)</strong></li></ul><p>季节趋势往往呈周期性变化，那么可以通过傅里叶级数表示。傅里叶级数：$$f(x) = a_0 + \sum_{n=1}^{\infty}{(a_n \ cos(nx) + b_n \ sin(nx))}, T = 2\pi$$</p><p>Prophet 作者使用傅立叶级数来模拟时间序列的周期性。假设 $P$ 表示时间序列的周期，$P = 365.25$ 表示以年为周期，$P = 7$ 表示以周为周期。它的傅立叶级数的形式都是：$$s(t) = \sum_{n = 1}^{N}{\left( a_n \ cos(\frac{2 \pi n t}{P}) + b_n \ cos(\frac{2 \pi n t}{P}) \right)}$$</p><p>就 Prophet 作者经验而言，对于 $P = 365.25$，$N = 10$；对于 $P = 7$，$N = 3$。</p><p>傅立叶级数的参数可以形成列向量：$$\beta = (a_1, b_1, \dots, a_N, b_N)^T$$</p><p>当 $N = 10$ 时，$$X(t) = \left[cos(\frac{2 \pi (1) t}{365.25}), \dots, sin(\frac{2 \pi (10) t}{365.25}) \right]$$</p><p>当 $N = 3$ 时，$$X(t) = \left[cos(\frac{2 \pi (1) t}{7}), \dots, sin(\frac{2 \pi (3) t}{7}) \right]$$</p><p>所以，时间序列的季节项就是：<font color="orangered">${\large s(t) = X(t) \beta, \ \beta \sim N(0, \sigma^2)}$</font></p><p>其中，$\sigma$ = <code>seasonality_prior_scale</code>，$\sigma$ 值越大，表示季节的效应越明显；$\sigma$ 值越小，表示季节的效应越不明显。</p><p><code>seasonality_mode</code> 对应着两种模式： <code>"additive"</code> 加法(默认)和 <code>"multiplicative"</code> 乘法。</p><p>$X(t)$ 函数是通过 <code>fourier_series</code> 来构建。</p><hr><ul><li><strong>$h(t)$ 节假日(holidays and events)</strong></li></ul><p>由于每个节假日对时间序列的影响程度不一样，例如春节，国庆节则是七天的假期，对于劳动节等假期来说则假日较短。因此，不同的节假日可以看成相互独立的模型，并且可以为不同的节假日设置不同的前后窗口值，表示该节假日会影响前后一段时间的时间序列。</p><p>对第 $i$ 个节假日来说，$D_i$ 表示该节假日的前后一段时间，$\kappa_i$ 表示该节假日的影响范围，有 $L$ 个节假日。那么时间序列的节假日可以表示为：<font color="orangered">${\large h(t) = Z(t) \kappa = \sum_\limits{i = 1}^{L}\kappa_i \cdot 1_{ { t \in D_i } } }$</font></p><p>其中，$Z(t) = (1_{ { t \in D_1 } }, \dots, 1_{ { t \in D_L} }), \ \kappa = (\kappa_1, \dots, \kappa_L)^T, \ \kappa \sim N(0, \upsilon^2)$</p><p>$\upsilon$ = <code>holidays_prior_scale</code>，默认值是 10，值越大，节假日对模型的影响越大；值越小，节假日对模型的效果越小。</p><hr><ul><li><strong>$\epsilon_t$ 噪声</strong></li></ul><p>误差项，不需要考虑。。。。。。</p><hr><ul><li><p><strong>fbprophet优点</strong></p><ol><li>大规模、细粒度数据<br>能进行大范围预测，并且给出置信区间；数据时间粒度可以很小，支持小时、天、月数据。</li><li>自动处理缺失值数据<br>遇到有缺失的数据时其它预测方法需要先进行插值填补预处理，而 fbprophet 可以自己处理缺失值数据。</li><li>更灵活，支持季节、节假日调节<br>有些突变点往往是由特别的节假日期引起的，fbprophet 支持输入这些日期以及前后影响的时间窗口，预测的时候自动适这些日期。</li><li>趋势预测 + 趋势分解<br>拟合的有两种趋势：线性趋势、逻辑趋势；趋势分解有很多种：Trend、年、周、天趋势、以及节假日效应。</li><li>模型参数易解释<br>模型参数很好理解，可以让分析师根据业务经验调节参数来增强某部分假设提高准确率，使模型与业务达到理想的融合。</li><li>拟合速度快</li><li>操作简单<br>不仅环境搭建简单，而且只要十几行代码即可完成整个预测过程。</li></ol></li></ul><hr><ul><li><p><strong>调参经验</strong></p><ol><li>首先我们去除数据中的异常点（outlier），直接赋值为 <code>None</code> 就可以，因为 Prophet 的设计中可以通过<font color="red">插值</font>处理缺失值，但是对异常值比较敏感。</li><li>选择趋势模型，默认使用分段线性的趋势，但是如果认为模型的趋势是按照 log 函数方式增长的，可设置 <code>growth='logistic'</code> 从而使用分段 log 的增长方式</li><li>设置趋势转折点 <code>changepoint</code>，如果我们知道时间序列的趋势会在某些位置发现转变，可以进行人工设置，比如某一天有新产品上线会影响我们的走势，我们可以将这个时刻设置为转折点。</li><li>设置周期性，模型默认是带有年和星期以及天的周期性，其他月、小时的周期性需要自己根据数据的特征进行设置，或者设置将年和星期等周期关闭。</li><li>设置节假日特征，如果我们的数据存在节假日的突增或者突降，我们可以设置 <code>holiday</code> 参数来进行调节，可以设置不同的 <code>holiday</code>，例如五一一种，国庆一种，影响大小不一样，时间段也不一样。</li><li>此时可以简单的进行作图观察，然后可以根据经验继续调节上述模型参数，同时根据模型是否过拟合以及对什么成分过拟合，我们可以对应调节 <code>seasonality_prior_scale</code>、<code>holidays_prior_scale</code>、<code>changepoint_prior_scale</code> 参数。</li><li>如果预测结果的误差很大，考虑选取的模型是否准确，尝试调整增长率模型 <code>growth</code> 的参数，在必要的情况下也需要调整季节性 <code>seasonality</code> 参数。</li><li>如果在尝试的大多数方法中，某些日期的预测依然存在很大的误差，这就说明历史数据中存在异常值。最好的办法就是找到这些异常值并剔除掉。使用者无需像其他方法那样对剔除的数据进行插值拟合，可以仅保留异常值对应的时间， 并将异常值修改为空值 <code>None</code>，模型在预测时依然可以给出这个时间点对应的预测结果。</li><li>如果对历史数据进行仿真预测时发现，从一个截点到下一个截点误差急剧的增加，这说明在两个截点期间数据的产生过程发生了较大的变化，此时两个截点之间应该增加一个 <code>changepoint</code> ，来对这期间的不同阶段分别建模。</li></ol><ul><li>a. 如果预测结果的误差很大，考虑选取的模型是否准确，尝试调整<font color="orange">增长率模型</font>（<code>growth</code>）的参数，在必要的情况下也需要调整<font color="orange">季节性</font>（<code>seasonality</code>）参数。</li><li>b. 如果在尝试的大多数方法中，某些日期的预测依然存在很大的误差，这就说明历史数据中存在<font color="orange">异常值</font>。最好的办法就是找到这些异常值并剔除掉。使用者无需像其他方法那样对剔除的数据进行插值拟合，可以仅保留异常值对应的时间， 并将异常值修改为空值（NA），模型在预测时依然可以给出这个时间点对应的预测结果。</li><li>c. 如果对历史数据进行仿真预测时发现，<font color="orange">从一个截点到下一个截点误差急剧增加</font>，这说明在两个截点期间数据的产生过程发生了较大的变化，此时两个截点之间应该增加一个 <code>changepoint</code>，来对这期间的不同阶段分别建模。</li></ul></li></ul><hr><h2 id="fbprophet使用"><a href="#fbprophet使用" class="headerlink" title="fbprophet使用"></a>fbprophet使用</h2><h3 id="入门实例"><a href="#入门实例" class="headerlink" title="入门实例"></a>入门实例</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> fbprophet <span class="token keyword">import</span> Prophetdf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'example_wp_log_peyton_manning.xlsx'</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>playoffs <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'holiday'</span><span class="token punctuation">:</span> <span class="token string">'playoff'</span><span class="token punctuation">,</span>    <span class="token string">'ds'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">'2008-01-13'</span><span class="token punctuation">,</span> <span class="token string">'2009-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2010-01-16'</span><span class="token punctuation">,</span>        <span class="token string">'2010-01-24'</span><span class="token punctuation">,</span> <span class="token string">'2010-02-07'</span><span class="token punctuation">,</span> <span class="token string">'2011-01-08'</span><span class="token punctuation">,</span>        <span class="token string">'2013-01-12'</span><span class="token punctuation">,</span> <span class="token string">'2014-01-12'</span><span class="token punctuation">,</span> <span class="token string">'2014-01-19'</span><span class="token punctuation">,</span>        <span class="token string">'2014-02-02'</span><span class="token punctuation">,</span> <span class="token string">'2015-01-11'</span><span class="token punctuation">,</span> <span class="token string">'2016-01-17'</span><span class="token punctuation">,</span>        <span class="token string">'2016-01-24'</span><span class="token punctuation">,</span> <span class="token string">'2016-02-07'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'lower_window'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'upper_window'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>superbowls <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'holiday'</span><span class="token punctuation">:</span> <span class="token string">'superbowl'</span><span class="token punctuation">,</span>    <span class="token string">'ds'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2010-02-07'</span><span class="token punctuation">,</span> <span class="token string">'2014-02-02'</span><span class="token punctuation">,</span> <span class="token string">'2016-02-07'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'lower_window'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'upper_window'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>holidays <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">(</span>playoffs<span class="token punctuation">,</span> superbowls<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 季后赛和超级碗比赛特别日期</span>m <span class="token operator">=</span> Prophet<span class="token punctuation">(</span>holidays<span class="token operator">=</span>holidays<span class="token punctuation">)</span>  <span class="token comment"># 指定节假日参数，其它参数以默认值进行训练</span>m<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>df<span class="token punctuation">)</span>  <span class="token comment"># 对过去数据进行训练</span>future <span class="token operator">=</span> m<span class="token punctuation">.</span>make_future_dataframe<span class="token punctuation">(</span>freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">365</span><span class="token punctuation">)</span>  <span class="token comment"># 建立数据预测框架，数据粒度为天，预测步长为一年</span>forecast <span class="token operator">=</span> m<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>future<span class="token punctuation">)</span>m<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>forecast<span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 绘制预测效果图</span></code></pre><p><font color="grey">可以看到 Prophet 遵循 sciket-klearn 模型 API。</font></p><p><code>fit()</code> 输入的 <code>DataFrame</code> 必须包含两列数据：<font color="orange">时间戳</font> <code>ds</code> 和<font color="orange">时间序列的取值</font> <code>y</code></p><p>在预测效果图中，黑点表示<font color="black">实际值</font>，<font color="blue">蓝色</font>表示<font color="blue">预测值</font>，<font color="lightblue">浅蓝色</font>表示 <code>yhat_upper</code> 和 <code>yhat_lower</code>，置信区间受到 <code>interval_width</code> 这个参数的影响；当然，从 <code>forecasts</code> 的 <code>keys</code> 中可以看到，还有其他的 <code>_upper</code> 和 <code>_lower</code>，同样也会受到这个参数的影响。</p><img src="/2022/06/29/fbprophet/预测效果图.png"><p><code>predict()</code> 输出的 <code>DataFrame</code> 包含四列数据：<font color="orange">时间戳</font> <code>ds</code>、<font color="orange">时间序列的预测值</font> <code>yhat</code>、<font color="orange">预测值的下界</font> <code>yhat_lower</code>、<font color="orange">预测值的上界</font> <code>yhat_upper</code></p><img src="/2022/06/29/fbprophet/成分趋势图.png"><p>在成分趋势图中，四个图从上至下依次是对增长趋势模型（trend）、节假日模型（holidays）以及季节性模型（weekly 和 yearly）。</p><p>所谓成分分析就是指对原理公式中的三大部分模型单独进行分析，成分分析有助于我们考察模型中的各个组件分别对预测结果的影响，通过可视化的展示，我们可以准确判断影响预测效果的具体原因，从而针对性的解决。成分分析是我们提高模型准确性的重要来源。</p><p>需要注意的是，如果<font color="red">没有</font>在 <code>holidays</code> 参数里注明具体的节假日信息，模块也<font color="red">不会</font>自动对这一部分进行分析。如果对于上面的结果你觉得有不合理的地方，那么可以根据中参数使用说明更改相应的成分影响，这里应该尽可能的利用你的专业背景知识，以使各部分组成的影响更符合实际。举个例子，如果在每年趋势 <code>yearly</code> 中你认为当前的效果过拟合了，那么就可以调解 <code>seasonality_prior_scale</code> 这个参数，值越小，这里的季节性波动就越小。</p><h3 id="Prophet-类"><a href="#Prophet-类" class="headerlink" title="Prophet() 类"></a><code>Prophet()</code> 类</h3><p>作用：进行时间序列预测</p><br><details><summary>源代码：</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Prophet</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Prophet forecaster.    Parameters    ----------    growth: String 'linear' or 'logistic' to specify a linear or logistic        trend.    changepoints: List of dates at which to include potential changepoints. If        not specified, potential changepoints are selected automatically.    n_changepoints: Number of potential changepoints to include. Not used        if input `changepoints` is supplied. If `changepoints` is not supplied,        then n_changepoints potential changepoints are selected uniformly from        the first `changepoint_range` proportion of the history.    changepoint_range: Proportion of history in which trend changepoints will        be estimated. Defaults to 0.8 for the first 80%. Not used if        `changepoints` is specified.    Not used if input `changepoints` is supplied.    yearly_seasonality: Fit yearly seasonality.        Can be 'auto', True, False, or a number of Fourier terms to generate.    weekly_seasonality: Fit weekly seasonality.        Can be 'auto', True, False, or a number of Fourier terms to generate.    daily_seasonality: Fit daily seasonality.        Can be 'auto', True, False, or a number of Fourier terms to generate.    holidays: pd.DataFrame with columns holiday (string) and ds (date type)        and optionally columns lower_window and upper_window which specify a        range of days around the date to be included as holidays.        lower_window=-2 will include 2 days prior to the date as holidays. Also        optionally can have a column prior_scale specifying the prior scale for        that holiday.    seasonality_mode: 'additive' (default) or 'multiplicative'.    seasonality_prior_scale: Parameter modulating the strength of the        seasonality model. Larger values allow the model to fit larger seasonal        fluctuations, smaller values dampen the seasonality. Can be specified        for individual seasonalities using add_seasonality.    holidays_prior_scale: Parameter modulating the strength of the holiday        components model, unless overridden in the holidays input.    changepoint_prior_scale: Parameter modulating the flexibility of the        automatic changepoint selection. Large values will allow many        changepoints, small values will allow few changepoints.    mcmc_samples: Integer, if greater than 0, will do full Bayesian inference        with the specified number of MCMC samples. If 0, will do MAP        estimation.    interval_width: Float, width of the uncertainty intervals provided        for the forecast. If mcmc_samples=0, this will be only the uncertainty        in the trend using the MAP estimate of the extrapolated generative        model. If mcmc.samples&gt;0, this will be integrated over all model        parameters, which will include uncertainty in seasonality.    uncertainty_samples: Number of simulated draws used to estimate        uncertainty intervals.    """</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>            self<span class="token punctuation">,</span>            growth<span class="token operator">=</span><span class="token string">'linear'</span><span class="token punctuation">,</span>            changepoints<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            n_changepoints<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span>            changepoint_range<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>            yearly_seasonality<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span>            weekly_seasonality<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span>            daily_seasonality<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span>            holidays<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            seasonality_mode<span class="token operator">=</span><span class="token string">'additive'</span><span class="token punctuation">,</span>            seasonality_prior_scale<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">,</span>            holidays_prior_scale<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">,</span>            changepoint_prior_scale<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span>            mcmc_samples<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>            interval_width<span class="token operator">=</span><span class="token number">0.80</span><span class="token punctuation">,</span>            uncertainty_samples<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre></details><ul><li><code>Prophet()</code> 参数说明：<ul><li><code>growth</code>: 字符串 <code>"linear"</code> 或 <code>"logistic"</code>，表示<font color="red">线性增长趋势</font>或者<font color="red">逻辑增长趋势</font>。</li><li><code>changepoints</code>: 日期型向量，指定<font color="red">潜在拐点</font>，如果不指定，将会自动选择潜在拐点。例如：<code>changepoints=["2014-01-01"]</code> 指定 <code>'2014-01-01'</code> 这一天是潜在的 <code>changepoints</code>。</li><li><code>n_changepoints</code>: 表示 <code>changepoints</code> 的<font color="red">数量大小</font>，如果 <code>changepoints</code> 指定，该传入参数将不会被使用。如果 <code>changepoints</code> 不指定，将会从输入的历史数据前 $80%$ 中选取 $25$ 个（个数由 <code>n_changepoints</code> 传入参数决定）潜在改变点。</li><li><code>changepoint_range</code>: 估计趋势变化点的<font color="red">历史比例</font>。如果指定了 <code>changepoints</code>，则不使用。</li><li><code>yearly_seasonality</code>: 指定是否<font color="red">分析数据的年季节性</font>，如果为 <code>True</code>，默认取傅里叶项为 $10$，最后会输出<code>yearly_trend, yearly_upper, yearly_lower</code> 等数据。</li><li><code>weekly_seasonality</code>: 指定是否<font color="red">分析数据的周季节性</font>，如果为 <code>True</code>，默认取傅里叶项为 $10$，最后会输出<code>weekly_trend, weekly_upper, weekly_lower</code> 等数据。</li><li><code>daily_seasonality</code>: 指定是否<font color="red">分析数据的天季节性</font>，如果为 <code>True</code>，默认取傅里叶项为 $10$，最后会输出<code>daily_trend, daily_upper, daily_lower</code> 等数据。</li><li><code>holidays</code>: 传入 <code>DataFrame</code> 格式的数据。这个数据包含有 <code>holiday</code> 列 (<code>string</code>) 和 <code>ds</code> (<code>date</code>类型) 和可选列 <code>lower_window</code> 和 <code>upper_window</code> 来指定该日期的 <code>lower_window</code> 或者 <code>upper_window</code> 范围内都被列为假期。<code>lower_window = -2</code> 将包括前 $2$ 天的日期作为假期。（默认<code>None</code>）</li><li><code>seasonality_mode</code>: <font color="red">季节模型</font> <code>"additive"</code>(default) or <code>"multiplicative"</code>。</li><li><code>seasonality_prior_scale</code>: 调节<font color="red">季节性组件的强度</font>。值越大，模型将适应更强的季节性波动，值越小，越抑制季节性波动。</li><li><code>holidays_prior_scale</code>: 调节<font color="red">节假日模型组件的强度</font>。值越大，该节假日对模型的影响越大，值越小，节假日的影响越小。</li><li><code>changepoint_prior_scale</code>: <font color="red">增长趋势模型的灵活度</font>。调节 <code>changepoint</code> 选择的灵活度，值越大选择的 <code>changepoint</code> 越多，使模型对历史数据的拟合程度变强，然而也增加了过拟合的风险。</li><li><code>mcmc_samples</code>: <font color="red">mcmc采样</font>，用于获得预测未来的不确定性。若大于 $0$，将做mcmc样本的全贝叶斯推理，如果为 $0$，将做最大后验估计。</li><li><code>interval_width</code>: 衡量<font color="red">未来时间内趋势改变的程度</font>。表示预测未来时使用的趋势间隔出现的频率和幅度与历史数据的相似度，值越大越相似。当 <code>mcmc_samples = 0</code> 时，该参数仅用于增长趋势模型的改变程度，当 <code>mcmc_samples &gt; 0</code> 时，该参数也包括了季节性趋势改变的程度。</li><li><code>uncertainty_samples</code>: 用于<font color="red">估计不确定性区间的模拟抽取数</font></li></ul></li></ul><h3 id="make-future-dataframe-函数"><a href="#make-future-dataframe-函数" class="headerlink" title="make_future_dataframe() 函数"></a><code>make_future_dataframe()</code> 函数</h3><p>作用：对模型对象和若干时段进行预测，并生成合适的时间数据帧。</p><br><details><summary>源代码：</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_future_dataframe</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> periods<span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">,</span> include_history<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Simulate the trend using the extrapolated generative model.    Parameters    ----------    periods: Int number of periods to forecast forward.    freq: Any valid frequency for pd.date_range, such as 'D' or 'M'.    include_history: Boolean to include the historical dates in the data        frame for predictions.    Returns    -------    pd.Dataframe that extends forward from the end of self.history for the    requested number of periods.    """</span></code></pre></details><ul><li><code>make_future_dataframe()</code> 参数说明：<ul><li><code>periods</code>: <font color="red">向前预测步数</font></li><li><code>freq</code>: <font color="red">预测单位</font>，小时为 <code>'H'</code>，天为 <code>'D'</code>，月为 <code>'M'</code></li><li><code>include_history</code>: <font color="red">是否包含历史数据的预测</font></li></ul></li></ul><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><ul><li>STEP<ol><li>加载历史数据 <code>df = pd.DataFrame()</code></li><li>初始化 <code>m = Prophet()</code></li><li>拟合 <code>m.fit(df)</code></li><li>加载/生成预测数据 <code>future = pd.DataFrame()</code> / <code>future = m.make_future_dataframe()</code></li><li>预测 <code>forecast  = m.predict(future)</code></li><li>绘图 <code>m.plot(forecast )</code> 和 <code>m.plot_components(forecast )</code></li></ol></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># todo 导入库</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> fbprophet <span class="token keyword">import</span> Prophet<span class="token comment"># todo 加载数据</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./example_wp_log_peyton_manning.csv'</span><span class="token punctuation">)</span><span class="token comment"># todo 查看数据</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># todo 修改数据列名</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'timestamp'</span><span class="token punctuation">:</span> <span class="token string">'ds'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'y'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># todo 修改时间数据格式：如果 'timestamp' 是使用 unixtime 来记录的，需要修改成 YYYY-MM-DD hh:mm:ss 的形式</span>df<span class="token punctuation">[</span><span class="token string">'ds'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'ds'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token comment"># todo 时间序列需要进行归一化：</span>df<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">-</span> df<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># todo 初始化</span>m <span class="token operator">=</span> Prophet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># todo 拟合</span>m<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># todo 预测：生成预测时间数据</span>future <span class="token operator">=</span> m<span class="token punctuation">.</span>make_future_dataframe<span class="token punctuation">(</span>periods<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""periods：需要预测的点数：30个freq：时间序列的频率：按月来收集的时间序列（'min'分钟）"""</span><span class="token comment"># todo 展示预测值数据</span>future<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># todo 预测</span>forecast <span class="token operator">=</span> m<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token comment"># todo 绘制预测图</span>m<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>forecast<span class="token punctuation">)</span><span class="token comment"># todo 画出时间序列的分量</span>m<span class="token punctuation">.</span>plot_components<span class="token punctuation">(</span>forecast<span class="token punctuation">)</span></code></pre><p>绘制图：（略）</p><ul><li>STEP<ol start="7"><li>绘制详细指标图（可交互，结合 plotly）</li></ol></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># todo 导入库</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> plotly<span class="token punctuation">.</span>express <span class="token keyword">as</span> px<span class="token comment"># todo 载入数据</span>df <span class="token operator">=</span> forecast<span class="token comment"># todo 查看数据</span>dfdf<span class="token punctuation">.</span>infodf<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># todo 绘制预测值、预测上下限值</span>fig <span class="token operator">=</span> px<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>    data_frame<span class="token operator">=</span>df<span class="token punctuation">,</span>     x<span class="token operator">=</span><span class="token string">"ds"</span><span class="token punctuation">,</span>     y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'yhat'</span><span class="token punctuation">,</span> <span class="token string">"yhat_lower"</span><span class="token punctuation">,</span> <span class="token string">"yhat_upper"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token comment"># todo 展示</span>fig<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>绘制图：</p><img src="/2022/06/29/fbprophet/fbprophet_plotly.png"><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><ul><li>变点</li></ul><pre class="language-python" data-language="python"><code class="language-python">m <span class="token operator">=</span> Prophet<span class="token punctuation">(</span>n_changepoints<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">)</span>m <span class="token operator">=</span> Prophet<span class="token punctuation">(</span>changepoint_range<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>m <span class="token operator">=</span> Prophet<span class="token punctuation">(</span>changepoint_prior_scale<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">)</span>m <span class="token operator">=</span> Prophet<span class="token punctuation">(</span>changepoints<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'2014-01-01'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 变点的作图：</span><span class="token keyword">from</span> fbprophet<span class="token punctuation">.</span>plot <span class="token keyword">import</span> add_changepoints_to_plotfig <span class="token operator">=</span> m<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>forecast<span class="token punctuation">)</span>a <span class="token operator">=</span> add_changepoints_to_plot<span class="token punctuation">(</span>fig<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> forecast<span class="token punctuation">)</span></code></pre><ul><li>周期性</li></ul><pre class="language-python" data-language="python"><code class="language-python">m <span class="token operator">=</span> Prophet<span class="token punctuation">(</span>weekly_seasonality<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>add_seasonality<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'monthly'</span><span class="token punctuation">,</span> period<span class="token operator">=</span><span class="token number">30.5</span><span class="token punctuation">,</span> fourier_order<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>m <span class="token operator">=</span> Prophet<span class="token punctuation">(</span>weekly_seasonality<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>add_seasonality<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'weekly'</span><span class="token punctuation">,</span> period<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> fourier_order<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> prior_scale<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span></code></pre><ul><li>节假日</li></ul><pre class="language-python" data-language="python"><code class="language-python">playoffs <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">'holiday'</span><span class="token punctuation">:</span> <span class="token string">'playoff'</span><span class="token punctuation">,</span>  <span class="token string">'ds'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2008-01-13'</span><span class="token punctuation">,</span> <span class="token string">'2009-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2010-01-16'</span><span class="token punctuation">,</span>                        <span class="token string">'2010-01-24'</span><span class="token punctuation">,</span> <span class="token string">'2010-02-07'</span><span class="token punctuation">,</span> <span class="token string">'2011-01-08'</span><span class="token punctuation">,</span>                        <span class="token string">'2013-01-12'</span><span class="token punctuation">,</span> <span class="token string">'2014-01-12'</span><span class="token punctuation">,</span> <span class="token string">'2014-01-19'</span><span class="token punctuation">,</span>                        <span class="token string">'2014-02-02'</span><span class="token punctuation">,</span> <span class="token string">'2015-01-11'</span><span class="token punctuation">,</span> <span class="token string">'2016-01-17'</span><span class="token punctuation">,</span>                        <span class="token string">'2016-01-24'</span><span class="token punctuation">,</span> <span class="token string">'2016-02-07'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">'lower_window'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token string">'upper_window'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>superbowls <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">'holiday'</span><span class="token punctuation">:</span> <span class="token string">'superbowl'</span><span class="token punctuation">,</span>  <span class="token string">'ds'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2010-02-07'</span><span class="token punctuation">,</span> <span class="token string">'2014-02-02'</span><span class="token punctuation">,</span> <span class="token string">'2016-02-07'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">'lower_window'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token string">'upper_window'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>holidays <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">(</span>playoffs<span class="token punctuation">,</span> superbowls<span class="token punctuation">)</span><span class="token punctuation">)</span>m <span class="token operator">=</span> Prophet<span class="token punctuation">(</span>holidays<span class="token operator">=</span>holidays<span class="token punctuation">,</span> holidays_prior_scale<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">)</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>博客园：<a href="https://www.cnblogs.com/hahahu/p/11753804.html">python 安装fbprophet模块的艰辛历程</a>（安装强推！）<br>CSDN：<a href="https://blog.csdn.net/qq_23860475/article/details/81354467">python-fbprophet总结</a>（参数说明 + 代码）</p><p>这俩差不多：原理 + 使用<br>标点符：<a href="https://www.biaodianfu.com/fbprophet.html">Facebook时间序列预测工具fbprophet</a>（这个内容更多一点）<br>知乎：<a href="https://zhuanlan.zhihu.com/p/52330017">Facebook 时间序列预测算法 Prophet 的研究</a></p><p>这俩差不多：例子多<br>博客园：<a href="https://www.cnblogs.com/bonelee/p/9577432.html">facebook开源的prophet时间序列预测工具</a>（这个内容更多一点）<br>CSDN：<a href="https://blog.csdn.net/sinat_26917383/article/details/57419862">R+python︱Facebook大规模时序预测『真』神器——Prophet（遍地代码图）</a></p><p>博客园：<a href="https://www.cnblogs.com/foley/p/5582358.html">python时间序列分析</a>（非 Prophet 的时序分析）</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间序列预测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICT战队-第9次笔记</title>
      <link href="/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/"/>
      <url>/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="ICT战队-第9次笔记"><a href="#ICT战队-第9次笔记" class="headerlink" title="ICT战队-第9次笔记"></a>ICT战队-第9次笔记</h1><p>[toc]</p><h2 id="BGP"><a href="#BGP" class="headerlink" title="BGP"></a>BGP</h2><h3 id="原理：BGP自治系统间的路由协议"><a href="#原理：BGP自治系统间的路由协议" class="headerlink" title="原理：BGP自治系统间的路由协议"></a><strong>原理：BGP自治系统间的路由协议</strong></h3><p>BGP外部路由协议，是一种增强的距离矢量路由协议。</p><p>可以根据链路状态数据库画出整个网络拓扑图。</p><p>BGP边界网关协议，用于AS与AS之间的路由协议</p><p>BGP：支持CIDR<br>传输协议：<strong>TCP</strong>，端口号：<strong>179</strong><br>无需周期性更新<br>路由更新：只发送增量路由<br>周期性发送keepAlive报文检测TCP连通性</p><p>BGP报文(5种)：</p><ul><li>Open包：负责和对等体peer建立邻居关系。(<strong>建立</strong>)</li><li>KeepAlive：该消息在对等体之间周期性地发送，用以维护连接。(<strong>维护</strong>)</li><li>Update：该消息被用来在BGP对等体之间传递路由信息。(<strong>更新</strong>)</li><li>Notification：当 BGP Speaker检测到错误的时候，就发送该消息给对等体。(<strong>纠错</strong>)</li><li>Route-refresh：用来通知对等体自己支持路由刷新能力。</li></ul><p>BGP路由传递</p><p>EBGP水平分割：经过那个AS，反过来不能再进入该AS<br>IBGP水平分割：通过IBGP学习到的路由条目反过来不能发给IBGP</p><p>AS号<br>公有AS：1 ~ 64511<br>私有AS：64512 ~ 65535</p><p>BGP两种邻居关系：IBGP、EBGP<br>当BGP被用在一个AS内部：IBGP<br>当BGP被用在AS之间：EBGP</p><p>BGP只能使用一个进程号</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：展示BGP只能使用一个进程号</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>bgp <span class="token number">1</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>bgp <span class="token number">2</span>Error: BGP is already running. The AS is <span class="token number">1</span>.</code></pre><p>注：<br>1.BGP宣告路由信息必须和路由表一致<br>2.BGP建立邻居关系建议直接使用物理接口<br>3.BGP建立邻居关系：<code>peer [对方IP] as-number [AS号]</code><br>4.BGP邻居关系建立30s-60s</p><h3 id="实验一-1-：BGP简单配置"><a href="#实验一-1-：BGP简单配置" class="headerlink" title="实验一$_1$：BGP简单配置"></a><strong>实验一$_1$：BGP简单配置</strong></h3><p>目的：AR2和AR1建立邻居关系，且AR1的环回地址在AR2路由表项中</p><ul><li><strong>STEP1：</strong> 网络拓扑</li></ul><p>打开老师的拓扑</p><img src="/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/7a748725d42144b1aaa0027e44e0fec9.png"><blockquote><p>说明：<br>1.两个路由器间的网段分别是：<code>12.1.1.0</code>、<code>23.1.1.0</code>、<code>34.1.1.0</code>、<code>64.1.1.0</code><br>2.每个路由器上面都配了环回地址</p></blockquote><ul><li><strong>STEP2.0：</strong> BGP建立邻居关系</li></ul><p>BGP邻居关系通过<strong>单播</strong>建立，所以需要<strong>手动</strong>指定邻居</p><p><code>peer 对方接口IP地址 as-number 16</code><br>对方AS号：16</p><p>可以先在AR1和AR2之间开启抓包</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：为对等体配置AS号</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>bgp <span class="token number">1</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>peer <span class="token number">12.1</span>.1.2 as-number <span class="token number">16</span><span class="token comment"># todo AR2：为对等体配置AS号</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>bgp <span class="token number">16</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>peer <span class="token number">12.1</span>.1.1 as-number <span class="token number">1</span></code></pre><p>AR1进行BGP宣告网段之前，可以查看一下AR2的路由表，宣告之后再次查看即可看到AR2的路由表添加了AR1宣告网段的路由条目。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># show 错误写法：AR1：BGP宣告网段</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>network <span class="token number">1.1</span>.1.1 <span class="token number">24</span>  <span class="token comment"># 必须按照路由表严格宣告！</span>Info: The network does not exist.</code></pre><ul><li><strong>STEP2.1：</strong> 看一下Notification报文(可以跳过这步)</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：修改AS号</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>q<span class="token punctuation">[</span>R1<span class="token punctuation">]</span>un bgp <span class="token number">1</span>Warning: All BGP configurations will be deleted. Continue? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span>: y<span class="token punctuation">[</span>R1<span class="token punctuation">]</span>bgp <span class="token number">1</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>peer <span class="token number">12.1</span>.1.2 as-number <span class="token number">166</span>  </code></pre><p>在wireshark可以看到<code>NOTIFICATION</code>报文信息：</p><img src="/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/3560064be56b44eebd13750a3a4d78f8.png"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：修改回原来的AS号</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>q<span class="token punctuation">[</span>R1<span class="token punctuation">]</span>un bgp <span class="token number">1</span>Warning: All BGP configurations will be deleted. Continue? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span>: y<span class="token punctuation">[</span>R1<span class="token punctuation">]</span>bgp <span class="token number">1</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>peer <span class="token number">12.1</span>.1.2 as-number <span class="token number">16</span><span class="token comment"># 注意此时还没有进行BGP宣告路由！</span></code></pre><ul><li><strong>STEP2.2：</strong> 查看BGP邻居状态</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># TODO AR1：查看BGP邻居状态</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>dis bgp peer BGP <span class="token builtin class-name">local</span> router ID <span class="token builtin class-name">:</span> <span class="token number">12.1</span>.1.1 Local AS number <span class="token builtin class-name">:</span> <span class="token number">1</span> Total number of peers <span class="token builtin class-name">:</span> <span class="token number">1</span>                Peers <span class="token keyword">in</span> established state <span class="token builtin class-name">:</span> <span class="token number">1</span>  Peer            V          AS  MsgRcvd  MsgSent  OutQ  Up/Down       State PrefRcv  <span class="token number">12.1</span>.1.2        <span class="token number">4</span>          <span class="token number">16</span>       <span class="token number">14</span>       <span class="token number">14</span>     <span class="token number">0</span> 00:12:45 Established       <span class="token number">0</span></code></pre><p>Connect说明正在进行TCP三次握手；Active和Connect之间来回切换则检查两个路由器之间单播是否可达</p><table><thead><tr><th align="center">属性</th><th>说明</th></tr></thead><tbody><tr><td align="center">Peer</td><td>邻居地址</td></tr><tr><td align="center">V</td><td>邻居IP版本</td></tr><tr><td align="center">AS</td><td>邻居AS号</td></tr><tr><td align="center">State</td><td>与邻居之间的链路状态</td></tr><tr><td align="center">PrefRcv</td><td>从该邻居接收的路由信息条数</td></tr></tbody></table><ul><li><strong>STEP2.3：</strong> BGP宣告网段</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：BGP宣告网段</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>network <span class="token number">1.1</span>.1.1 <span class="token number">32</span></code></pre><ul><li><strong>STEP2.4：</strong> 查看BGP邻居信息及其BGP学习到的路由信息</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：查看BGP邻居</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>dis bgp peer BGP <span class="token builtin class-name">local</span> router ID <span class="token builtin class-name">:</span> <span class="token number">12.1</span>.1.2 Local AS number <span class="token builtin class-name">:</span> <span class="token number">16</span> Total number of peers <span class="token builtin class-name">:</span> <span class="token number">1</span>                Peers <span class="token keyword">in</span> established state <span class="token builtin class-name">:</span> <span class="token number">1</span>  Peer            V          AS  MsgRcvd  MsgSent  OutQ  Up/Down       State PrefRcv  <span class="token number">12.1</span>.1.1        <span class="token number">4</span>           <span class="token number">1</span>       <span class="token number">27</span>       <span class="token number">27</span>     <span class="token number">0</span> 00:24:20 Established       <span class="token number">1</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>  <span class="token comment"># 可以看到从对方学习到一条路由条目</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：查看BGP学习到的路由</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">1</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>   <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>                     <span class="token number">0</span>      1i</code></pre><table><thead><tr><th align="center">符号</th><th>说明</th></tr></thead><tbody><tr><td align="center">*</td><td>表示下一跳有效/可达</td></tr></tbody></table><blockquote><p>|表示指向的最优的路由条目(当有多条路由条目，选择最优的)<br>(空格)|表示EBGP学习到的路由条目<br>i|表示通过IBGP学习到的路由条目<br>Path|路径(AS号)<br>Ogn|起源属性</p></blockquote><table><thead><tr><th align="center">Ogn</th><th>说明</th></tr></thead><tbody><tr><td align="center">?</td><td>通过重分发学习到</td></tr><tr><td align="center">i</td><td>通过BGP学习到</td></tr><tr><td align="center">e</td><td>通过EGP(BGP前身)学习到</td></tr></tbody></table><h3 id="实验一-2-：BGP更新源"><a href="#实验一-2-：BGP更新源" class="headerlink" title="实验一$_2$：BGP更新源"></a><strong>实验一$_2$：BGP更新源</strong></h3><p>在上一个实验基础上继续</p><p>目的：让2、4环回口建立IGBP邻居关系</p><ul><li><strong>STEP3.0：</strong> BGP建立邻居关系</li></ul><p>BGP不需要配置中间路由器<br>IBGP指AS号，如果两个路由器都是AS 200，互相指向对方，AS号写200即可<br>一般IBGP建立邻居关系喜欢使用环回口，</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：配置BGP对等体</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>bgp <span class="token number">16</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>peer <span class="token number">4.4</span>.4.4 as-number <span class="token number">16</span><span class="token comment"># todo AR4：配置BGP对等体</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>bgp <span class="token number">16</span><span class="token punctuation">[</span>R4-bgp<span class="token punctuation">]</span>peer <span class="token number">2.2</span>.2.2 as-number <span class="token number">16</span></code></pre><p>此时，虽然配置了BGP，但是邻居关系无法建立</p><ul><li><strong>STEP3.1：</strong> 抓包分析原因</li></ul><p>在AR2和AR3之间的线路开始抓包，看到：</p><img src="/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/761187adb6954ec98b767489c81572a4.png"><blockquote><p>现象：双方不断地进行TCP连接建立的请求和拒绝<br>原因：源地址不是BGP建立邻居关系的地址，所以无法建立邻居关系</p></blockquote><ul><li><strong>STEP3.2：</strong> 配置更新源</li></ul><p>IGBP跟对方建立连接的时候，注意要指定源地址，不指定的话，就用<strong>出接口</strong>作为源IP<br>若IBGP使用的不是物理接口或者物理接口和建立邻居关系的路由的出接口不一样，则要使用<strong>更新源</strong>(connected interface)指定一下源地址，否则无法建立邻居关系</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：指定更新源</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>peer <span class="token number">4.4</span>.4.4 connect-interface LoopBack <span class="token number">0</span></code></pre><p>因为只在AR2配置了更新源，所以只能等待AR2发起TCP连接，意味着AR2拒绝AR4发送过来的TCP建立连接请求。在wireshark中能看到2.2.2.2和4.4.4.4建立TCP连接的报文</p><h3 id="实验一-3-：实现互通"><a href="#实验一-3-：实现互通" class="headerlink" title="实验一$_3$：实现互通"></a><strong>实验一$_3$：实现互通</strong></h3><p><strong>目的</strong>：建立AR4和AR6的BGP邻居关系，使用环回口地址建立BGP邻居关系<br>AR4使用环回地址<code>4.4.4.4</code>；AR6使用环回地址<code>6.6.6.6</code></p><ul><li><strong>STEP4.0：</strong> 配置环回地址</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR4：配置环回地址</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>int lo <span class="token number">10</span><span class="token punctuation">[</span>R4-LoopBack10<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">44.44</span>.44.44 <span class="token number">32</span><span class="token punctuation">[</span>R4-LoopBack10<span class="token punctuation">]</span>q<span class="token punctuation">[</span>R4<span class="token punctuation">]</span>ip route-static <span class="token number">66.66</span>.66.66 <span class="token number">32</span> <span class="token number">64.1</span>.1.6<span class="token comment"># todo AR6：配置环回地址</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>int lo <span class="token number">10</span><span class="token punctuation">[</span>R6-LoopBack10<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">66.66</span>.66.66 <span class="token number">32</span><span class="token punctuation">[</span>R6-LoopBack10<span class="token punctuation">]</span>q<span class="token punctuation">[</span>R6<span class="token punctuation">]</span>ip route-static <span class="token number">44.44</span>.44.44 <span class="token number">32</span> <span class="token number">64.1</span>.1.4</code></pre><ul><li><strong>STEP4.1：</strong> 测试连通</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR4：测试连通</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>ping -a <span class="token number">44.44</span>.44.44 <span class="token number">66.66</span>.66.66</code></pre><p>能ping通。</p><ul><li><strong>STEP4.2：</strong> BGP建立邻居关系</li></ul><p>先写<code>as-number</code>，再写<code>connect-interface</code>，命令顺序不能反</p><p>这里老师的配置跟拓扑图不同，直接删除原来BGP的配置即可：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR6：删除原BGP配置</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>un bgp <span class="token number">24</span>Warning: All BGP configurations will be deleted. Continue? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span>: y</code></pre><p>然后配置建立BGP邻居关系：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR6：配置建立BGP邻居关系</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>bgp <span class="token number">6</span><span class="token punctuation">[</span>R6-bgp<span class="token punctuation">]</span>peer <span class="token number">44.44</span>.44.44 as-number <span class="token number">16</span><span class="token comment"># todo AR4：配置建立BGP邻居关系</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>bgp <span class="token number">16</span><span class="token punctuation">[</span>R4-bgp<span class="token punctuation">]</span>peer <span class="token number">66.66</span>.66.66 as-number <span class="token number">6</span></code></pre><ul><li><strong>STEP4.3：</strong> 查表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR4：查看BGP邻居</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>dis bgp peer BGP <span class="token builtin class-name">local</span> router ID <span class="token builtin class-name">:</span> <span class="token number">34.1</span>.1.4 Local AS number <span class="token builtin class-name">:</span> <span class="token number">16</span> Total number of peers <span class="token builtin class-name">:</span> <span class="token number">2</span>                Peers <span class="token keyword">in</span> established state <span class="token builtin class-name">:</span> <span class="token number">1</span>  Peer            V          AS  MsgRcvd  MsgSent  OutQ  Up/Down       State PrefRcv  <span class="token number">2.2</span>.2.2         <span class="token number">4</span>          <span class="token number">16</span>       <span class="token number">25</span>       <span class="token number">24</span>     <span class="token number">0</span> 00:22:51 Established       <span class="token number">1</span>  <span class="token number">6.6</span>.6.6         <span class="token number">4</span>           <span class="token number">6</span>        <span class="token number">0</span>        <span class="token number">0</span>     <span class="token number">0</span> 00:10:41        Idle       <span class="token number">0</span><span class="token comment"># todo AR4：查看BGP学习到的路由</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">34.1</span>.1.4  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">1</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn   i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      1i<span class="token comment"># todo AR4：查看路由表</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">16</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">16</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">2.2</span>.2.2/32  OSPF    <span class="token number">10</span>   <span class="token number">2</span>           D   <span class="token number">34.1</span>.1.3        GigabitEthernet0/0/0        <span class="token number">3.3</span>.3.3/32  OSPF    <span class="token number">10</span>   <span class="token number">1</span>           D   <span class="token number">34.1</span>.1.3        GigabitEthernet0/0/0        <span class="token number">4.4</span>.4.4/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0        ······</code></pre><p>i：从BGP学习到的地址<br>但是路由表中没有该地址</p><p>所以此时有两个问题：<br>1.AR4和AR6邻居关系无法建立<br>2.AR4能通过AR2学习<code>1.1.1.1</code>路由条目，但是无法加表，因为AR4学习该地址及其下一跳，而AR2的<code>1.1.1.1</code>的下一跳是AR2的直连路由，但是对AR4来说是一个不可达地址，所以不加到AR4路由表中</p><ul><li><strong>STEP4.4：</strong> 设置下一跳地址</li></ul><p>在AR2上，把出AR2的地址设置为AR2本地地址，且保证该地址有效可达</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：设置下一跳地址</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>peer <span class="token number">4.4</span>.4.4 next-hop-local</code></pre><ul><li><strong>STEP4.5：</strong> 查看BGP更新(需要重置邻居关系)</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR4：查看BGP学习的路由</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>dis bgp rou BGP Local router ID is <span class="token number">34.1</span>.1.4  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">1</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn   i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      1i</code></pre><p>这里需要重置以下BGP邻居关系才能生效</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：重置BGP</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>reset bgp all graceful </code></pre><p>如果在一台路由器配置，另一台路由器未及时生效，可以把BGP邻居关系重置一下。(graceful软重启，如果软重启不行就硬重启。)</p><ul><li><strong>STEP4.6：</strong> 重启后查看</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR4：查看BGP路由表</span><span class="token punctuation">[</span>R4-bgp<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">34.1</span>.1.4  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">1</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">2.2</span>.2.2         <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      1i<span class="token comment"># todo AR4：查看BGP邻居关系</span><span class="token punctuation">[</span>R4-bgp<span class="token punctuation">]</span>dis bgp pee BGP <span class="token builtin class-name">local</span> router ID <span class="token builtin class-name">:</span> <span class="token number">34.1</span>.1.4 Local AS number <span class="token builtin class-name">:</span> <span class="token number">16</span> Total number of peers <span class="token builtin class-name">:</span> <span class="token number">2</span>                Peers <span class="token keyword">in</span> established state <span class="token builtin class-name">:</span> <span class="token number">1</span>  Peer            V          AS  MsgRcvd  MsgSent  OutQ  Up/Down       State PrefRcv  <span class="token number">2.2</span>.2.2         <span class="token number">4</span>          <span class="token number">16</span>        <span class="token number">4</span>        <span class="token number">3</span>     <span class="token number">0</span> 00:01:49 Established       <span class="token number">1</span>  <span class="token number">66.66</span>.66.66     <span class="token number">4</span>           <span class="token number">6</span>        <span class="token number">0</span>        <span class="token number">0</span>     <span class="token number">0</span> 00:07:37      Active       <span class="token number">0</span></code></pre><p>虽然路由表有了<code>*&gt;i</code>，但是链路状态为<code>Active</code>。</p><ul><li><strong>STEP4.7：</strong> 配置环回口为更新源</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR4：配置环回口为更新源</span><span class="token punctuation">[</span>R4-bgp<span class="token punctuation">]</span>peer <span class="token number">66.66</span>.66.66 connect-interface  LoopBack <span class="token number">10</span></code></pre><p>配置之后，AR4就会用<code>44.44.44.44</code>和对方<code>66.66.66.66</code>建立邻居关系。</p><ul><li><strong>STEP4.8：</strong> 开始抓包</li></ul><p>在AR4和AR6之间开始抓包，可以看到(<code>44.44.44.44</code>和<code>66.66.66.66</code>建立邻居关系)：</p><img src="/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/174f70b475be45d992f58ad86b919d98.png"><p>EBGP建立邻居关系特性：<br>EBGP多跳，EBGP发送的所有报文TTL为1，即只能走一跳，如图所示：</p><img src="/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/6fab1a3153754b5b91c8c4b62e290e56.png"><p>说白了EBGP默认只有直连才能建立EBGP邻居关系，中间不能有路由器，但是两个EBGP路由器中间有路由器的情况比较常见，所以可以把TTL设置大一点，而且两边都要设置。</p><ul><li><strong>STEP4.9：</strong> 修改EBGP报文的TTL值</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR6：修改EBGP报文的TTL值</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>bgp <span class="token number">6</span><span class="token punctuation">[</span>R6-bgp<span class="token punctuation">]</span>peer <span class="token number">44.44</span>.44.44 ebgp-max-hop <span class="token number">10</span><span class="token comment"># todo AR4：修改EBGP报文的TTL值</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>bgp <span class="token number">16</span><span class="token punctuation">[</span>R4-bgp<span class="token punctuation">]</span>peer <span class="token number">66.66</span>.66.66 ebgp-max-hop <span class="token number">10</span></code></pre><ul><li><strong>STEP4.99：</strong> 查看</li></ul><p>首先，查看抓包信息：</p><img src="/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/d2a33e2aaac346faaf571e5dd2cd8726.png"><p>其次，查看BGP邻居关系</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR6：查看BGP邻居关系</span><span class="token punctuation">[</span>R6-bgp<span class="token punctuation">]</span>dis bgp pee BGP <span class="token builtin class-name">local</span> router ID <span class="token builtin class-name">:</span> <span class="token number">26.1</span>.1.6 Local AS number <span class="token builtin class-name">:</span> <span class="token number">6</span> Total number of peers <span class="token builtin class-name">:</span> <span class="token number">1</span>                Peers <span class="token keyword">in</span> established state <span class="token builtin class-name">:</span> <span class="token number">1</span>  Peer            V          AS  MsgRcvd  MsgSent  OutQ  Up/Down       State PrefRcv  <span class="token number">44.44</span>.44.44     <span class="token number">4</span>          <span class="token number">16</span>        <span class="token number">3</span>        <span class="token number">2</span>     <span class="token number">0</span> 00:00:06 Established       <span class="token number">1</span></code></pre><p>再次，查看路由表</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR6：查看路由表</span><span class="token punctuation">[</span>R6-bgp<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">11</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">11</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">1.1</span>.1.1/32  EBGP    <span class="token number">255</span>  <span class="token number">0</span>          RD   <span class="token number">44.44</span>.44.44     GigabitEthernet0/0/1        <span class="token number">6.6</span>.6.6/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0    <span class="token number">44.44</span>.44.44/32  Static  <span class="token number">60</span>   <span class="token number">0</span>          RD   <span class="token number">64.1</span>.1.4        GigabitEthernet0/0/1    ······</code></pre><p>此时已经有<code>1.1.1.1</code>这个路由条目。</p><ul><li><strong>STEP5.0：</strong> AR6宣告网段</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR6：宣告网段</span><span class="token punctuation">[</span>R6-bgp<span class="token punctuation">]</span>network <span class="token number">6.6</span>.6.6 <span class="token number">32</span></code></pre><ul><li><strong>STEP5.1：</strong> 查看AR1路由表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：查看路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">8</span>        Routes <span class="token builtin class-name">:</span> <span class="token number">8</span>        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">1.1</span>.1.1/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0       <span class="token number">12.1</span>.1.0/24  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">12.1</span>.1.1        GigabitEthernet0/0/0       <span class="token number">12.1</span>.1.1/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/0     <span class="token number">12.1</span>.1.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/0      <span class="token number">127.0</span>.0.0/8   Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0      <span class="token number">127.0</span>.0.1/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0<span class="token number">127.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0<span class="token number">255.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0<span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.1  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">1</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>   <span class="token number">1.1</span>.1.1/32         <span class="token number">0.0</span>.0.0         <span class="token number">0</span>                     <span class="token number">0</span>      i</code></pre><p>AR1学习不到<code>6.6.6.6</code>。</p><ul><li><strong>STEP5.2：</strong> 分析AR1学习不到<code>6.6.6.6</code>的原因</li></ul><p>从AR6到AR1没问题，但是，因为(AR1-&gt;)AR2学习到的地址<code>6.6.6.6</code>的下一跳指向<code>66.66.66.66</code>，(AR2-&gt;)AR4的目的地址<code>6.6.6.6</code>的下一跳<code>66.66.66.66</code>单播不可达，所以加数据库，但是不加表，因此AR4需要使用更新源：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR4：查看BGP路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>dis bgp rou BGP Local router ID is <span class="token number">34.1</span>.1.4  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">2</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">2.2</span>.2.2         <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      1i *<span class="token operator">&gt;</span>   <span class="token number">6.6</span>.6.6/32         <span class="token number">66.66</span>.66.66     <span class="token number">0</span>                     <span class="token number">0</span>      6i<span class="token comment"># todo AR4：更新源</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>bgp <span class="token number">16</span><span class="token punctuation">[</span>R4-bgp<span class="token punctuation">]</span>peer <span class="token number">2.2</span>.2.2 next-hop-local</code></pre><ul><li><strong>STEP5.3：</strong> 查看路由表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：查看路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">9</span>        Routes <span class="token builtin class-name">:</span> <span class="token number">9</span>        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">1.1</span>.1.1/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0        <span class="token number">6.6</span>.6.6/32  EBGP    <span class="token number">255</span>  <span class="token number">0</span>           D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0        ······</code></pre><p>AR1路由表有<code>6.6.6.6</code></p><ul><li><strong>STEP6.0：</strong> 测试连通</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：ping AR6</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>ping -a <span class="token number">1.1</span>.1.1 <span class="token number">6.6</span>.6.6  PING <span class="token number">6.6</span>.6.6: <span class="token number">56</span>  data bytes, press CTRL_C to <span class="token builtin class-name">break</span>    Request <span class="token function">time</span> out    Request <span class="token function">time</span> out    Request <span class="token function">time</span> out    Request <span class="token function">time</span> out    Request <span class="token function">time</span> out  --- <span class="token number">6.6</span>.6.6 <span class="token function">ping</span> statistics ---    <span class="token number">5</span> packet<span class="token punctuation">(</span>s<span class="token punctuation">)</span> transmitted    <span class="token number">0</span> packet<span class="token punctuation">(</span>s<span class="token punctuation">)</span> received    <span class="token number">100.00</span>% packet loss</code></pre><p>不通</p><ul><li><strong>STEP6.1：</strong> 分析ping不同原因，配置MPLS</li></ul><p>注：<br>1.AR3路由黑洞：转发到该接口上的数据包都会被丢掉<br>2.解决办法：重分发，静态路由，BGP，MPLS······<br>3.MPLS(多协议标签交换)，当有标签的时候，基于标签转发，不再基于路由表转发<br>4.id建议使用环回口地址，确保环回口地址单播可达，因为要通过LSR-ID建立TCP连接来分标签</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：配置MPLS</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>mpls lsr-id <span class="token number">2.2</span>.2.2  <span class="token comment"># 配LSR-ID</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>mpls  <span class="token comment"># 启用MPLS</span>Info: Mpls starting, please wait<span class="token punctuation">..</span>. OK<span class="token operator">!</span><span class="token punctuation">[</span>R2-mpls<span class="token punctuation">]</span>mpls ldp  <span class="token comment"># 启用MPLS LDB</span><span class="token comment"># todo 接口配置MPLS</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>R2-GigabitEthernet0/0/1<span class="token punctuation">]</span>mpls     <span class="token punctuation">[</span>R2-GigabitEthernet0/0/1<span class="token punctuation">]</span>mpls ldp<span class="token comment"># todo AR3：配置MPLS</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>mpls lsr-id <span class="token number">3.3</span>.3.3<span class="token punctuation">[</span>R3<span class="token punctuation">]</span>mplsInfo: Mpls starting, please wait<span class="token punctuation">..</span>. OK<span class="token operator">!</span><span class="token punctuation">[</span>R3-mpls<span class="token punctuation">]</span>mpls ldp<span class="token comment"># todo AR3：接口配置MPLS</span><span class="token punctuation">[</span>R3-mpls-ldp<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>R3-GigabitEthernet0/0/0<span class="token punctuation">]</span>mpls<span class="token punctuation">[</span>R3-GigabitEthernet0/0/0<span class="token punctuation">]</span>mpls ldp<span class="token punctuation">[</span>R3-GigabitEthernet0/0/0<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>R3-GigabitEthernet0/0/1<span class="token punctuation">]</span>mpls<span class="token punctuation">[</span>R3-GigabitEthernet0/0/1<span class="token punctuation">]</span>mpls ldp<span class="token comment"># todo AR4：配置MPLS</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>mpls lsr-id <span class="token number">4.4</span>.4.4<span class="token punctuation">[</span>R4<span class="token punctuation">]</span>mplsInfo: Mpls starting, please wait<span class="token punctuation">..</span>. OK<span class="token operator">!</span><span class="token punctuation">[</span>R4-mpls<span class="token punctuation">]</span>mpls ldp<span class="token punctuation">[</span>R4-mpls-ldp<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>R4-GigabitEthernet0/0/0<span class="token punctuation">]</span>mpls<span class="token punctuation">[</span>R4-GigabitEthernet0/0/0<span class="token punctuation">]</span>mpls ldp </code></pre><ul><li><strong>STEP6.2：</strong> 查看MPLS转发表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：查看MPLS转发表</span><span class="token punctuation">[</span>R2-GigabitEthernet0/0/1<span class="token punctuation">]</span>dis mpls lsp-------------------------------------------------------------------------------                 LSP Information: LDP LSP-------------------------------------------------------------------------------FEC                In/Out Label  In/Out IF                      Vrf Name       <span class="token number">3.3</span>.3.3/32         NULL/3        -/GE0/0/1                                     <span class="token number">3.3</span>.3.3/32         <span class="token number">1024</span>/3        -/GE0/0/1                                     <span class="token number">2.2</span>.2.2/32         <span class="token number">3</span>/NULL        -/-                                           <span class="token number">4.4</span>.4.4/32         NULL/1025     -/GE0/0/1                                     <span class="token number">4.4</span>.4.4/32         <span class="token number">1025</span>/1025     -/GE0/0/1   <span class="token comment"># todo AR3：查看MPLS转发表</span><span class="token punctuation">[</span>R3-GigabitEthernet0/0/1<span class="token punctuation">]</span>dis mpls lsp-------------------------------------------------------------------------------                 LSP Information: LDP LSP-------------------------------------------------------------------------------FEC                In/Out Label  In/Out IF                      Vrf Name       <span class="token number">3.3</span>.3.3/32         <span class="token number">3</span>/NULL        -/-                                           <span class="token number">2.2</span>.2.2/32         NULL/3        -/GE0/0/0                                     <span class="token number">2.2</span>.2.2/32         <span class="token number">1024</span>/3        -/GE0/0/0                                     <span class="token number">4.4</span>.4.4/32         NULL/3        -/GE0/0/1                                     <span class="token number">4.4</span>.4.4/32         <span class="token number">1025</span>/3        -/GE0/0/1                                     <span class="token comment"># todo AR4：查看MPLS转发表</span><span class="token punctuation">[</span>R4-GigabitEthernet0/0/0<span class="token punctuation">]</span>dis mpls lsp-------------------------------------------------------------------------------                 LSP Information: LDP LSP-------------------------------------------------------------------------------FEC                In/Out Label  In/Out IF                      Vrf Name       <span class="token number">2.2</span>.2.2/32         NULL/1024     -/GE0/0/0                                     <span class="token number">2.2</span>.2.2/32         <span class="token number">1024</span>/1024     -/GE0/0/0                                     <span class="token number">3.3</span>.3.3/32         NULL/3        -/GE0/0/0                                     <span class="token number">3.3</span>.3.3/32         <span class="token number">1025</span>/3        -/GE0/0/0                                     <span class="token number">44.44</span>.44.44/32     <span class="token number">3</span>/NULL        -/-                                           <span class="token number">4.4</span>.4.4/32         <span class="token number">3</span>/NULL        -/-                                           </code></pre><p>In进来撕掉标签<br>Out出去添加标签</p><ul><li><strong>STEP6.3：</strong> 测试连通</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>ping -a <span class="token number">1.1</span>.1.1 <span class="token number">6.6</span>.6.6  PING <span class="token number">6.6</span>.6.6: <span class="token number">56</span>  data bytes, press CTRL_C to <span class="token builtin class-name">break</span>    Request <span class="token function">time</span> out    Request <span class="token function">time</span> out    Request <span class="token function">time</span> out    Request <span class="token function">time</span> out    Request <span class="token function">time</span> out  --- <span class="token number">6.6</span>.6.6 <span class="token function">ping</span> statistics ---    <span class="token number">5</span> packet<span class="token punctuation">(</span>s<span class="token punctuation">)</span> transmitted    <span class="token number">0</span> packet<span class="token punctuation">(</span>s<span class="token punctuation">)</span> received    <span class="token number">100.00</span>% packet loss</code></pre><p>还是不通，因为没有关闭递归查找：</p><ul><li><strong>STEP6.4：</strong> 关闭递归查找</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 关闭递归查找</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>route recursive-lookup tunnel <span class="token punctuation">[</span>R3<span class="token punctuation">]</span>route recursive-lookup tunnel <span class="token punctuation">[</span>R4<span class="token punctuation">]</span>route recursive-lookup tunnel </code></pre><p>但凡少配一个路由器，下面都不能通</p><ul><li><strong>STEP6.5：</strong> 测试连通</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>ping -a <span class="token number">1.1</span>.1.1 <span class="token number">6.6</span>.6.6  PING <span class="token number">6.6</span>.6.6: <span class="token number">56</span>  data bytes, press CTRL_C to <span class="token builtin class-name">break</span>    Reply from <span class="token number">6.6</span>.6.6: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">Sequence</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">252</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">70</span> ms    Reply from <span class="token number">6.6</span>.6.6: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">Sequence</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">252</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">40</span> ms    Reply from <span class="token number">6.6</span>.6.6: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">Sequence</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">252</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">50</span> ms    Reply from <span class="token number">6.6</span>.6.6: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">Sequence</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">252</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">40</span> ms    Reply from <span class="token number">6.6</span>.6.6: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">Sequence</span><span class="token operator">=</span><span class="token number">5</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">252</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">30</span> ms  --- <span class="token number">6.6</span>.6.6 <span class="token function">ping</span> statistics ---    <span class="token number">5</span> packet<span class="token punctuation">(</span>s<span class="token punctuation">)</span> transmitted    <span class="token number">5</span> packet<span class="token punctuation">(</span>s<span class="token punctuation">)</span> received    <span class="token number">0.00</span>% packet loss    round-trip min/avg/max <span class="token operator">=</span> <span class="token number">30</span>/46/70 ms</code></pre><p><a href="https://blog.csdn.net/weixin_45404784/article/details/105387520">次末跳(倒数第二跳)</a>：边界LSR将本地的直连网段传递给MPLS域内邻居后，LDP给该网段分配标签号为3，告知倒数第二跳设备它的身份；导致倒数第二跳设备在查询LFIB表后，已知转发路径的前提下提前弹出标签，使得最后一跳路由器均只需要查询FIB表；否则最后一跳路由器在查询LFIB表后，弹出标签还需要查询FIB。</p><h2 id="BGP路径选择属性"><a href="#BGP路径选择属性" class="headerlink" title="BGP路径选择属性"></a>BGP路径选择属性</h2><img src="/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/435538e229b646a8873d63c04964a4f2.png"><img src="/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/9f20a45b0a4f4e80b137c23021639d77.png"><img src="/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/91a63ab27c944bc7b32b2705550ccca2.png"><img src="/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/6ff870a46725443e96b78ea53fd071bc.png"><p><a href="https://www.bilibili.com/read/cv12135573">【每日干货】华为13条BGP选路原则详解</a></p><h3 id="原理：BGP选路原则"><a href="#原理：BGP选路原则" class="headerlink" title="原理：BGP选路原则"></a><strong>原理：BGP选路原则</strong></h3><p>13条BGP选路原则(中的几条)：</p><ul><li>2、Prefer highest local preference (global within AS).：本地优先级最高的路由&lt;**本地优先级用于AS内部**&gt;</li><li>3、Prefer route originated by the local router (next hop = <code>0.0.0.0</code>).：当前路由器<strong>通告</strong>的路由</li><li>4、Prefer shortest AS path.：<strong>AS路径最短的路由</strong></li><li>7、Prefer EBGP path over IBGP path.：<strong>外部路径(EBGP)优先于内部路径(IBGP)</strong></li><li>8、Prefer the path through the closest IGP neighbor：选择经过最近的IGP邻居的路径，即<strong>IBGP下一跳首选AS中最短的内部路径(OSPF、RIP开销cost值最小的)作为下一跳</strong></li><li>9、balance traffic：如果配置了maximum-path(<strong>默认为1</strong>), 会安装多条路由到路由表&lt;但是BGP继续比，只有一个打上&gt;</li><li>10、Prefer oldest route for EBGP paths.：都是外部路径，选<strong>最先</strong>收到的（最旧的）&lt;目的是减少抖动&gt;</li><li>11、Prefer the path with the lowest neighbor BGP router ID.：首选来自<strong>最低路由ID</strong>的BGP路由器的路由</li></ul><h3 id="实验二-1-：BGP属性-协议首选值PrefVal-preference-value"><a href="#实验二-1-：BGP属性-协议首选值PrefVal-preference-value" class="headerlink" title="实验二$_1$：BGP属性:协议首选值PrefVal(preference value)"></a><strong>实验二$_1$：BGP属性:协议首选值PrefVal(preference value)</strong></h3><p>PrefVal是华为特有的属性</p><ul><li><p><strong>方法一</strong>：直接在BGP修改</p></li><li><p><strong>STEP1.0：</strong> 网络拓扑</p></li></ul><p>直接打开老师的拓扑</p><img src="/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/68c11ce8b9a04b78a99a55235e3f6a01.png"><p>注意：AR1有环回地址<code>1.1.1.1</code>，AR4有环回地址<code>4.4.4.4</code>。</p><ul><li><p><strong>STEP1.1：</strong> 改名(略)</p></li><li><p><strong>STEP2.0：</strong> 查看</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：查看BGP邻居关系</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>dis bgp pee BGP <span class="token builtin class-name">local</span> router ID <span class="token builtin class-name">:</span> <span class="token number">12.1</span>.1.2 Local AS number <span class="token builtin class-name">:</span> <span class="token number">1</span> Total number of peers <span class="token builtin class-name">:</span> <span class="token number">3</span>  Peers <span class="token keyword">in</span> established state <span class="token builtin class-name">:</span> <span class="token number">3</span>  Peer            V          AS  MsgRcvd  MsgSent  OutQ  Up/Down       State Pre fRcv  <span class="token number">12.1</span>.1.1        <span class="token number">4</span>           <span class="token number">1</span>       <span class="token number">22</span>       <span class="token number">22</span>     <span class="token number">0</span> 00:18:46 Established       <span class="token number">2</span>  <span class="token number">23.1</span>.1.3        <span class="token number">4</span>          <span class="token number">24</span>       <span class="token number">21</span>       <span class="token number">23</span>     <span class="token number">0</span> 00:18:46 Established       <span class="token number">1</span>  <span class="token number">26.1</span>.1.6        <span class="token number">4</span>          <span class="token number">24</span>       <span class="token number">21</span>       <span class="token number">23</span>     <span class="token number">0</span> 00:18:46 Established       <span class="token number">1</span><span class="token comment"># todo AR2：查看BGP路由表</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">4</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i *                       <span class="token number">26.1</span>.1.6                              <span class="token number">0</span>      24i   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i</code></pre><ul><li><strong>STEP2.1：</strong> 修改优先级</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：修改优先级</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>bgp <span class="token number">1</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>peer <span class="token number">26.1</span>.1.6 preferred-value <span class="token number">1</span><span class="token comment"># todo AR2：查看BGP路由表</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">4</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">26.1</span>.1.6                              <span class="token number">1</span>      24i *                       <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i</code></pre><p>看到AR2到<code>4.4.4.4</code>的第一个下一跳由<code>23.1.1.3</code>改为<code>26.1.1.6</code>，并且优先级变为1。</p><ul><li><strong>STEP2.2：</strong> 实验现象看完后，删除配置，利于做下一个实验</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：删除配置</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>un peer <span class="token number">26.1</span>.1.6 preferred-value<span class="token comment"># todo AR2：查看BGP路由表</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">4</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i *                       <span class="token number">26.1</span>.1.6                              <span class="token number">0</span>      24i   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i</code></pre><ul><li><p><strong>方法二</strong>：通过配置前缀列表和ACL进行修改</p></li><li><p><strong>STEP3.0：</strong> 使用前缀列表</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：配置前缀列表</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>ip ip-prefix dcm permit <span class="token number">4.4</span>.4.4 <span class="token number">32</span><span class="token comment"># todo AR2：配置路由策略</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>route-policy ?  STRING<span class="token operator">&lt;</span><span class="token number">1</span>-4<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>  Name of the route policy  <span class="token number">1</span>             Name of the route policy  ben           Name of the route policy<span class="token punctuation">[</span>R2<span class="token punctuation">]</span>route-policy PV permit <span class="token function">node</span> ?  INTEGER<span class="token operator">&lt;</span><span class="token number">0</span>-6553<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>  Index of the <span class="token function">node</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>route-policy PV permit <span class="token function">node</span> <span class="token number">10</span> Info: New Sequence of this List.<span class="token comment"># todo AR2：匹配前缀列表</span><span class="token punctuation">[</span>R2-route-policy<span class="token punctuation">]</span>if-match ip-prefix ?  STRING<span class="token operator">&lt;</span><span class="token number">1</span>-16<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>  Specify prefix-list name<span class="token punctuation">[</span>R2-route-policy<span class="token punctuation">]</span>if-match ip-prefix dcm<span class="token comment"># todo AR2：修改优先级</span><span class="token punctuation">[</span>R2-route-policy<span class="token punctuation">]</span>apply preferred-value ?  INTEGER<span class="token operator">&lt;</span><span class="token number">0</span>-6553<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>  Specify BGP Preferred-value<span class="token punctuation">(</span>weight<span class="token punctuation">)</span> value <span class="token keyword">for</span> routing table<span class="token punctuation">[</span>R2-route-policy<span class="token punctuation">]</span>apply preferred-value <span class="token number">10</span><span class="token comment"># todo AR2：配置路由策略</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>route-policy PV permit <span class="token function">node</span> <span class="token number">20</span>Info: New Sequence of this List.<span class="token comment"># todo AR2：在BGP应用前缀列表</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>bgp <span class="token number">1</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>peer <span class="token number">26.1</span>.1.6 route-policy PV <span class="token function">import</span> <span class="token comment"># todo AR2：查看BGP路由表</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">4</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">26.1</span>.1.6                              <span class="token number">10</span>     24i *                       <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i</code></pre><p>prefVal是<strong>私有属性</strong>，不能转发，且这个属性只能<strong>接收方向</strong>修改</p><ul><li><strong>STEP3.1：</strong> 删除配置，利于做下一个实验</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：删除配置</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>un peer <span class="token number">26.1</span>.1.6 route-policy PV <span class="token function">import</span></code></pre><h3 id="实验二-2-：BGP属性-本地优先级最高的路由LocPrf-Local-Preference"><a href="#实验二-2-：BGP属性-本地优先级最高的路由LocPrf-Local-Preference" class="headerlink" title="实验二$_2$：BGP属性:本地优先级最高的路由LocPrf(Local Preference)"></a><strong>实验二$_2$：BGP属性:本地优先级最高的路由LocPrf(Local Preference)</strong></h3><p>LocPrf只能在AS内部的IBGP传递时使用，就是说EBGP之间不能使用<br>可以用在IBGP的In和Out方向，只能用在EBGP的In方向(虽然不能传递，但是可以在本地修改)</p><p><strong>目的</strong>：AR2选择AR6的路由路径作为最优</p><ul><li><strong>STEP4.0：</strong> 修改LocPrf</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：路由策略</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>route-policy LP permit <span class="token function">node</span> <span class="token number">10</span> Info: New Sequence of this List.<span class="token comment"># todo AR2：前缀列表</span><span class="token punctuation">[</span>R2-route-policy<span class="token punctuation">]</span>if-match ip-prefix dcm  <span class="token comment"># 之前配置的前缀列表dcm</span><span class="token punctuation">[</span>R2-route-policy<span class="token punctuation">]</span>apply local-preference <span class="token number">110</span>  <span class="token comment"># 修改locprf</span><span class="token comment"># todo AR2：查看BGP路由表</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">4</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i *                       <span class="token number">26.1</span>.1.6                              <span class="token number">0</span>      24i   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i<span class="token comment"># todo AR2：BGP启用路由策略</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>bgp <span class="token number">1</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>peer <span class="token number">26.1</span>.1.6 route-policy LP <span class="token function">import</span> <span class="token comment"># todo AR2：查看BGP路由表</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">4</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">26.1</span>.1.6                   <span class="token number">110</span>        <span class="token number">0</span>      24i *                       <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i</code></pre><p>配置路由策略前后，AR2到<code>4.4.4.4</code>的下一跳地址优先级改变。</p><ul><li><strong>STEP4.1：</strong> 删除配置</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：删除配置</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>un peer <span class="token number">26.1</span>.1.6 route-policy LP <span class="token function">import</span></code></pre><ul><li><strong>STEP4.2：</strong> 做一个无效配置，给EBGP修改Out方向的LocPrf值</li></ul><p>选AR6(一个EBGP)作为配置对象</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：查看路由表</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">4</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i *                       <span class="token number">26.1</span>.1.6                              <span class="token number">0</span>      24i   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i<span class="token comment"># todo AR6：配置前缀列表</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>ip ip-prefix dcm4 permit <span class="token number">4.4</span>.4.4 <span class="token number">32</span><span class="token comment"># todo AR6：配置路由策略</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>route-policy LP permit <span class="token function">node</span> <span class="token number">10</span>Info: New Sequence of this List.<span class="token punctuation">[</span>R6-route-policy<span class="token punctuation">]</span>if-match ip-prefix dcm4  <span class="token comment"># 应用前缀列表</span><span class="token punctuation">[</span>R6-route-policy<span class="token punctuation">]</span>apply local-preference <span class="token number">120</span>  <span class="token comment"># 修改LocPrf</span><span class="token comment"># todo AR6：将路由策略应用到发送给AR2的反向</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>bgp <span class="token number">24</span><span class="token punctuation">[</span>R6-bgp<span class="token punctuation">]</span>peer <span class="token number">26.1</span>.1.2 route-policy LP <span class="token builtin class-name">export</span>  <span class="token comment"># 注意是出方向</span><span class="token comment"># todo AR2：重置邻居关系，一般配置后BGP关系需要重置才能建立</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>reset bgp all graceful<span class="token comment"># todo AR2：邻居关系建立后，再查看BGP路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">4</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i *                       <span class="token number">26.1</span>.1.6                              <span class="token number">0</span>      24i   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i</code></pre><p>可以看到AR2路由表的下一跳地址的LocPrf不变，证明：EBGP不能在出方向修改LocPrf(只能在入方向修改LocPrf)。</p><ul><li><strong>STEP4.3：</strong> 删除配置，便于做下一个实验(其实这个配置删不删无所谓，本来配置就无法生效)</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR6：删除配置</span><span class="token punctuation">[</span>R6-bgp<span class="token punctuation">]</span>un peer <span class="token number">26.1</span>.1.2 route-policy LP <span class="token builtin class-name">export</span></code></pre><ul><li><strong>STEP4.4：</strong> 配置入方向</li></ul><p><strong>目的</strong>：在AR4上，选择AR6作为最优路径</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR6：配置前缀列表</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>ip ip-prefix dcm1 permit <span class="token number">1.1</span>.1.1 <span class="token number">32</span><span class="token comment"># todo AR6：配置路由策略</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>route-policy LP permit <span class="token function">node</span> <span class="token number">10</span>Info: You are overwriting this sequence.<span class="token comment"># todo AR6：应用前缀列表</span><span class="token punctuation">[</span>R6-route-policy<span class="token punctuation">]</span>if-match ip-prefix dcm1 <span class="token comment"># todo AR6：BGP应用路由策略</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>bgp <span class="token number">24</span><span class="token punctuation">[</span>R6-bgp<span class="token punctuation">]</span>peer <span class="token number">64.1</span>.1.4 route-policy LP <span class="token builtin class-name">export</span>  <span class="token comment"># 注意是出方向</span><span class="token comment"># todo AR4：重置BGP邻居关系</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>reset bgp all graceful<span class="token comment"># todo AR4：查看BGP邻居关系</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>dis bgp peer BGP <span class="token builtin class-name">local</span> router ID <span class="token builtin class-name">:</span> <span class="token number">34.1</span>.1.4 Local AS number <span class="token builtin class-name">:</span> <span class="token number">24</span> Total number of peers <span class="token builtin class-name">:</span> <span class="token number">2</span>  Peers <span class="token keyword">in</span> established state <span class="token builtin class-name">:</span> <span class="token number">2</span>  Peer            V          AS  MsgRcvd  MsgSent  OutQ  Up/Down       State Pre fRcv  <span class="token number">34.1</span>.1.3        <span class="token number">4</span>          <span class="token number">24</span>        <span class="token number">3</span>        <span class="token number">4</span>     <span class="token number">0</span> 00:00:11 Established       <span class="token number">1</span>  <span class="token number">64.1</span>.1.6        <span class="token number">4</span>          <span class="token number">24</span>        <span class="token number">3</span>        <span class="token number">3</span>     <span class="token number">0</span> 00:00:11 Established       <span class="token number">1</span><span class="token comment"># todo AR4：查看BGP路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>dis bgp rou BGP Local router ID is <span class="token number">34.1</span>.1.4  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">3</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">64.1</span>.1.6                   <span class="token number">120</span>        <span class="token number">0</span>      1i * i                     <span class="token number">34.1</span>.1.3                   <span class="token number">100</span>        <span class="token number">0</span>      1i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">0.0</span>.0.0         <span class="token number">0</span>                     <span class="token number">0</span>      i</code></pre><p>可以看到AR4到<code>64.1.1.6</code>的下一跳的<code>LocPrf</code>变为120</p><ul><li><strong>STEP4.5：</strong> 删除配置</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR6：删除配置</span><span class="token punctuation">[</span>R6-bgp<span class="token punctuation">]</span>un peer <span class="token number">64.1</span>.1.4 route-policy LP <span class="token builtin class-name">export</span></code></pre><h3 id="实验二-3-：BGP属性-经过的所有AS号矢量AS-Path"><a href="#实验二-3-：BGP属性-经过的所有AS号矢量AS-Path" class="headerlink" title="实验二$_3$：BGP属性:经过的所有AS号矢量AS-Path"></a><strong>实验二$_3$：BGP属性:经过的所有AS号矢量AS-Path</strong></h3><p>AS-Path用于防环，经过的AS越少，那么路由越优先</p><p>AS-Path只能在EBGP间使用(In和Out可以使用)，不能在IBGP间使用。</p><p>AS-Path只能加，不能减。这意味着，如果想让一个路径最优，不能减少这个路径的Path值，只能让另一条路径的Path值增加。</p><ul><li><strong>STEP5.0：</strong> 修改AS-Path</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：查看BGP路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">4</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i *                       <span class="token number">26.1</span>.1.6                              <span class="token number">0</span>      24i   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i<span class="token comment"># todo AR3：配置前缀列表</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>ip ip-prefix dcm4 permit <span class="token number">4.4</span>.4.4 <span class="token number">32</span><span class="token comment"># todo AR3：配置路由策略</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>route-policy AS permit <span class="token function">node</span> <span class="token number">10</span>Info: New Sequence of this List.<span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>if-match ip-prefix dcm4  <span class="token comment"># 应用前缀列表</span><span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>apply as-path ?  INTEGER<span class="token operator">&lt;</span><span class="token number">1</span>-429496729<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>  AS number <span class="token keyword">in</span> asplain <span class="token function">format</span> <span class="token punctuation">(</span>number<span class="token operator">&lt;</span><span class="token number">1</span>-429496729<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span><span class="token punctuation">)</span>  STRING<span class="token operator">&lt;</span><span class="token number">3</span>-1<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>           AS number <span class="token keyword">in</span> asdot <span class="token function">format</span>                                                       <span class="token punctuation">(</span>number<span class="token operator">&lt;</span><span class="token number">1</span>-6553<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>.number<span class="token operator">&lt;</span><span class="token number">0</span>-6553<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span><span class="token punctuation">)</span>  none                   Clear as-path list<span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>apply as-path <span class="token number">24</span> <span class="token number">24</span> ?  INTEGER<span class="token operator">&lt;</span><span class="token number">1</span>-429496729<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>  AS number <span class="token keyword">in</span> asplain <span class="token function">format</span> <span class="token punctuation">(</span>number<span class="token operator">&lt;</span><span class="token number">1</span>-429496729<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span><span class="token punctuation">)</span>  STRING<span class="token operator">&lt;</span><span class="token number">3</span>-1<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>           AS number <span class="token keyword">in</span> asdot <span class="token function">format</span>                                                       <span class="token punctuation">(</span>number<span class="token operator">&lt;</span><span class="token number">1</span>-6553<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span>.number<span class="token operator">&lt;</span><span class="token number">0</span>-6553<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span><span class="token punctuation">)</span>  additive               Append to original As Number  overwrite              Overwrite original As Number<span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>apply as-path <span class="token number">24</span> <span class="token number">24</span> additive ?  <span class="token operator">&lt;</span>cr<span class="token operator">&gt;</span>  Please press ENTER to execute <span class="token builtin class-name">command</span> <span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>apply as-path <span class="token number">24</span> <span class="token number">24</span> additive  <span class="token comment"># 修改as-path</span><span class="token comment"># todo AR3：BGP应用路由策略</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>bgp <span class="token number">24</span><span class="token punctuation">[</span>R3-bgp<span class="token punctuation">]</span>peer <span class="token number">23.1</span>.1.2 route-policy AS <span class="token builtin class-name">export</span> <span class="token comment"># todo AR2：重启BGP邻居关系</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>reset bgp all graceful <span class="token comment"># todo AR2：查看BGP路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">4</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">26.1</span>.1.6                              <span class="token number">0</span>      24i *                       <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      <span class="token number">24</span> <span class="token number">24</span> 24i   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i</code></pre><p>注：<br>1.additive：在原来AS-Path上增加几个AS-Path，这样既防环，又不会因为水平分割而无法进入某些AS中<br>2.修改AS-Path前，只有一个24<br>3.修改AS-Path后，一共3个24，如果用override就是覆盖，就只有2个24</p><ul><li><strong>STEP5.1：</strong> 删除配置</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：删除配置</span><span class="token punctuation">[</span>R3-bgp<span class="token punctuation">]</span>un peer <span class="token number">23.1</span>.1.2 route-policy AS <span class="token builtin class-name">export</span></code></pre><h3 id="实验二-4-：BGP属性-起源属性Origin"><a href="#实验二-4-：BGP属性-起源属性Origin" class="headerlink" title="实验二$_4$：BGP属性:起源属性Origin"></a><strong>实验二$_4$：BGP属性:起源属性Origin</strong></h3><p>起源属性Origin全局范围有效<br>优先级由高到低：i（IBGP） &gt; e（EBGP） &gt; ?（重分发）</p><ul><li><strong>STEP6.0：</strong> 修改起源属性Origin</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>route-policy OR permit <span class="token function">node</span> <span class="token number">10</span>Info: New Sequence of this List.<span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>if-match ip-prefix dcm4<span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>apply origin ?  egp         Remote EGP  igp         Local IGP  incomplete  Unknown heritage<span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>apply origin incomplete<span class="token comment"># todo AR3：</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>bgp <span class="token number">24</span><span class="token punctuation">[</span>R3-bgp<span class="token punctuation">]</span>peer <span class="token number">23.1</span>.1.2 route-policy OR <span class="token builtin class-name">export</span> <span class="token comment"># todo AR2：查看BGP路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">4</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i *                       <span class="token number">26.1</span>.1.6                              <span class="token number">0</span>      24i   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i<span class="token comment"># todo AR2：重置BGP邻居关系</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>reset bgp all<span class="token comment"># todo AR2：查看BGP路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">4</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">26.1</span>.1.6                              <span class="token number">0</span>      24i *                       <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      <span class="token number">24</span>?   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i</code></pre><ul><li><strong>STEP6.1：</strong> 删除配置</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：删除配置</span><span class="token punctuation">[</span>R3-bgp<span class="token punctuation">]</span>un peer <span class="token number">23.1</span>.1.2 route-policy OR <span class="token builtin class-name">export</span> </code></pre><p>STEAM上的编程游戏：Linux】Hacknet、while True: learn()、汇编】SHENZHEN I/O</p><h3 id="实验二-5-：BGP属性-代价值MED"><a href="#实验二-5-：BGP属性-代价值MED" class="headerlink" title="实验二$_5$：BGP属性:代价值MED"></a><strong>实验二$_5$：BGP属性:代价值MED</strong></h3><p>重分发进来的路由条目的度量值，在<strong>AS内</strong>有效，即EBGP之间</p><ul><li><strong>STEP7：</strong> 配置MED(静态路由&amp;路由引入)</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：静态路由</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>ip route-static <span class="token number">11.11</span>.11.11 <span class="token number">32</span> NULL <span class="token number">0</span><span class="token comment"># todo AR1：设置路由引入的MED</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>bgp <span class="token number">1</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>import-route static ?    med           Med <span class="token keyword">for</span> imported route  route-policy  Specify a route policy  <span class="token operator">&lt;</span>cr<span class="token operator">&gt;</span>          Please press ENTER to execute <span class="token builtin class-name">command</span> <span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>import-route static med <span class="token number">666</span><span class="token comment"># todo AR2：查看EBGP的BGP路由表</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">5</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i *                       <span class="token number">26.1</span>.1.6                              <span class="token number">0</span>      24i *<span class="token operator">&gt;</span>i  <span class="token number">11.11</span>.11.11/32     <span class="token number">12.1</span>.1.1        <span class="token number">666</span>        <span class="token number">100</span>        <span class="token number">0</span>      ?   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i<span class="token comment"># todo AR4：查看IBGP的BGP路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>dis bgp rou BGP Local router ID is <span class="token number">34.1</span>.1.4  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">5</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">34.1</span>.1.3                   <span class="token number">100</span>        <span class="token number">0</span>      1i * i                     <span class="token number">64.1</span>.1.6                   <span class="token number">100</span>        <span class="token number">0</span>      1i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">0.0</span>.0.0         <span class="token number">0</span>                     <span class="token number">0</span>      i *<span class="token operator">&gt;</span>i  <span class="token number">11.11</span>.11.11/32     <span class="token number">34.1</span>.1.3                   <span class="token number">100</span>        <span class="token number">0</span>      <span class="token number">1</span>? * i                     <span class="token number">64.1</span>.1.6                   <span class="token number">100</span>        <span class="token number">0</span>      <span class="token number">1</span>?</code></pre><h2 id="实验三：BGP链路聚合"><a href="#实验三：BGP链路聚合" class="headerlink" title="实验三：BGP链路聚合"></a><strong>实验三：BGP链路聚合</strong></h2><p>BGP聚合方式：自动聚合、手动聚合<br>BGP只能对<strong>重分发</strong>进来的路由条目进行聚合，且全部按<strong>主类网络掩码</strong>进行聚合</p><ul><li><strong>STEP8.0：</strong> 配置链路聚合(自动聚合)</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置链路自动聚合</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>summary automatic Info: Automatic summarization is valid only <span class="token keyword">for</span> the routes imported through the import-route command.<span class="token comment"># todo AR2：查看BGP路由表</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">5</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i *                       <span class="token number">26.1</span>.1.6                              <span class="token number">0</span>      24i *<span class="token operator">&gt;</span>i  <span class="token number">11.0</span>.0.0           <span class="token number">12.1</span>.1.1                   <span class="token number">100</span>        <span class="token number">0</span>      ?   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i</code></pre><ul><li><strong>STEP8.1：</strong> 配置链路聚合(手动聚合)</li></ul><p>先添加聚合需要使用的环回地址：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置环回地址</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>int lo <span class="token number">5</span><span class="token punctuation">[</span>R1-LoopBack5<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.0</span>.0.1 <span class="token number">24</span><span class="token punctuation">[</span>R1-LoopBack5<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.0</span>.1.1 <span class="token number">24</span> sub<span class="token punctuation">[</span>R1-LoopBack5<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.0</span>.2.1 <span class="token number">24</span> sub<span class="token punctuation">[</span>R1-LoopBack5<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.0</span>.3.1 <span class="token number">24</span> sub<span class="token comment"># todo AR1：BGP宣告网段</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>bgp <span class="token number">1</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>network <span class="token number">10.0</span>.0.1 <span class="token number">24</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>network <span class="token number">10.0</span>.1.1 <span class="token number">24</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>network <span class="token number">10.0</span>.2.1 <span class="token number">24</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>network <span class="token number">10.0</span>.3.1 <span class="token number">24</span><span class="token comment"># todo AR2：查看BGP路由表</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">9</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i *                       <span class="token number">26.1</span>.1.6                              <span class="token number">0</span>      24i *<span class="token operator">&gt;</span>i  <span class="token number">10.0</span>.0.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>i  <span class="token number">10.0</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>i  <span class="token number">10.0</span>.2.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>i  <span class="token number">10.0</span>.3.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>i  <span class="token number">11.0</span>.0.0           <span class="token number">12.1</span>.1.1                   <span class="token number">100</span>        <span class="token number">0</span>      ?   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i</code></pre><p>此时AR2学到的是明细路由，这种情况该使用手动聚合：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置手动聚合</span><span class="token punctuation">[</span>R1-bgp<span class="token punctuation">]</span>aggregate <span class="token number">10.0</span>.0.0 <span class="token number">22</span> detail-suppressed<span class="token comment"># todo AR2：查看BGP路由表</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">12.1</span>.1.2  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">9</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>   <span class="token number">4.4</span>.4.4/32         <span class="token number">23.1</span>.1.3                              <span class="token number">0</span>      24i *                       <span class="token number">26.1</span>.1.6                              <span class="token number">0</span>      24i *<span class="token operator">&gt;</span>i  <span class="token number">10.0</span>.0.0/22        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i *<span class="token operator">&gt;</span>i  <span class="token number">11.0</span>.0.0           <span class="token number">12.1</span>.1.1                   <span class="token number">100</span>        <span class="token number">0</span>      ?   i  <span class="token number">12.1</span>.1.0/24        <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      i</code></pre><p>detail-suppressed：详细抑制，只有汇总，不要明细<br>如果不加，仍然有明细路由，而且多了一个汇总</p><p><code>undo sync</code><br>同步是用来防止路由黑洞的<br>同步：如果BGP打开了同步，意思是说<br>BGP与IGP的同步功能。</p><p>缺省情况下，同步功能是关闭的。</p><h2 id="BGP路由反射器与联盟"><a href="#BGP路由反射器与联盟" class="headerlink" title="BGP路由反射器与联盟"></a>BGP路由反射器与联盟</h2><h3 id="实验四-1-：路由反射器"><a href="#实验四-1-：路由反射器" class="headerlink" title="实验四$_1$：路由反射器"></a><strong>实验四$_1$：路由反射器</strong></h3><p>RR反射器防环：解决BGP水平分割问题(IBGP和EBGP的水平分割)<br>IBGP水平分割：通过IBGP学习的条目不能再发送给其他IBGP<br>EBGP水平分割：从某个接口上学习来的路由信息将不再从该接口上通告出去。就是从那个口进来的不再从这个口出去。</p><p>路由发射器RR：<br>1.当RR从客户机收到一个路由更新时，会将它发送给客户机和非客户机。<br>2.当RR从非客户机收到一个路由更新时，只发送给客户机路由器，而不发送给其他非客户机路由器<br>3.当RR从EBGP收到一个路由更新时，会将它发送给客户机和非客户机。</p><ul><li><strong>STEP1.0：</strong> 网络拓扑</li></ul><p>直接打开老师拓扑：</p><img src="/2022/06/29/ict-zhan-dui-di-9-ci-bi-ji/5d9cd2cec6bc4b1d8f2dbc0185c9cb1f.png"><p>设备角色：R3服务器，其余客户机</p><ul><li><p><strong>STEP1.1：</strong> 改名(略)</p></li><li><p><strong>STEP2：</strong> 配置路由发射器</p></li></ul><p><strong>目的</strong>：AR4从IBGP学习到1.1.1.1条目</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR4：查看BGP路由表</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>dis bgp rou  <span class="token comment"># 目前没有BGP路由条目</span><span class="token comment"># todo AR3：设置RR和Client</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>bgp <span class="token number">2</span>     <span class="token punctuation">[</span>R3-bgp<span class="token punctuation">]</span>peer <span class="token number">23.1</span>.1.2 reflect-client  <span class="token comment"># 设置为RR，23.1.1.2为client</span><span class="token comment"># todo AR4：查看BGP路由表</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">34.1</span>.1.4  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">1</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      1i<span class="token comment"># todo AR3：设置RR和Client</span><span class="token punctuation">[</span>R3-bgp<span class="token punctuation">]</span>peer <span class="token number">34.1</span>.1.4 reflect-client  <span class="token comment"># 设置为RR，34.1.1.4为client</span></code></pre><p><strong>目的</strong>：AR5从IBGP学习到<code>1.1.1.1</code>条目</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR5：查看BGP路由表</span><span class="token punctuation">[</span>R5<span class="token punctuation">]</span>dis bgp rou  <span class="token comment"># 目前没有BGP路由条目</span><span class="token comment"># todo AR4：设置RR和Client</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>bgp <span class="token number">2</span><span class="token punctuation">[</span>R4-bgp<span class="token punctuation">]</span>peer <span class="token number">45.1</span>.1.5 reflect-client  <span class="token comment"># 设置为RR，45.1.1.5为client</span><span class="token comment"># todo AR5：查看BGP路由表</span><span class="token punctuation">[</span>R5<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">45.1</span>.1.5  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">1</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      1i<span class="token comment"># todo AR5：BGP详细信息</span><span class="token punctuation">[</span>R5<span class="token punctuation">]</span>dis bgp rou <span class="token number">1.1</span>.1.1 BGP <span class="token builtin class-name">local</span> router ID <span class="token builtin class-name">:</span> <span class="token number">45.1</span>.1.5 Local AS number <span class="token builtin class-name">:</span> <span class="token number">2</span> Paths:   <span class="token number">1</span> available, <span class="token number">1</span> best, <span class="token number">1</span> <span class="token keyword">select</span> BGP routing table entry information of <span class="token number">1.1</span>.1.1/32: From: <span class="token number">45.1</span>.1.4 <span class="token punctuation">(</span><span class="token number">34.1</span>.1.4<span class="token punctuation">)</span> Route Duration: 00h01m00s   Relay IP Nexthop: <span class="token number">45.1</span>.1.4 Relay IP Out-Interface: GigabitEthernet0/0/0 Original nexthop: <span class="token number">12.1</span>.1.1 Qos information <span class="token builtin class-name">:</span> 0x0 AS-path <span class="token number">1</span>, origin igp, MED <span class="token number">0</span>, localpref <span class="token number">100</span>, pref-val <span class="token number">0</span>, valid, internal, best, select, active, pre <span class="token number">255</span>, IGP cost <span class="token number">4</span> Originator:  <span class="token number">12.1</span>.1.2 Cluster list: <span class="token number">34.1</span>.1.4, <span class="token number">23.1</span>.1.3 Not advertised to any peer yet</code></pre><h3 id="实验四-2-：联邦"><a href="#实验四-2-：联邦" class="headerlink" title="实验四$_2$：联邦"></a><strong>实验四$_2$：联邦</strong></h3><p>大AS中建立小AS，AS外部建立邻居关系通过大AS，</p><ul><li><p>AS1：</p><ul><li>AR1</li></ul></li><li><p>AS2：</p><ul><li>64512：AR2、AR3</li><li>64513：AR4、AR5</li></ul></li><li><p><strong>STEP3.0：</strong> 删除旧的BGP配置</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：删除旧的BGP配置</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>un bgp <span class="token number">2</span>Warning: All BGP configurations will be deleted. Continue? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span>: y<span class="token comment"># todo AR3：删除旧的BGP配置</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>un bgp <span class="token number">2</span>Warning: All BGP configurations will be deleted. Continue? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span>: y<span class="token comment"># todo AR4：删除旧的BGP配置</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>undo bgp <span class="token number">2</span>Warning: All BGP configurations will be deleted. Continue? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span>: y<span class="token comment"># todo AR5：删除旧的BGP配置</span><span class="token punctuation">[</span>R5<span class="token punctuation">]</span>undo bgp <span class="token number">2</span>Warning: All BGP configurations will be deleted. Continue? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span>: y</code></pre><ul><li><strong>STEP3.1：</strong> 配置联邦</li></ul><p><strong>目的</strong>：让AR2和AR3建立IBGP邻居关系，AR2和AR1建立EBGP邻居关系，AR3和AR4建立EBGP邻居关系</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：配置联邦</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>bgp <span class="token number">64512</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>confederation <span class="token function">id</span> <span class="token number">2</span>  <span class="token comment"># 声明大AS号</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>peer <span class="token number">23.1</span>.1.3 as-number <span class="token number">64512</span>  <span class="token comment"># 建立IBGP关系</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>peer <span class="token number">12.1</span>.1.1 as-number <span class="token number">1</span>  <span class="token comment"># 建立EBGP关系</span><span class="token comment"># todo AR3：配置联邦</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>bgp <span class="token number">64512</span><span class="token punctuation">[</span>R3-bgp<span class="token punctuation">]</span>confederation <span class="token function">id</span> <span class="token number">2</span>  <span class="token comment"># 声明大AS号</span><span class="token punctuation">[</span>R3-bgp<span class="token punctuation">]</span>peer <span class="token number">23.1</span>.1.2 as-number <span class="token number">64512</span>  <span class="token comment"># 建立EBGP关系</span><span class="token punctuation">[</span>R3-bgp<span class="token punctuation">]</span>peer <span class="token number">34.1</span>.1.4 as-number <span class="token number">64513</span>  <span class="token comment"># 建立IBGP关系</span><span class="token comment"># todo AR2：查看BGP邻居关系</span><span class="token punctuation">[</span>R2-bgp<span class="token punctuation">]</span>dis bgp peer BGP <span class="token builtin class-name">local</span> router ID <span class="token builtin class-name">:</span> <span class="token number">12.1</span>.1.2 Local AS number <span class="token builtin class-name">:</span> <span class="token number">16</span> Total number of peers <span class="token builtin class-name">:</span> <span class="token number">1</span>                Peers <span class="token keyword">in</span> established state <span class="token builtin class-name">:</span> <span class="token number">1</span>  Peer            V          AS  MsgRcvd  MsgSent  OutQ  Up/Down       State PrefRcv  <span class="token number">12.1</span>.1.1        <span class="token number">4</span>           <span class="token number">1</span>        <span class="token number">3</span>        <span class="token number">2</span>      <span class="token number">0</span> 00:00:50 Established       <span class="token number">1</span>  <span class="token number">23.1</span>.1.3        <span class="token number">4</span>       <span class="token number">64512</span>        <span class="token number">6</span>        <span class="token number">8</span>      <span class="token number">0</span> 00:24:20 Established       <span class="token number">0</span><span class="token comment"># todo AR1：查看BGP邻居关系</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>dis bgp peer BGP <span class="token builtin class-name">local</span> router ID <span class="token builtin class-name">:</span> <span class="token number">12.1</span>.1.1 Local AS number <span class="token builtin class-name">:</span> <span class="token number">1</span> Total number of peers <span class="token builtin class-name">:</span> <span class="token number">1</span>                Peers <span class="token keyword">in</span> established state <span class="token builtin class-name">:</span> <span class="token number">0</span>  Peer            V          AS  MsgRcvd  MsgSent  OutQ  Up/Down       State PrefRcv  <span class="token number">12.1</span>.1.2        <span class="token number">4</span>           <span class="token number">2</span>        <span class="token number">0</span>        <span class="token number">0</span>     <span class="token number">0</span> 00:06:36      Active       <span class="token number">0</span></code></pre><p>此时，AR1的邻居<code>12.1.1.1</code>的AS号为2，没问题。<br>但是AR3的AS号为64513，对AR4来说，AR4不知道AR3的AS号64513是大AS还是小AS，就用AS2建立邻居关系，邻居关系就建立不起来，因此需要使用以下命令，让AS号为64512和AS号为64513的路由器建立邻居关系</p><ul><li><strong>STEP3.2：</strong> 配置联邦</li></ul><p><strong>目的</strong>：让AR3和AR4建立IBGP邻居关系，AR4和AR5建立EBGP邻居关系，都和AR1建立IBGP邻居关系</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：配置联邦</span><span class="token punctuation">[</span>R3-bgp<span class="token punctuation">]</span>un peer <span class="token number">34.1</span>.1.4 as-number <span class="token number">64513</span>  <span class="token comment"># 不能先指邻居，应该先confederation peer-as再peer</span><span class="token punctuation">[</span>R3-bgp<span class="token punctuation">]</span>confederation peer-as <span class="token number">64513</span>  <span class="token comment"># 指定属于同一个联盟的各子自治系统号，即让(自己)64512和(对方)64513建立邻居关系使用小AS号</span><span class="token punctuation">[</span>R3-bgp<span class="token punctuation">]</span>peer <span class="token number">34.1</span>.1.4 as-number <span class="token number">64513</span>  <span class="token comment"># 建立EBGP关系</span><span class="token comment"># todo AR4：配置联邦</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>bgp <span class="token number">64513</span><span class="token punctuation">[</span>R4-bgp<span class="token punctuation">]</span>confederation <span class="token function">id</span> <span class="token number">2</span>  <span class="token comment"># 声明大AS号</span><span class="token punctuation">[</span>R4-bgp<span class="token punctuation">]</span>confederation peer-as <span class="token number">64512</span><span class="token punctuation">[</span>R4-bgp<span class="token punctuation">]</span>peer <span class="token number">34.1</span>.1.3 as-number <span class="token number">64512</span>  <span class="token comment"># 建立IBGP关系</span><span class="token punctuation">[</span>R4-bgp<span class="token punctuation">]</span>peer <span class="token number">45.1</span>.1.5 as-number <span class="token number">64513</span>  <span class="token comment"># 建立EBGP关系</span><span class="token comment"># todo AR5：配置联邦</span><span class="token punctuation">[</span>R5<span class="token punctuation">]</span>bgp <span class="token number">64513</span><span class="token punctuation">[</span>R5-bgp<span class="token punctuation">]</span>confederation <span class="token function">id</span> <span class="token number">2</span>  <span class="token comment"># 声明大AS号</span><span class="token punctuation">[</span>R5-bgp<span class="token punctuation">]</span>peer <span class="token number">45.1</span>.1.4 as-number <span class="token number">64513</span>  <span class="token comment"># 建立IBGP关系</span><span class="token comment"># todo AR5：查看BGP路由表</span><span class="token punctuation">[</span>R5-bgp<span class="token punctuation">]</span>dis bgp rou BGP Local router ID is <span class="token number">45.1</span>.1.5  Status codes: * - valid, <span class="token operator">&gt;</span> - best, d - damped,               h - history,  i - internal, s - suppressed, S - Stale               Origin <span class="token builtin class-name">:</span> i - IGP, e - EGP, ? - incomplete Total Number of Routes: <span class="token number">1</span>      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn *<span class="token operator">&gt;</span>i  <span class="token number">1.1</span>.1.1/32         <span class="token number">12.1</span>.1.1        <span class="token number">0</span>          <span class="token number">100</span>        <span class="token number">0</span>      <span class="token punctuation">(</span><span class="token number">64512</span><span class="token punctuation">)</span> 1i</code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> ICT战队数据通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HCIA </tag>
            
            <tag> 华为eNSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICT战队-第8次笔记</title>
      <link href="/2022/06/29/ict-zhan-dui-di-8-ci-bi-ji/"/>
      <url>/2022/06/29/ict-zhan-dui-di-8-ci-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="ICT战队-第8次笔记"><a href="#ICT战队-第8次笔记" class="headerlink" title="ICT战队-第8次笔记"></a>ICT战队-第8次笔记</h1><p>[toc]</p><h2 id="实验一：路由策略-防止次优路径"><a href="#实验一：路由策略-防止次优路径" class="headerlink" title="实验一：路由策略(防止次优路径)"></a><strong>实验一：路由策略</strong>(防止次优路径)</h2><p>注：<br>1.路由注入、路由引入、路由重分发一个东西，都是让两个不同的路由协议互相学习对方的路由条目<br>2.多点双向重分发(多个边界路由器做了路由引入)容易引起次优路径和路由环路等情况，所以要注意<strong>防环</strong><br>3.在哪配置？：让B协议学习A协议(路由条目)，就进入B协议配置路由引入<br>4.不同路由协议之间的好坏比较优先级，相同路由协议之间比较cost</p><ul><li>STEP1.0：网络拓扑</li></ul><p>直接打开老师的拓扑(虽然但是，老师的拓扑没有完全配置好，所以打开拓扑后还要再配置一下)</p><img src="/2022/06/29/ict-zhan-dui-di-8-ci-bi-ji/网络拓扑实验一：次优路径-16564712862691.png"><ul><li>STEP1.1：AR2配置环回口</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：配置环回口地址</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>int lo <span class="token number">0</span><span class="token punctuation">[</span>R2-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">2.2</span>.2.2 <span class="token number">32</span></code></pre><ul><li>STEP1.2：AR2配置路由引入</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：配置路由引入</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>rip<span class="token punctuation">[</span>R2-rip-1<span class="token punctuation">]</span><span class="token punctuation">[</span>R2-rip-1<span class="token punctuation">]</span>import-route ?  bgp     Border Gateway Protocol <span class="token punctuation">(</span>BGP<span class="token punctuation">)</span> routes  direct  Direct routes  isis    Intermediate System to Intermediate System <span class="token punctuation">(</span>ISIS<span class="token punctuation">)</span> routes  ospf    Open Shortest Path First <span class="token punctuation">(</span>OSPF<span class="token punctuation">)</span> routes  rip     Routing Information Protocol <span class="token punctuation">(</span>RIP<span class="token punctuation">)</span> routes  static  Static routes  unr     User Network Route<span class="token punctuation">[</span>R2-rip-1<span class="token punctuation">]</span>import-route direct ?  cost          Cost of the <span class="token function">import</span> route  route-policy  Apply the specified route policy to filter route  <span class="token operator">&lt;</span>cr<span class="token operator">&gt;</span>          Please press ENTER to execute <span class="token builtin class-name">command</span> <span class="token punctuation">[</span>R2-rip-1<span class="token punctuation">]</span>import-route direct</code></pre><ul><li>STEP1.3：删除多余配置</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：删除路由引入配置</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>rip  <span class="token comment"># 进入RIP</span><span class="token punctuation">[</span>R1-rip-1<span class="token punctuation">]</span>un import-route ospf  <span class="token comment"># 删除对OSPF的路由引入</span><span class="token punctuation">[</span>R1-rip-1<span class="token punctuation">]</span>ospf  <span class="token comment"># 进入OSPF</span><span class="token punctuation">[</span>R1-ospf-1<span class="token punctuation">]</span>un import-route rip  <span class="token comment"># 删除对RIP的路由引入</span><span class="token comment"># todo AR3：删除路由引入配置</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>rip  <span class="token comment"># 进入RIP</span><span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>un import-route ospf  <span class="token comment"># 删除对OSPF的路由引入</span><span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>ospf  <span class="token comment"># 进入OSPF</span><span class="token punctuation">[</span>R3-ospf-1<span class="token punctuation">]</span>un import-route rip  <span class="token comment"># 删除对RIP的路由引入</span></code></pre><ul><li>STEP1.4：查看路由表</li></ul><p>边界路由器AR1和AR3都有<code>2.2.2.2</code>和<code>4.4.4.4</code>两个环回地址，但是区域内路由器AR2和AR4只有自己的环回地址</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：查看路由表</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">14</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">14</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">2.2</span>.2.2/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0        <span class="token number">4.4</span>.4.0/24  O_ASE   <span class="token number">150</span>  <span class="token number">1</span>           D   <span class="token number">14.1</span>.1.4        GigabitEthernet0/0/1        ······<span class="token comment"># todo AR2：查看路由表</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">11</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">11</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">2.2</span>.2.2/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0        ······<span class="token comment"># todo AR3：查看路由表</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">14</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">14</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">2.2</span>.2.2/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0        <span class="token number">4.4</span>.4.0/24  O_ASE   <span class="token number">150</span>  <span class="token number">1</span>           D   <span class="token number">34.1</span>.1.4        GigabitEthernet0/0/1        ······<span class="token comment"># todo AR4：查看路由表</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">13</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">13</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interfaces        <span class="token number">4.4</span>.4.0/24  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">4.4</span>.4.4         LoopBack0        ······</code></pre><ul><li>STEP2.0：一个ABR配置路由引入</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置路由引入</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>rip<span class="token punctuation">[</span>R1-rip-1<span class="token punctuation">]</span>import-route ospf<span class="token punctuation">[</span>R1-rip-1<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>R1-ospf-1<span class="token punctuation">]</span>import-route rip</code></pre><ul><li>STEP2.1：查看路由表</li></ul><p>AR1路由表<strong>不变</strong>，AR2和AR4路由表<strong>增加</strong>了对方环回地址的路由条目，AR3到<code>4.4.4.4</code>的路由条目<strong>改变</strong>，因为RIP比O_ASE的优先级更低(越低越优先)</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：查看路由表</span><span class="token punctuation">[</span>R1-ospf-1<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">14</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">14</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">2.2</span>.2.2/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0        <span class="token number">4.4</span>.4.0/24  O_ASE   <span class="token number">150</span>  <span class="token number">1</span>           D   <span class="token number">14.1</span>.1.4        GigabitEthernet0/0/1        ······<span class="token comment"># todo AR2：查看路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">14</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">14</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">2.2</span>.2.2/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0        <span class="token number">4.4</span>.4.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.1        GigabitEthernet0/0/0        ······<span class="token comment"># todo AR3：查看路由表</span><span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">14</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">14</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">2.2</span>.2.2/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0        <span class="token number">4.4</span>.4.0/24  RIP     <span class="token number">100</span>  <span class="token number">2</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0        ······<span class="token comment"># todo AR4：查看路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">4</span>&gt;</span>dis <span class="token function">ip</span> rou  Route Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">16</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">16</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">2.2</span>.2.2/32  O_ASE   <span class="token number">150</span>  <span class="token number">1</span>           D   <span class="token number">14.1</span>.1.1        GigabitEthernet0/0/1        <span class="token number">4.4</span>.4.0/24  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">4.4</span>.4.4         LoopBack0        ······</code></pre><ul><li>STEP2.2：另一个ABR配置路由引入</li></ul><pre class="language-shel" data-language="shel"><code class="language-shel">[R3]rip[R3-rip-1]import-route ospf[R3-rip-1]ospf[R3-ospf-1]import-route rip</code></pre><ul><li>STEP2.3：查看路由表(略)</li></ul><p>AR1和AR3路由表<strong>不变</strong>，AR2和AR4路由表<strong>增加</strong>了负载均衡的路由条目</p><blockquote><p>为什么AR3不学习更优路径？<br>因为OSPF重分发后，优先级变成3类LSA的150，比优先级为100的RIP更大，根据越小越优先，所以选择RIP。而且RIP有水平分割(默认开启)，AR3从AR2中学习到的<code>4.4.4.4</code>不会再发送更新给AR2。</p></blockquote><p>AR4发更新给AR1和AR3，这俩再发给AR2，此时AR2就有负载均衡的路由条目<br>此时再开启AR3的路由引入，无法更新更优的路径，因为已经存在一条路径</p><ul><li>STEP3.0：AR3配置路由策略</li></ul><p><strong>路由策略配置思路</strong>：ACL嵌套到路由策略中，路由策略再被OSPF等协议调用<br>例AR3：【除了策略路由里面的优先级设为99，其他优先级全部设为150(默认)，即把优先级默认设置为150，<code>4.4.4.0</code>设置为99】<br>设置ACL规则：1.匹配<code>4.4.4.0</code>，2.拒绝其他网段<br>路由策略选择响应ACL，并优先级设置为99</p><p>路由策略有两个动作：match和apply<br>只要不match就是match any</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># show 命令：查看ACL和路由策略</span>dis acl alldis route-policy</code></pre><p>ACL步长5自增，而路由策略node值必须手写</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：配置ACL</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>acl <span class="token number">2000</span><span class="token punctuation">[</span>R3-acl-basic-2000<span class="token punctuation">]</span>rule permit <span class="token builtin class-name">source</span> <span class="token number">4.4</span>.4.0 <span class="token number">0.0</span>.0.244<span class="token punctuation">[</span>R3-acl-basic-2000<span class="token punctuation">]</span>rule deny <span class="token comment"># todo AR3：配置路由策略</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>route-policy ciyou permit <span class="token function">node</span> <span class="token number">10</span>  <span class="token comment"># 路由策略名字随便取，但是一定要记得</span>Info: New Sequence of this List.<span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>if-match acl <span class="token number">2000</span>  <span class="token comment"># 路由策略匹配4.4.4.0的地址</span><span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>apply preference <span class="token number">99</span>  <span class="token comment"># 设置优先级为99</span><span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>R3-ospf-1<span class="token punctuation">]</span>preference ase route-policy ciyou <span class="token number">150</span>  <span class="token comment"># 设置优先级：路由策略中的为99，其余为150(默认，不写也行)</span><span class="token comment"># todo AR3：查看完整配置</span><span class="token punctuation">[</span>R3-ospf-1<span class="token punctuation">]</span>dis th<span class="token punctuation">[</span>V200R003C00<span class="token punctuation">]</span><span class="token comment">#</span>ospf <span class="token number">1</span>  import-route rip <span class="token number">1</span> preference ase route-policy ciyou <span class="token number">150</span>  area <span class="token number">0.0</span>.0.0   network <span class="token number">34.1</span>.1.0 <span class="token number">0.0</span>.0.255 <span class="token comment">#</span><span class="token builtin class-name">return</span></code></pre><ul><li>STEP3.1：查看路由表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：查看路由表</span><span class="token punctuation">[</span>R1-rip-1<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">14</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">14</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">2.2</span>.2.2/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0        <span class="token number">4.4</span>.4.0/24  O_ASE   <span class="token number">150</span>  <span class="token number">1</span>           D   <span class="token number">14.1</span>.1.4        GigabitEthernet0/0/1        ······<span class="token comment"># todo AR3：查看路由表</span><span class="token punctuation">[</span>R3-ospf-1<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">16</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">16</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">2.2</span>.2.2/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0        <span class="token number">4.4</span>.4.0/24  O_ASE   <span class="token number">99</span>   <span class="token number">1</span>           D   <span class="token number">34.1</span>.1.4        GigabitEthernet0/0/1        ······</code></pre><p>此时暂时没有次优路径，但是如果AR1和AR2断开再重连，就可能出现次优路径了，因为如果AR1先发送更新给AR2，那就没有问题；如果AR3先发送更新给AR2，就出现次优路径，所以还要配置AR1。</p><ul><li>STEP3.2：AR1配置路由策略</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置ACL</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>acl <span class="token number">2000</span><span class="token punctuation">[</span>R1-acl-basic-2000<span class="token punctuation">]</span>rule permit <span class="token builtin class-name">source</span> <span class="token number">4.4</span>.4.0 <span class="token number">0.0</span>.0.255<span class="token punctuation">[</span>R1-acl-basic-2000<span class="token punctuation">]</span>rule deny <span class="token comment"># todo AR1：配置路由策略</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>route-policy cy-rip permit <span class="token function">node</span> <span class="token number">10</span>  <span class="token comment"># 路由策略</span>Info: New Sequence of this List.<span class="token punctuation">[</span>R1-route-policy<span class="token punctuation">]</span>if-match acl <span class="token number">2000</span><span class="token punctuation">[</span>R1-route-policy<span class="token punctuation">]</span>apply preference <span class="token number">151</span><span class="token punctuation">[</span>R1-route-policy<span class="token punctuation">]</span>rip<span class="token punctuation">[</span>R1-rip-1<span class="token punctuation">]</span>preference route-policy cy-rip <span class="token number">100</span>  <span class="token comment"># 默认100</span><span class="token comment"># todo AR1：查看完整配置</span><span class="token punctuation">[</span>R1-rip-1<span class="token punctuation">]</span>dis th<span class="token punctuation">[</span>V200R003C00<span class="token punctuation">]</span><span class="token comment">#</span>rip <span class="token number">1</span> undo summary version <span class="token number">2</span> network <span class="token number">12.0</span>.0.0 preference route-policy cy-rip  <span class="token comment"># 默认100</span> import-route ospf <span class="token number">1</span><span class="token comment">#</span><span class="token builtin class-name">return</span></code></pre><ul><li>STEP3.3：查看路由表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：查看路由表</span><span class="token punctuation">[</span>R1-rip-1<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">14</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">14</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">2.2</span>.2.2/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0        <span class="token number">4.4</span>.4.0/24  O_ASE   <span class="token number">150</span>  <span class="token number">1</span>           D   <span class="token number">14.1</span>.1.4        GigabitEthernet0/0/1        ······<span class="token comment"># todo AR3：查看路由表 </span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">14</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">14</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">2.2</span>.2.2/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0        <span class="token number">4.4</span>.4.0/24  O_ASE   <span class="token number">99</span>   <span class="token number">1</span>           D   <span class="token number">34.1</span>.1.4        GigabitEthernet0/0/1        ······</code></pre><h2 id="实验二：路由过滤-防止引入环路"><a href="#实验二：路由过滤-防止引入环路" class="headerlink" title="实验二：路由过滤(防止引入环路)"></a><strong>实验二：路由过滤</strong>(防止引入环路)</h2><p>路由过滤：重分发RIP进入OSPF的条目不会再从OSPF进入RIP<br>打标：过滤特定标签</p><ul><li>STEP1.0：网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-8-ci-bi-ji/网络拓扑实验二-16564712862702.png"><ul><li>STEP1.1：查看配置</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">dis cur con ripdis <span class="token function">ip</span> int bri</code></pre><ul><li>STEP1.2：AR6配置重分发</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR6：配置重分发</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>rip  <span class="token comment"># 进入RIP</span><span class="token punctuation">[</span>R6-rip-1<span class="token punctuation">]</span>import-route direct cost <span class="token number">4</span>  <span class="token comment"># 路由引入，设置cost为4</span></code></pre><ul><li>STEP1.3：AR2查看路由表</li></ul><p>本来AR2到<code>6.6.6.6</code>应该是直连，但是AR2把更新发送给AR3，AR3发给AR4，AR发给AR1，AR1发给AR2，最终AR2到<code>6.6.6.6</code>的下一跳变成了AR1，即<code>12.1.1.1</code>，这样就形成了<strong>路由环路</strong>。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：查看路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">17</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">20</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">4.4</span>.4.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.1        GigabitEthernet0/0/0                    RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.3        GigabitEthernet0/0/1        <span class="token number">6.6</span>.6.6/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.1        GigabitEthernet0/0/0        ······</code></pre><ul><li>STEP1.4：测试路由环路</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：测试路由环路</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>tracert <span class="token number">6.6</span>.6.6 <span class="token function">traceroute</span> to  <span class="token number">6.6</span>.6.6<span class="token punctuation">(</span><span class="token number">6.6</span>.6.6<span class="token punctuation">)</span>, max hops: <span class="token number">30</span> ,packet length: <span class="token number">40</span>,press CTRL_C to <span class="token builtin class-name">break</span>  <span class="token number">1</span> <span class="token number">12.1</span>.1.1 <span class="token number">20</span> ms  <span class="token number">20</span> ms  <span class="token number">30</span> ms  <span class="token number">2</span> <span class="token number">14.1</span>.1.4 <span class="token number">20</span> ms  <span class="token number">20</span> ms  <span class="token number">30</span> ms  <span class="token number">3</span> <span class="token number">34.1</span>.1.3 <span class="token number">30</span> ms  <span class="token number">30</span> ms  <span class="token number">30</span> ms  <span class="token number">4</span> <span class="token number">23.1</span>.1.2 <span class="token number">40</span> ms  <span class="token number">20</span> ms  <span class="token number">20</span> ms ······<span class="token number">27</span> <span class="token number">34.1</span>.1.3 <span class="token number">120</span> ms  <span class="token number">140</span> ms  <span class="token number">110</span> ms <span class="token number">28</span> <span class="token number">23.1</span>.1.2 <span class="token number">140</span> ms  <span class="token number">130</span> ms  <span class="token number">130</span> ms <span class="token number">29</span> <span class="token number">12.1</span>.1.1 <span class="token number">150</span> ms  <span class="token number">140</span> ms  <span class="token number">130</span> ms <span class="token number">30</span> <span class="token number">14.1</span>.1.4 <span class="token number">120</span> ms  <span class="token number">140</span> ms  <span class="token number">150</span> ms <span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span></code></pre><ul><li>STEP1.5：配置路由过滤思路</li></ul><img src="/2022/06/29/ict-zhan-dui-di-8-ci-bi-ji/路由策略思路-16564712862713.png"><ul><li>STEP2.0：AR1配置路由过滤策略</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：路由策略</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>route-policy r-o deny <span class="token function">node</span> <span class="token number">10</span>  <span class="token comment"># RIP-&gt;OSPF</span>Info: New Sequence of this List.<span class="token punctuation">[</span>R1-route-policy<span class="token punctuation">]</span>if-match tag <span class="token number">40</span>  <span class="token comment"># deny if-match</span><span class="token punctuation">[</span>R1-route-policy<span class="token punctuation">]</span>q<span class="token punctuation">[</span>R1<span class="token punctuation">]</span>route-policy r-o permit <span class="token function">node</span> <span class="token number">20</span>  <span class="token comment"># RIP-&gt;OSPF</span>Info: New Sequence of this List.<span class="token punctuation">[</span>R1-route-policy<span class="token punctuation">]</span>apply tag <span class="token number">10</span>  <span class="token comment"># permit apply</span><span class="token punctuation">[</span>R1-route-policy<span class="token punctuation">]</span>q<span class="token punctuation">[</span>R1<span class="token punctuation">]</span>route-policy o-r deny <span class="token function">node</span> <span class="token number">10</span>  <span class="token comment"># OSPF-&gt;RIP</span>Info: New Sequence of this List.<span class="token punctuation">[</span>R1-route-policy<span class="token punctuation">]</span>if-match tag <span class="token number">30</span>  <span class="token comment"># deny if-match</span><span class="token punctuation">[</span>R1-route-policy<span class="token punctuation">]</span>q<span class="token punctuation">[</span>R1<span class="token punctuation">]</span>route-policy o-r permit <span class="token function">node</span> <span class="token number">20</span>  <span class="token comment"># OSPF-&gt;RIP</span>Info: New Sequence of this List.<span class="token punctuation">[</span>R1-route-policy<span class="token punctuation">]</span>apply tag <span class="token number">20</span>  <span class="token comment"># permit apply</span><span class="token punctuation">[</span>R1-route-policy<span class="token punctuation">]</span>q</code></pre><ul><li>STEP2.1：AR1配置区域启动路由过滤策略</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置区域启动路由过滤策略</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>rip<span class="token punctuation">[</span>R1-rip-1<span class="token punctuation">]</span>import-route ospf route-policy o-r <span class="token punctuation">[</span>R1-rip-1<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>R1-ospf-1<span class="token punctuation">]</span>import-route rip route-policy r-o</code></pre><ul><li>STEP2.2：查看路由特定路由条目详细信息</li></ul><p>命令：<code>dis ip rou [特定地址] verbose</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：查看4.4.4.0条目信息</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>dis <span class="token function">ip</span> rou <span class="token number">4.4</span>.4.0 verRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Table <span class="token builtin class-name">:</span> PublicSummary Count <span class="token builtin class-name">:</span> <span class="token number">2</span>Destination: <span class="token number">4.4</span>.4.0/24     Protocol: RIP              Process ID: <span class="token number">1</span>   Preference: <span class="token number">100</span>                    Cost: <span class="token number">1</span>      NextHop: <span class="token number">12.1</span>.1.1          Neighbour: <span class="token number">12.1</span>.1.1        State: Active Adv              Age: 00h02m14s          Tag: <span class="token number">20</span>                 Priority: low        Label: NULL                QoSInfo: 0x0   IndirectID: 0x0               RelayNextHop: <span class="token number">0.0</span>.0.0           Interface: GigabitEthernet0/0/0     TunnelID: 0x0                   Flags:  DDestination: <span class="token number">4.4</span>.4.0/24     Protocol: RIP              Process ID: <span class="token number">1</span>   Preference: <span class="token number">100</span>                    Cost: <span class="token number">1</span>      NextHop: <span class="token number">23.1</span>.1.3          Neighbour: <span class="token number">23.1</span>.1.3        State: Active Adv              Age: 00h46m47s          Tag: <span class="token number">1</span>                  Priority: low        Label: NULL                QoSInfo: 0x0   IndirectID: 0x0               RelayNextHop: <span class="token number">0.0</span>.0.0           Interface: GigabitEthernet0/0/1     TunnelID: 0x0                   Flags:  D</code></pre><ul><li>STEP2.3：AR3配置路由过滤策略</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：配置路由过滤策略</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>route-policy r-o deny <span class="token function">node</span> <span class="token number">10</span>  <span class="token comment"># RIP-&gt;OSPF</span>Info: New Sequence of this List.<span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>if-match tag <span class="token number">20</span>  <span class="token comment"># deny if-match</span><span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>q<span class="token punctuation">[</span>R3<span class="token punctuation">]</span>route-policy r-o permit <span class="token function">node</span> <span class="token number">20</span>  <span class="token comment"># RIP-&gt;OSPF</span>Info: New Sequence of this List.<span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>apply tag <span class="token number">30</span>  <span class="token comment"># permin apply</span><span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>q<span class="token punctuation">[</span>R3<span class="token punctuation">]</span>route-policy o-r deny <span class="token function">node</span> <span class="token number">10</span>  <span class="token comment"># OSPF-&gt;RIP</span>Info: New Sequence of this List.<span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>if-match tag <span class="token number">10</span>  <span class="token comment"># deny if-match</span><span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>q<span class="token punctuation">[</span>R3<span class="token punctuation">]</span>route-policy o-r permit <span class="token function">node</span> <span class="token number">20</span>  <span class="token comment"># OSPF-&gt;RIP</span>Info: New Sequence of this List.<span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>apply tag <span class="token number">40</span>  <span class="token comment"># permin apply</span><span class="token punctuation">[</span>R3-route-policy<span class="token punctuation">]</span>q</code></pre><ul><li>STEP2.4：AR3配置区域启动路由过滤策略</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>rip<span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>import-route ospf route-policy o-r<span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>R3-ospf-1<span class="token punctuation">]</span>import-route rip route-policy r-o</code></pre><p>最后最好自己写一个默认策略。</p><p><em>作业：</em> 实验用了两个路由策略解决路由环路，若只用一个路由策略怎么解决？</p><h2 id="实验三：前缀列表-路由路径控制"><a href="#实验三：前缀列表-路由路径控制" class="headerlink" title="实验三：前缀列表(路由路径控制)"></a><strong>实验三：前缀列表</strong>(路由路径控制)</h2><p>前缀列表作用：<strong>过滤</strong></p><h3 id="实验三-1"><a href="#实验三-1" class="headerlink" title="实验三$_1$"></a>实验三$_1$</h3><p>实验目的：<strong>过滤</strong>掉<code>192.168.1.1/32</code>，<strong>保留</strong><code>192.168.1.0/25</code></p><ul><li>STEP1.0：网络拓扑</li></ul><p>直接打开老师的网络拓扑(配置不全，其实好像没影响…)</p><img src="/2022/06/29/ict-zhan-dui-di-8-ci-bi-ji/实验三-16564712862715.png"><ul><li>STEP1.1：完善配置(其实好像应该不用配…)</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：修改OSPF网络类型</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>int lo <span class="token number">0</span><span class="token punctuation">[</span>R1-LoopBack0<span class="token punctuation">]</span>ospf network-type broadcast </code></pre><ul><li>STEP1.2：查看路由表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：查看路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">12</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">12</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">4.4</span>.4.4/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">12.1</span>.1.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">14.1</span>.1.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">23.1</span>.1.0/24  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">23.1</span>.1.3        GigabitEthernet0/0/0       <span class="token number">23.1</span>.1.3/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/0     <span class="token number">23.1</span>.1.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/0      <span class="token number">127.0</span>.0.0/8   Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0      <span class="token number">127.0</span>.0.1/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0<span class="token number">127.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0    <span class="token number">192.168</span>.1.0/25  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0    <span class="token number">192.168</span>.1.1/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0<span class="token number">255.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0</code></pre><p>路由表中有<code>192.168.1.0/25</code>和<code>192.168.1.1/32</code></p><ul><li>STEP2.0：AR3使用路由过滤策略进行路由路径控制</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：配置ACL</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>acl <span class="token number">2000</span><span class="token punctuation">[</span>R3-acl-basic-2000<span class="token punctuation">]</span>rule deny <span class="token builtin class-name">source</span> <span class="token number">192.168</span>.1.0 <span class="token number">0.0</span>.0.63<span class="token punctuation">[</span>R3-acl-basic-2000<span class="token punctuation">]</span>rule permit <span class="token punctuation">[</span>R3-acl-basic-2000<span class="token punctuation">]</span>q<span class="token comment"># todo AR3：配置RIP路由过滤策略</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>rip<span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>filter-policy ?             INTEGER<span class="token operator">&lt;</span><span class="token number">2000</span>-299<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>  Apply basic ACL  acl-name            Specify IP Access Control List <span class="token punctuation">(</span>ACL<span class="token punctuation">)</span> name <span class="token keyword">for</span> filtering                         routes  gateway             Filter routes based on the distributing gateway  ip-prefix           Specify IP prefix <span class="token keyword">for</span> filtering routes<span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>filter-policy <span class="token number">2000</span> ?  <span class="token builtin class-name">export</span>  Specify an <span class="token builtin class-name">export</span> policy  <span class="token function">import</span>  Specify an <span class="token function">import</span> policy<span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>filter-policy <span class="token number">2000</span> <span class="token function">import</span> </code></pre><ul><li>STEP2.1：查看路由表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：查看路由表</span><span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">10</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">10</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">4.4</span>.4.4/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">12.1</span>.1.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">14.1</span>.1.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">23.1</span>.1.0/24  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">23.1</span>.1.3        GigabitEthernet0/0/0       <span class="token number">23.1</span>.1.3/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/0     <span class="token number">23.1</span>.1.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/0      <span class="token number">127.0</span>.0.0/8   Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0      <span class="token number">127.0</span>.0.1/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0<span class="token number">127.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0<span class="token number">255.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0</code></pre><p><code>192.168.1.0/25</code>和<code>192.168.1.1/32</code>都没有，过滤失败。</p><ul><li>STEP2.2：AR3配置前缀列表</li></ul><p>ACL只能基于路由条目的网络号匹配，ACL只能过滤网路号<br>即只要地址匹配，不管掩码，全部按ACL规则进行接收/拒绝<br>所以，在进行路由条目分类不建议使用ACL</p><p>前缀列表：匹配网络号和掩码</p><p>通配符不能不掩码长度大</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>ip ip-prefix ?  STRING<span class="token operator">&lt;</span><span class="token number">1</span>-16<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>  Specify prefix-list name<span class="token punctuation">[</span>R3<span class="token punctuation">]</span>ip ip-prefix dcm ?         deny    Specify a deny rule  index   Set the sequence number of this entry <span class="token keyword">for</span> IP prefix-list  permit  Specify a permit rule<span class="token punctuation">[</span>R3<span class="token punctuation">]</span>ip ip-prefix dcm deny ?  IP_ADDR<span class="token operator">&lt;</span>X.X.X.X<span class="token operator">&gt;</span>  Specify IP-address<span class="token punctuation">[</span>R3<span class="token punctuation">]</span>ip ip-prefix dcm deny <span class="token number">192.168</span>.1.0 ?  INTEGER<span class="token operator">&lt;</span><span class="token number">0</span>-3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>  Mask length<span class="token punctuation">[</span>R3<span class="token punctuation">]</span>ip ip-prefix dcm deny <span class="token number">192.168</span>.1.0 <span class="token number">24</span> ?  greater-equal  Set the greater-than-or-equal-to value of the mask length  less-equal     Set the less-than-or-equal-to value of the mask length  <span class="token operator">&lt;</span>cr<span class="token operator">&gt;</span>           Please press ENTER to execute <span class="token builtin class-name">command</span> <span class="token punctuation">[</span>R3<span class="token punctuation">]</span>ip ip-prefix dcm deny <span class="token number">192.168</span>.1.0 <span class="token number">24</span> greater-equal <span class="token number">26</span> less-equal <span class="token number">26</span><span class="token comment"># 等价于[R3]ip ip-prefix dcm deny 192.168.1.0 26</span></code></pre><ul><li>STEP2.3：AR3查看路由表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：查看路由表</span><span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">11</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">11</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">4.4</span>.4.4/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">12.1</span>.1.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">14.1</span>.1.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">23.1</span>.1.0/24  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">23.1</span>.1.3        GigabitEthernet0/0/0       <span class="token number">23.1</span>.1.3/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/0     <span class="token number">23.1</span>.1.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/0      <span class="token number">127.0</span>.0.0/8   Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0      <span class="token number">127.0</span>.0.1/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0<span class="token number">127.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0    <span class="token number">192.168</span>.1.0/25  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0<span class="token number">255.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0</code></pre><p>可以看到有<code>192.168.1.0/25</code>，没有<code>192.168.1.1/32</code>，说明成功过滤。</p><p>关于前缀列表过滤：<br>RIP随便过滤，OSPF不行，OSPF同一个区域必须保持一致，OSPF只能在进OSPF方向做过滤，即import，不能在出OSPF方向做过滤，即export，只把路由更新更新到数据库，但是不把路由更新加表</p><h3 id="实验三-2"><a href="#实验三-2" class="headerlink" title="实验三$_2$"></a>实验三$_2$</h3><p>实验目的：<strong>过滤</strong>掉C类路由条目</p><p><font color="#999AAA">OSPF重分发默认类型2，每经过路由器度量值不变</font></p><ul><li>STEP1.0：网络拓扑</li></ul><p>直接打开老师的网络拓扑(未配置完全)</p><img src="/2022/06/29/ict-zhan-dui-di-8-ci-bi-ji/实验三-16564712862715.png"><ul><li>STEP1.1：AR2配置重分发</li></ul><pre class="language-SHELL" data-language="SHELL"><code class="language-SHELL"># todo AR2：配置重分发[R2]ospf[R2-ospf-1]import-route rip[R2-ospf-1]import-route direct</code></pre><ul><li>STEP1.2：查看路由表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：查看路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">12</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">12</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface       ······    <span class="token number">192.168</span>.1.0/25  O_ASE   <span class="token number">150</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0    <span class="token number">192.168</span>.1.0/26  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">192.168</span>.1.1     LoopBack0    <span class="token number">192.168</span>.1.1/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0   <span class="token number">192.168</span>.1.63/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0<span class="token number">255.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0</code></pre><p>有<code>192.168.1.0/25</code>这个非直连的C类地址</p><ul><li>STEP2.0：AR1配置前缀列表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置前缀列表</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>ip ip-prefix C deny <span class="token number">192.0</span>.0.0 <span class="token number">3</span> less-equal <span class="token number">32</span>  <span class="token comment"># 前缀列表匹配拒绝C类地址</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>ip ip-prefix C permit <span class="token number">0.0</span>.0.0 <span class="token number">0</span> less-equal <span class="token number">32</span>  <span class="token comment"># 前缀列表匹配默认策略(允许其他所有地址)</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>ospf  <span class="token comment"># 进入OSPF</span><span class="token punctuation">[</span>R1-ospf-1<span class="token punctuation">]</span>filter-policy ip-prefix C <span class="token function">import</span>  <span class="token comment"># 对进入的路由采取前缀列表过滤</span></code></pre><ul><li>STEP2.1：查看路由表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：查看路由表</span><span class="token punctuation">[</span>R1-ospf-1<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">13</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">13</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface       ······    <span class="token number">192.168</span>.1.0/26  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">192.168</span>.1.1     LoopBack0    <span class="token number">192.168</span>.1.1/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0   <span class="token number">192.168</span>.1.63/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0<span class="token number">255.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0</code></pre><p>没有<code>192.168.1.0/25</code>，成功过滤。(直连的C类地址无法过滤)</p><h2 id="实验四：路径控制"><a href="#实验四：路径控制" class="headerlink" title="实验四：路径控制"></a><strong>实验四：路径控制</strong></h2><p>华三、思科设备的配置思路：ACL -&gt; PBR -&gt; INTERFACE<br>华为设备的配置思路：<br><strong>-&gt;</strong> ACL(分类)<br><strong>-&gt;</strong> classifier(调用ACL分类)<br><strong>-&gt;</strong> behavior(动作)<br><strong>-&gt;</strong> policy(关联分类和动作)<br><strong>-&gt;</strong> 接口调用</p><p>一般路由器基于目的地址的路由表进行转发<br>策略路由基于源地址进行转发，基于策略进行转发<br>如果同时有策略路由和路由条目，先匹配策略路由(策略路由优先级高于路由条目)，找不到再根据路由表转发</p><p>配置<strong>要求</strong>：<br>1、给CE路由器配置公网地址<br>2、R4通过DHCP获取ip地址<br>3、财务部4.4.4.4走电信，其他链路(192.168.1.254)走联通</p><ul><li>STEP1.0：网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-8-ci-bi-ji/实验四-16564712862714.png"><ul><li>STEP1.1：配置IP</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：配置IP</span><span class="token punctuation">[</span>CE<span class="token punctuation">]</span>dhcp enInfo: The operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment.done.<span class="token punctuation">[</span>CE<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>CE-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">183.165</span>.11.2 <span class="token number">30</span><span class="token punctuation">[</span>CE-GigabitEthernet0/0/0<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>CE-GigabitEthernet0/0/1<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">61.16</span>.18.2 <span class="token number">30</span><span class="token punctuation">[</span>CE-GigabitEthernet0/0/1<span class="token punctuation">]</span>int g0/0/2<span class="token punctuation">[</span>CE-GigabitEthernet0/0/2<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.1.1 <span class="token number">24</span><span class="token comment"># todo AR3：配置DHCP</span><span class="token punctuation">[</span>CE-GigabitEthernet0/0/2<span class="token punctuation">]</span>dhcp <span class="token keyword">select</span> int<span class="token punctuation">[</span>CE-GigabitEthernet0/0/2<span class="token punctuation">]</span>dhcp server dns-list <span class="token number">192.168</span>.1.1 <span class="token number">114.114</span>.114.114<span class="token punctuation">[</span>CE-GigabitEthernet0/0/2<span class="token punctuation">]</span>dis th<span class="token punctuation">[</span>V200R003C00<span class="token punctuation">]</span><span class="token comment">#</span>interface GigabitEthernet0/0/2 <span class="token function">ip</span> address <span class="token number">192.168</span>.1.1 <span class="token number">255.255</span>.255.0  dhcp <span class="token keyword">select</span> interface dhcp server dns-list <span class="token number">192.168</span>.1.1 <span class="token number">114.114</span>.114.114 <span class="token comment">#</span><span class="token builtin class-name">return</span><span class="token comment"># todo AR4：配置DHCP获取IP地址</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>dhcp <span class="token builtin class-name">enable</span> Info: The operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment.done.<span class="token punctuation">[</span>R4<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>R4-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> dhcp-alloc<span class="token comment"># todo AR4：查看DHCP获取的地址</span><span class="token punctuation">[</span>R4-GigabitEthernet0/0/0<span class="token punctuation">]</span>dis <span class="token function">ip</span> int bri*down: administratively down^down: standby<span class="token punctuation">(</span>l<span class="token punctuation">)</span>: loopback<span class="token punctuation">(</span>s<span class="token punctuation">)</span>: spoofingThe number of interface that is UP <span class="token keyword">in</span> Physical is <span class="token number">2</span>The number of interface that is DOWN <span class="token keyword">in</span> Physical is <span class="token number">2</span>The number of interface that is UP <span class="token keyword">in</span> Protocol is <span class="token number">2</span>The number of interface that is DOWN <span class="token keyword">in</span> Protocol is <span class="token number">2</span>Interface                         IP Address/Mask      Physical   Protocol  GigabitEthernet0/0/0              <span class="token number">192.168</span>.1.254/24     up         up        GigabitEthernet0/0/1              unassigned           down       down      GigabitEthernet0/0/2              unassigned           down       down      NULL0                             unassigned           up         up<span class="token punctuation">(</span>s<span class="token punctuation">)</span>     <span class="token comment"># todo AR4：配置环回地址</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>int lo <span class="token number">0</span><span class="token punctuation">[</span>R4-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">4.4</span>.4.4 <span class="token number">24</span></code></pre><ul><li>STEP2.0：测试连通性</li></ul><p>配置NAT前，先测试网络连通性：<br>用AR4 ping CNC和CT的地址，即<code>183.165.11.0</code>和<code>61.16.18.0</code>，无法ping通，也ping不通<code>1.1.1.1</code>和<code>2.2.2.2</code></p><ul><li>STEP2.1：配置NAT</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：NAT</span><span class="token punctuation">[</span>CE<span class="token punctuation">]</span>acl <span class="token number">2002</span><span class="token punctuation">[</span>CE-acl-basic-2002<span class="token punctuation">]</span>rule permit <span class="token builtin class-name">source</span> any<span class="token punctuation">[</span>CE-acl-basic-2002<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>CE-GigabitEthernet0/0/0<span class="token punctuation">]</span>nat outbound <span class="token number">2002</span><span class="token punctuation">[</span>CE-GigabitEthernet0/0/0<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>CE-GigabitEthernet0/0/1<span class="token punctuation">]</span>nat outbound <span class="token number">2002</span></code></pre><ul><li>STEP2.2：测试连通性</li></ul><p>配置NAT后，测试网络连通性：<br>ping通<code>183.165.11.1</code>和<code>61.16.18.1</code><br>ping不通<code>1.1.1.1</code>和<code>2.2.2.2</code></p><ul><li>STEP3.0：AR3配置PBR</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 一、AR3使用ACL进行分类</span><span class="token punctuation">[</span>CE<span class="token punctuation">]</span>acl <span class="token number">2000</span>       <span class="token punctuation">[</span>CE-acl-basic-2000<span class="token punctuation">]</span>rule permit <span class="token builtin class-name">source</span> <span class="token number">4.4</span>.4.0 <span class="token number">0.0</span>.0.255<span class="token punctuation">[</span>CE-acl-basic-2000<span class="token punctuation">]</span>rule deny <span class="token builtin class-name">source</span> any<span class="token punctuation">[</span>CE-acl-basic-2000<span class="token punctuation">]</span>acl <span class="token number">2001</span><span class="token punctuation">[</span>CE-acl-basic-2001<span class="token punctuation">]</span>rule permit <span class="token builtin class-name">source</span> <span class="token number">192.168</span>.1.0 <span class="token number">0.0</span>.0.255<span class="token punctuation">[</span>CE-acl-basic-2001<span class="token punctuation">]</span>rule deny <span class="token builtin class-name">source</span> any<span class="token comment"># todo 二、AR3配置 分类(调用ACL)</span><span class="token punctuation">[</span>CE<span class="token punctuation">]</span>traffic classifier ?  STRING<span class="token operator">&lt;</span><span class="token number">1</span>-3<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>  Name of classifier<span class="token punctuation">[</span>CE<span class="token punctuation">]</span>traffic classifier cw<span class="token punctuation">[</span>CE-classifier-cw<span class="token punctuation">]</span>if-match acl <span class="token number">2000</span><span class="token punctuation">[</span>CE-classifier-cw<span class="token punctuation">]</span>q<span class="token punctuation">[</span>CE<span class="token punctuation">]</span>traffic classifier ot<span class="token punctuation">[</span>CE-classifier-ot<span class="token punctuation">]</span>if-match acl <span class="token number">2001</span><span class="token punctuation">[</span>CE-classifier-ot<span class="token punctuation">]</span>quit<span class="token comment"># todo 三、AR3配置 动作</span><span class="token punctuation">[</span>CE<span class="token punctuation">]</span>traffic behavior ct<span class="token punctuation">[</span>CE-behavior-ct<span class="token punctuation">]</span>redirect ip-nexthop <span class="token number">61.16</span>.18.1 <span class="token punctuation">[</span>CE-behavior-ct<span class="token punctuation">]</span>q<span class="token punctuation">[</span>CE<span class="token punctuation">]</span>traffic behavior cnc<span class="token punctuation">[</span>CE-behavior-cnc<span class="token punctuation">]</span>redirect ip-nexthop <span class="token number">183.165</span>.11.1 <span class="token punctuation">[</span>CE-behavior-cnc<span class="token punctuation">]</span>quit<span class="token comment"># todo 四、AR3配置关联分类和动作</span><span class="token punctuation">[</span>CE<span class="token punctuation">]</span>traffic policy PBR <span class="token punctuation">[</span>CE-trafficpolicy-PBR<span class="token punctuation">]</span>classifier cw behavior ct<span class="token punctuation">[</span>CE-trafficpolicy-PBR<span class="token punctuation">]</span>classifier ot behavior cnc<span class="token comment"># todo 五、AR3配置接口下调用</span><span class="token punctuation">[</span>CE<span class="token punctuation">]</span>int g0/0/2<span class="token punctuation">[</span>CE-GigabitEthernet0/0/2<span class="token punctuation">]</span>traffic-policy PBR inbound</code></pre><ul><li>STEP3.1：测试连通性</li></ul><p>AR4使用<code>4.4.4.4</code>ping<code>2.2.2.2</code>通了，<code>192.168.1.254</code>ping<code>1.1.1.1</code>没ping通······</p><ul><li>STEP4：链路检测</li></ul><p>PBR问题：即使线路down了，PBR仍然生效</p><p>要求：如果某个链路down了，可以通过其他链路到达目的。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：配置链路控制</span><span class="token punctuation">[</span>CE<span class="token punctuation">]</span>nqa test-instance ct icmp  <span class="token comment"># nqa检测</span><span class="token punctuation">[</span>CE-nqa-ct-icmp<span class="token punctuation">]</span>test-type icmp  <span class="token comment"># 检测包类型</span><span class="token punctuation">[</span>CE-nqa-ct-icmp<span class="token punctuation">]</span>frequency <span class="token number">10</span>  <span class="token comment"># 频率，每隔多少秒发一个Hello包</span><span class="token punctuation">[</span>CE-nqa-ct-icmp<span class="token punctuation">]</span>probe-count <span class="token number">2</span>  <span class="token comment"># 每次发包个数</span><span class="token punctuation">[</span>CE-nqa-ct-icmp<span class="token punctuation">]</span>destination-address ipv4 <span class="token number">61.16</span>.18.1  <span class="token comment"># 检测的目标(地址)</span><span class="token punctuation">[</span>CE-nqa-ct-icmp<span class="token punctuation">]</span>start now  <span class="token comment"># 开始、结束时间</span><span class="token comment"># todo AR3：配置链路控制</span><span class="token punctuation">[</span>CE<span class="token punctuation">]</span>nqa test-instance cnc icmp<span class="token punctuation">[</span>CE-nqa-cnc-icmp<span class="token punctuation">]</span>test-type icmp<span class="token punctuation">[</span>CE-nqa-cnc-icmp<span class="token punctuation">]</span>frequency <span class="token number">10</span><span class="token punctuation">[</span>CE-nqa-cnc-icmp<span class="token punctuation">]</span>probe-count <span class="token number">2</span><span class="token punctuation">[</span>CE-nqa-cnc-icmp<span class="token punctuation">]</span>destination-address ipv4 <span class="token number">183.165</span>.11.1<span class="token punctuation">[</span>CE-nqa-cnc-icmp<span class="token punctuation">]</span>start now</code></pre><p><font color="#999AAA">一个技术：超过带宽打标签(整形监管)</font></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> ICT战队数据通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HCIA </tag>
            
            <tag> 华为eNSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICT战队-第7次笔记</title>
      <link href="/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/"/>
      <url>/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="ICT战队-第7次笔记"><a href="#ICT战队-第7次笔记" class="headerlink" title="ICT战队-第7次笔记"></a>ICT战队-第7次笔记</h1><p>[toc]</p><h2 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h2><h3 id="原理：ACL访问控制列表"><a href="#原理：ACL访问控制列表" class="headerlink" title="原理：ACL访问控制列表"></a><strong>原理：ACL访问控制列表</strong></h3><ul><li><strong>①原理：ACL概述</strong></li></ul><img src="/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/0283a4ab8ab44f58aa4d2582ee7e777d.png"><p>到了高阶段，ACL几乎都是用来<strong>分类</strong>用的。</p><img src="/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/157ab06523e24c3384dbb9d1939daf5c.png"><p>ACL对进来的数据包过滤还是对出去的数据包进行过滤，ACL过滤方向只有一个，不能同时对同一个ACL设置进出两种流向。</p><p>写完ACL后，要指定是对进来的数据流过滤还是对出去的数据流过滤。</p><ul><li><strong>②原理：基于ACL的包过滤技术</strong><img src="/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/7f67dff6574f4d9c98a8635816d24b6f.png"></li></ul><p>进路由器接口：无ACL，数据包直接进入路由器；有ACL，数据包根据ACL规则判断能否进入路由器<br>出路由器接口：先做路由转发，判断数据包该从哪个接口出去，再看该接口是否应用了ACL，无ACL直接出去，有ACL根据ACL规则判断能否出去。</p><p><strong>入站包过滤工作流程</strong>：<br><img src="/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/ac6edf53dd7b4e9d8cbd0bbffb78093b.png"></p><p><strong>出站包过滤工作流程</strong>：<br><img src="/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/24a0278454494c43922007104d5c6efa.png"></p><p>ACL按顺序匹配，不满足就一直往下匹配，一直匹配到最后一条匹配所有的规则<br>默认规则：(华为)允许。<font color="#999AAA">其他厂商默认拒绝所有，因此要设置相关的允许ACL规则。</font></p><p>ACL规则建议：越详细越优先</p><img src="/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/003b9e1751e44b36bf4b91ce10485304.png"><table><thead><tr><th align="center">IPv4ACL类型</th><th align="center">ACL序号范围</th><th>区报文依据</th></tr></thead><tbody><tr><td align="center">WLAN ACL</td><td align="center">100 ~ 199</td><td>根据无线用户端的SSID制定匹配规则</td></tr><tr><td align="center">基本IPV4 ACL</td><td align="center">2000 ~ 2999</td><td>只根据报文的源IP地址信息制定匹配规则</td></tr><tr><td align="center">高级IPv4 ACL</td><td align="center">3000 ~ 3999</td><td>根据报文的源IP地址信息、目的IP地址信息、IP承载的协议类型、协议的特性等三、四层信息制定匹配规则</td></tr><tr><td align="center">二层ACL</td><td align="center">4000 ~ 4999</td><td>根据报文的源MAC地址、目的MAC地址、802.1Q优先级、二层协议类型等二层信息制定匹配规则</td></tr><tr><td align="center">用户自定义ACL</td><td align="center">5000 ~ 5999</td><td>可以以报文的报文头、IP头等为基准，指定从第几个字节开始与掩码“与”操作，将从报文提取出来的字符串和用户定义的字符串进行比较，找到匹配的报文。</td></tr></tbody></table><p>基本ACL：基本访问控制列表只根据报文的源IP地址信息制定规则——即只能过滤<font color="red">源IP</font><br>高级ACL：高级访问控制列表根据报文的源IP地址、目的IP地址、IP承载的协议类型、协议特性等三、四层制定规则——即过滤<font color="red">源IP、目的IP、协议、源端口、目标端口</font></p><p>建议(不是硬性规定)：<br>基本ACL：离目标越近越好。如果ACL设置在源出口，那么源设备发送的数据包都不能发送到其他地方，而被拦截在源出口，因为源出口设置了ACL。<br>高级ACL：离源越近越好</p><p>ACL配置命令：<br><strong>1.</strong> ACL命名</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># show ACL命名</span><span class="token punctuation">[</span>R<span class="token punctuation">]</span>acl name dacongming <span class="token number">2000</span></code></pre><p><strong>2.</strong> ACL配置命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># show 命令，随便看看</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>acl <span class="token number">2000</span><span class="token punctuation">[</span>AR1-acl-basic-2000<span class="token punctuation">]</span>rule permit ?  fragment             Check fragment packet  none-first-fragment  Check the subsequence fragment packet    <span class="token builtin class-name">source</span>               Specify <span class="token builtin class-name">source</span> address  time-range           Specify a special <span class="token function">time</span>  vpn-instance         Specify a VPN-Instance  <span class="token operator">&lt;</span>cr<span class="token operator">&gt;</span>                 Please press ENTER to execute <span class="token builtin class-name">command</span> <span class="token punctuation">[</span>AR1-acl-basic-2000<span class="token punctuation">]</span>rule permit <span class="token builtin class-name">source</span> <span class="token number">1.1</span>.1.1 ?  IP_ADDR<span class="token operator">&lt;</span>X.X.X.X<span class="token operator">&gt;</span>  Wildcard of <span class="token builtin class-name">source</span>  <span class="token number">0</span>                 Wildcard bits <span class="token builtin class-name">:</span> <span class="token number">0.0</span>.0.0 <span class="token punctuation">(</span> a <span class="token function">host</span> <span class="token punctuation">)</span><span class="token punctuation">[</span>AR1-acl-basic-2000<span class="token punctuation">]</span>rule permit <span class="token builtin class-name">source</span> <span class="token number">1.1</span>.1.1 <span class="token number">0</span> ?  fragment             Check fragment packet  none-first-fragment  Check the subsequence fragment packet    time-range           Specify a special <span class="token function">time</span>  vpn-instance         Specify a VPN-Instance  <span class="token operator">&lt;</span>cr<span class="token operator">&gt;</span>                 Please press ENTER to execute <span class="token builtin class-name">command</span> <span class="token punctuation">[</span>AR1-acl-basic-2000<span class="token punctuation">]</span>rule permit <span class="token builtin class-name">source</span> <span class="token number">1.1</span>.1.1 <span class="token number">0</span> </code></pre><h3 id="实验一：基本ACL"><a href="#实验一：基本ACL" class="headerlink" title="实验一：基本ACL"></a><strong>实验一：基本ACL</strong></h3><p>ACL包过滤配置：<br><img src="/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/ab881086deaf4d84b6caecb1070bb810.png"></p><ul><li><strong>STEP1：</strong> 网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/28819471e4684da2a05cbdf49f9359f1.png"><ul><li><strong>STEP2.1：</strong> 配置DHCP</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：配置DCHP接口</span><span class="token punctuation">[</span>AR2-i<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>AR2-GigabitEthernet0/0/1<span class="token punctuation">]</span>dhcp <span class="token keyword">select</span> interface</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置DHCP地址池</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>dhcp <span class="token builtin class-name">enable</span> Info: The operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment.done.<span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>ip pool Info: It's successful to create an IP address pool.<span class="token punctuation">[</span>AR1-ip-pool-1<span class="token punctuation">]</span>network <span class="token number">192.168</span>.1.0 mask <span class="token number">24</span><span class="token punctuation">[</span>AR1-ip-pool-1<span class="token punctuation">]</span>gateway-list <span class="token number">192.168</span>.1.1<span class="token punctuation">[</span>AR1-ip-pool-1<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>dhcp <span class="token keyword">select</span> interface<span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>AR1-GigabitEthernet0/0/1<span class="token punctuation">]</span>dhcp <span class="token keyword">select</span> global</code></pre><ul><li><strong>STEP2.2：</strong> 配置路由协议</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置OSPF</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>AR1-ospf-1<span class="token punctuation">]</span>a <span class="token number">0</span><span class="token punctuation">[</span>AR1-ospf-1-area-0.0.0.0<span class="token punctuation">]</span>network <span class="token number">12.1</span>.1.0 <span class="token number">0.0</span>.0.255<span class="token punctuation">[</span>AR1-ospf-1-area-0.0.0.0<span class="token punctuation">]</span>a <span class="token number">1</span>  <span class="token comment"># 创建area1</span><span class="token punctuation">[</span>AR1-ospf-1-area-0.0.0.1<span class="token punctuation">]</span>a <span class="token number">2</span>  <span class="token comment"># 创建area2</span><span class="token punctuation">[</span>AR1-ospf-1-area-0.0.0.2<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>ospf <span class="token builtin class-name">enable</span> <span class="token number">1</span> area <span class="token number">1</span><span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>AR1-GigabitEthernet0/0/1<span class="token punctuation">]</span>ospf <span class="token builtin class-name">enable</span> <span class="token number">1</span> area <span class="token number">2</span><span class="token comment"># todo AR2：配置OSPF</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>AR2-ospf-1<span class="token punctuation">]</span>a <span class="token number">0</span><span class="token punctuation">[</span>AR2-ospf-1-area-0.0.0.0<span class="token punctuation">]</span>network <span class="token number">12.1</span>.1.0 <span class="token number">0.0</span>.0.255<span class="token punctuation">[</span>AR2-ospf-1-area-0.0.0.0<span class="token punctuation">]</span>a <span class="token number">3</span><span class="token punctuation">[</span>AR2-ospf-1-area-0.0.0.3<span class="token punctuation">]</span>network <span class="token number">10.1</span>.2.0 <span class="token number">0.0</span>.0.255</code></pre><ul><li><p><strong>STEP2.3：</strong> 查看路由表(略：有所有区域的路由条目)</p></li><li><p><strong>STEP2.4：</strong> 测试网连通性(略：全网互通)</p></li><li><p><strong>STEP3.1：</strong> 配置ACL</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置ACL</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>acl <span class="token number">2000</span><span class="token punctuation">[</span>AR1-acl-basic-2000<span class="token punctuation">]</span>rule <span class="token number">5</span> deny <span class="token builtin class-name">source</span> <span class="token number">10.1</span>.2.254 <span class="token number">0.0</span>.0.0<span class="token punctuation">[</span>AR1-acl-basic-2000<span class="token punctuation">]</span>dis th<span class="token punctuation">[</span>V200R003C00<span class="token punctuation">]</span><span class="token comment">#</span>acl number <span class="token number">2000</span>   rule <span class="token number">5</span> deny <span class="token builtin class-name">source</span> <span class="token number">10.1</span>.2.254 <span class="token number">0</span> <span class="token comment">#</span><span class="token builtin class-name">return</span><span class="token punctuation">[</span>AR1-acl-basic-2000<span class="token punctuation">]</span> <span class="token punctuation">[</span>AR1-acl-basic-2000<span class="token punctuation">]</span>int g0/0/0 <span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>traffic-filter ?  inbound   Apply ACL to the inbound direction of the interface   outbound  Apply ACL to the outbound direction of the interface <span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>traffic-filter outbound  acl <span class="token number">2000</span></code></pre><p>注：<br>1.ACL序列号步长为5，越小越优先<br>2.尽量不要删除生产环境中的配置<br>3.0表示匹配，1表示忽略。<br>4.从PC1到PC2，从AR1的g0/0/0接口出去，所以在g0/0/0配置ACL</p><ul><li><strong>STEP3.2：</strong> 测试连通性</li></ul><p>PC1和PC2主间无法通信</p><ul><li><strong>STEP0：</strong> ACL默认规则</li></ul><p>各个厂商ACL默认规则不一样，我们可以不考虑ACL默认规则，自己增加，例如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 在配置完所有规则后，最后配置放行/拒绝所有规则</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>acl <span class="token number">2000</span><span class="token punctuation">[</span>AR1-acl-basic-2000<span class="token punctuation">]</span>rule permit <span class="token builtin class-name">source</span> <span class="token number">1.1</span>.1.1 <span class="token number">255.255</span>.255.255  <span class="token comment"># 放行所有写法1</span><span class="token punctuation">[</span>AR1-acl-basic-2000<span class="token punctuation">]</span>rule permit <span class="token builtin class-name">source</span> any  <span class="token comment"># 放行所有写法2</span></code></pre><ul><li><strong>STEP4.1：</strong> 接口取消应用ACL</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：接口取消应用ACL</span><span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>un traffic-filter outbound  <span class="token comment"># 接口取消应用ACL</span></code></pre><ul><li><strong>STEP4.2：</strong> 测试连通性</li></ul><p>主机PC1和PC2能ping通。</p><h3 id="实验二：扩展ACL"><a href="#实验二：扩展ACL" class="headerlink" title="实验二：扩展ACL"></a><strong>实验二：扩展ACL</strong></h3><ul><li><strong>STEP5.1：</strong> 修改网络拓扑</li></ul><p>在上个实验网络配置不变的情况下，添加设备。</p><img src="/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/efac04187f8147cc8662f6a7ab13de67.png"><ul><li><strong>STEP5.2：</strong> 客户、服务区配置</li></ul><p>基础配置：</p><table><thead><tr><th>设备</th><th>本机地址</th><th>子网掩码</th><th>网关</th></tr></thead><tbody><tr><td>Client1</td><td>10.1.2.250</td><td>255.255.255.0</td><td>10.1.2.2</td></tr><tr><td>Server1</td><td>192.168.1.250</td><td>255.255.255.0</td><td>192.168.1.1</td></tr></tbody></table><p>服务器信息：<br>-&gt; HttpServer：文件根目录：选择一个有.html文件的目录<br>-&gt; 启动</p><p><strong>扩展ACL要求</strong>:<br><strong>1.</strong> PC2不能和PC2通信<br><strong>2.</strong> PC1可以和其他所有主机通信<br><strong>3.</strong> 仅允许10.1.2.0/24中的Client1通过Server1<br><strong>4.</strong> 其他通信都被允许</p><ul><li><strong>STEP6.1：</strong> 配置扩展ACL</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：扩展ACL</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>acl <span class="token number">3000</span><span class="token punctuation">[</span>AR2-acl-adv-3000<span class="token punctuation">]</span>rule deny <span class="token function">ip</span> <span class="token builtin class-name">source</span> <span class="token number">10.1</span>.2.254 <span class="token number">0</span> destination <span class="token number">10.1</span>.1.254 <span class="token number">0</span><span class="token punctuation">[</span>AR2-acl-adv-3000<span class="token punctuation">]</span>rule permit tcp <span class="token builtin class-name">source</span> <span class="token number">10.1</span>.2.250 <span class="token number">0</span> destination <span class="token number">192.168</span>.1.250 <span class="token number">0</span> destination-port eq <span class="token number">80</span><span class="token punctuation">[</span>AR2-acl-adv-3000<span class="token punctuation">]</span>rule deny <span class="token function">ip</span> <span class="token builtin class-name">source</span> any destination <span class="token number">192.168</span>.1.250 <span class="token number">0</span><span class="token punctuation">[</span>AR2-acl-adv-3000<span class="token punctuation">]</span>rule permit <span class="token function">ip</span></code></pre><ul><li><strong>STEP6.2：</strong> 查看扩展ACL信息</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：查看ACL信息</span><span class="token punctuation">[</span>AR2-acl-adv-3000<span class="token punctuation">]</span>dis acl <span class="token number">3000</span>  <span class="token comment"># 查看一个ACL</span>Advanced ACL <span class="token number">3000</span>, <span class="token number">4</span> rulesAcl<span class="token string">'s step is 5 rule 5 deny ip source 10.1.2.254 0 destination 10.1.1.254 0  rule 10 permit tcp source 10.1.2.250 0 destination 192.168.1.250 0 destination-port eq www  rule 15 deny ip destination 192.168.1.250 0  rule 20 permit ip [AR2-acl-adv-3000]dis acl all  # 查看所有ACL Total quantity of nonempty ACL number is 1 Advanced ACL 3000, 4 rulesAcl'</span>s step is <span class="token number">5</span> rule <span class="token number">5</span> deny <span class="token function">ip</span> <span class="token builtin class-name">source</span> <span class="token number">10.1</span>.2.254 <span class="token number">0</span> destination <span class="token number">10.1</span>.1.254 <span class="token number">0</span>  rule <span class="token number">10</span> permit tcp <span class="token builtin class-name">source</span> <span class="token number">10.1</span>.2.250 <span class="token number">0</span> destination <span class="token number">192.168</span>.1.250 <span class="token number">0</span> destination-port eq www  rule <span class="token number">15</span> deny <span class="token function">ip</span> destination <span class="token number">192.168</span>.1.250 <span class="token number">0</span>  rule <span class="token number">20</span> permit <span class="token function">ip</span> </code></pre><ul><li><strong>STEP6.3：</strong> 进入接口调用ALC</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># tood AR2：进入接口调用ACL</span><span class="token punctuation">[</span>AR2-acl-adv-3000<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>AR2-GigabitEthernet0/0/1<span class="token punctuation">]</span>traffic-filter inbound acl <span class="token number">3000</span></code></pre><p>注：<br>1.配置inbound还是outbound要看ACL的目的和源地址<br>2.HTTP端口80，HTTPS端口43，自己1024-62235随机端口</p><ul><li><strong>STEP6.4：</strong> 测试连通性</li></ul><p><strong>PC1：</strong><br>可以ping通：PC3(192.168.1.254)<br>不可以ping通：PC2(10.1.1.254)、Server1(192.168.1.250)</p><p><strong>Client1：</strong><br>-&gt; 地址：<code>http://192.168.1.250/[Server1中的某个.html</code><br>-&gt; 获取<br>-&gt; 可以看到以下内容</p><pre class="language-bash" data-language="bash"><code class="language-bash">HTTP/1.1 <span class="token number">200</span> OKServer: ENSP HttpServerAuth: HUAWEICache-Control: privateContent-Type: text/htmlContent-Length: <span class="token number">34155</span></code></pre><p>可以看到服务器的响应状态码为<strong>200</strong>，即成功接收。</p><ul><li><strong>STEP7.1：</strong> 修改网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/892b1040ebcf4760a31582c1dc618898.png"><ul><li><strong>STEP7.2：</strong> Client2配置</li></ul><p>基础配置：</p><table><thead><tr><th>设备</th><th>本机地址</th><th>子网掩码</th><th>网关</th></tr></thead><tbody><tr><td>Client2</td><td>10.1.2.249</td><td>255.255.255.0</td><td>10.1.2.2</td></tr></tbody></table><ul><li><strong>STEP7.3：</strong> 测试连通性</li></ul><p>尝试使用Client2登录Server1</p><p><strong>Client2：</strong><br>-&gt; 地址：<code>http://192.168.1.250/[Server1中的某个.html</code><br>-&gt; 获取<br>-&gt; 可以看到以下内容</p><pre class="language-bash" data-language="bash"><code class="language-bash">Connect server failure.</code></pre><p>连接服务器失败</p><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><h3 id="原理：NAT网络地址转换"><a href="#原理：NAT网络地址转换" class="headerlink" title="原理：NAT网络地址转换"></a><strong>原理：NAT网络地址转换</strong></h3><img src="/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/f15f5e05d92d4e9381cf5d5e6ddcbbd7.png"><p><strong>NAT实验均使用以下网络拓扑，直接打开老师的网络拓扑即可</strong>:</p><img src="/2022/06/29/ict-zhan-dui-di-7-ci-bi-ji/318d301e707c40e7939e8f734bd74d62.png"><h3 id="实验三：动态地址NAT-Pooled-NAT"><a href="#实验三：动态地址NAT-Pooled-NAT" class="headerlink" title="实验三：动态地址NAT(Pooled NAT)"></a><strong>实验三：动态地址NAT(Pooled NAT)</strong></h3><ul><li><p><strong>STEP1：</strong> 网络拓扑(略)</p></li><li><p><strong>STEP2：</strong> 配置ACL</p></li></ul><p>使用ACL分类：哪些地址需要做NAT，哪些地址不需要做</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>R1-acl-basic-2000<span class="token punctuation">]</span>rule deny <span class="token builtin class-name">source</span> <span class="token number">10.1</span>.1.0 <span class="token number">0.0</span>.0.255<span class="token punctuation">[</span>R1-acl-basic-2000<span class="token punctuation">]</span>rule permit <span class="token builtin class-name">source</span> any</code></pre><ul><li><strong>STEP3：</strong> 配置公网地址池范围</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>nat address-group <span class="token number">0</span> <span class="token number">192.168</span>.1.66 <span class="token number">192.168</span>.1.67</code></pre><ul><li><strong>STEP4：</strong> 出接口配置NAT</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>R1-GigabitEthernet0/0/2<span class="token punctuation">]</span>nat outbound <span class="token number">2000</span> address-group <span class="token number">0</span></code></pre><p>NAT：都在接口调用<br>PAT：基于端口port的NAT转换<br>no-pat：不基于端口port的NAT转换<br><font color="#999AAA">eNSP对NAT兼容性比较差</font></p><h3 id="实验四：网络地址端口转换NAPT-Port-Level-NAT"><a href="#实验四：网络地址端口转换NAPT-Port-Level-NAT" class="headerlink" title="实验四：网络地址端口转换NAPT(Port-Level NAT)"></a><strong>实验四：网络地址端口转换NAPT(Port-Level NAT)</strong></h3><ul><li><p><strong>STEP1：</strong> 网络拓扑(略)</p></li><li><p><strong>STEP2：</strong> 配置NAPT</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>acl <span class="token number">2000</span><span class="token punctuation">[</span>R2-acl-basic-2000<span class="token punctuation">]</span>rule permit<span class="token punctuation">[</span>R2-acl-basic-2000<span class="token punctuation">]</span>inter g0/0/0<span class="token punctuation">[</span>R2-Gig！@abitEthernet0/0/0<span class="token punctuation">]</span>nat outbound <span class="token number">200</span></code></pre><ul><li><strong>STEP3：</strong> 测试网络连通性</li></ul><p>PC1 可以 ping 通 R1 接口 g0/0/2 的 IP</p><h3 id="实验五：端口映射"><a href="#实验五：端口映射" class="headerlink" title="实验五：端口映射"></a><strong>实验五：端口映射</strong></h3><p>端口映射技术：其实是静态 NAT 与 PAT 的结合，即局域网中主机的某一端口通过静态方式映射到公网 IP 地址端口上。映射技术只能单一的实现所映射端口的特定功能，但一台主机可映射多个不同端口到同一公网 IP 端口上。如 23 代表 telnet，80 代表 http，21 代表 ftp 等知名端口。</p><ul><li><p><strong>STEP1：</strong> 网络拓扑(略)</p></li><li><p><strong>STEP2：</strong> 配置NAT端口映射</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>R1-GigabitEthernet0/0/2<span class="token punctuation">]</span>nat server protocol tcp global current-interface <span class="token number">8003</span> inside <span class="token number">10.1</span>.3.250 <span class="token number">80</span></code></pre><ul><li><strong>STEP3：</strong> 测试连通性</li></ul><p>Client1可以通过http访问Server1</p><h3 id="实验六：静态NAT-Static-NAT"><a href="#实验六：静态NAT-Static-NAT" class="headerlink" title="实验六：静态NAT(Static NAT)"></a><strong>实验六：静态NAT(Static NAT)</strong></h3><ul><li><p><strong>STEP1：</strong> 网络拓扑(略)</p></li><li><p><strong>STEP2：</strong> 配置静态NAT</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>R1-GigabitEthernet0/0/2<span class="token punctuation">]</span>nat static global <span class="token number">192.168</span>.1.68 inside <span class="token number">10.1</span>.1.254</code></pre><ul><li><strong>STEP3：</strong> 测试连通性</li></ul><p>PC1：可以ping通192.168.1.68<br>PC2：抓包可以看到ICMP数据包</p><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><p>后面没声，不知道在干嘛，需要可以去看上一届的视频和笔记：<a href="D:/STDATA/VSCodeData/MarkDown/ICT数通19/2021-01-25/2021-01-25.md">数通2021-01-25</a></p><ul><li>老师笔记</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">动态NAT步骤一：使用分类哪些主机进行NAT转换<span class="token punctuation">[</span>R1<span class="token punctuation">]</span>acl <span class="token number">2000</span><span class="token punctuation">[</span>R1-acl-basic-2000<span class="token punctuation">]</span>rule deny <span class="token builtin class-name">source</span> <span class="token number">10.1</span>.1.0 <span class="token number">0.0</span>.0.255<span class="token punctuation">[</span>R1-acl-basic-2000<span class="token punctuation">]</span>rule permit <span class="token builtin class-name">source</span> any<span class="token punctuation">[</span>R1-acl-basic-2000<span class="token punctuation">]</span>q步骤二：定义公网地址池范围<span class="token punctuation">[</span>R1<span class="token punctuation">]</span>nat <span class="token function">add</span> <span class="token number">0</span> <span class="token number">192.168</span>.1.66 <span class="token number">192.168</span>.1.67步骤三：出接口配置NAT<span class="token punctuation">[</span>R1<span class="token punctuation">]</span>int g0/0/2<span class="token punctuation">[</span>R1-GigabitEthernet0/0/2<span class="token punctuation">]</span>nat outbound  <span class="token number">2000</span> address-group <span class="token number">0</span>NART：端口NAT<span class="token punctuation">[</span>R2<span class="token punctuation">]</span>acl <span class="token number">2000</span><span class="token punctuation">[</span>R2-acl-basic-2000<span class="token punctuation">]</span>rule permit <span class="token punctuation">[</span>R2-acl-basic-2000<span class="token punctuation">]</span>q<span class="token punctuation">[</span>R2<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>R2-GigabitEthernet0/0/0<span class="token punctuation">]</span>nat outbound <span class="token number">2000</span>测试方法：PC1可以ping通AR1，g0/0/2接口IPNAT server<span class="token punctuation">(</span>接口映射<span class="token punctuation">)</span><span class="token punctuation">[</span>R1-GigabitEthernet0/0/2<span class="token punctuation">]</span>nat server protocol tcp global current-interface <span class="token number">8003</span> inside <span class="token number">10.1</span>.3.250 <span class="token number">80</span>测试方法：client1可以通过http访问server1静态NAT转换<span class="token punctuation">[</span>R1-GigabitEthernet0/0/2<span class="token punctuation">]</span>nat static global <span class="token number">192.168</span>.1.68 inside <span class="token number">10.1</span>.1.254测试方法：PC1可以ping通192.168.1.68，同时在PC2、5上抓包可以看到ICMP数据包</code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> ICT战队数据通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HCIA </tag>
            
            <tag> 华为eNSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICT战队-第6次笔记</title>
      <link href="/2022/06/29/ict-zhan-dui-di-6-ci-bi-ji/"/>
      <url>/2022/06/29/ict-zhan-dui-di-6-ci-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="ICT战队-第6次笔记"><a href="#ICT战队-第6次笔记" class="headerlink" title="ICT战队-第6次笔记"></a>ICT战队-第6次笔记</h1><p>[toc]</p><h2 id="OSPF"><a href="#OSPF" class="headerlink" title="OSPF"></a>OSPF</h2><h3 id="原理：OSPF"><a href="#原理：OSPF" class="headerlink" title="原理：OSPF"></a><strong>原理：OSPF</strong></h3><ul><li><strong>①OSPF网络类型</strong></li></ul><p>网络类型：点到点、广播、非广播多路访问、点到多点<br>1.点到点、点到多点网络类型不选DR和BDR；广播、非广播网络类型才选DR和BDR，且使用224.0.0.5、224.0.0.6这两个地址<br>2.DR是<strong>端口</strong>的角色，不是路由器的角色<br>3.华为默认Serial串行口默认封装PPP<br>4.非广播多路访问：帧中继：不能发广播帧，但是又是一个广播型网络，所以把广播帧封装成单播帧<br>5.OSPF正常使用224.0.0.5发送OSPF数据包，DROther发送<strong>更新</strong>给DR和BDR使用224.0.0.6</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 修改OSPF路由协议</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>int s2/0/0<span class="token punctuation">[</span>R3-Serial2/0/0<span class="token punctuation">]</span>ospf network-type ?  broadcast  Specify OSPF broadcast network  nbma       Specify OSPF NBMA network  p2mp       Specify OSPF point-to-multipoint network  p2p        Specify OSPF point-to-point network<span class="token punctuation">[</span>R3-Serial2/0/0<span class="token punctuation">]</span>ospf network-type </code></pre><h3 id="实验一：虚链路"><a href="#实验一：虚链路" class="headerlink" title="实验一：虚链路"></a><strong>实验一：虚链路</strong></h3><p>虚链路：解决非骨干区域连接非骨干区域问题。<br>做Virtual Link只找两个区域的ABR(区域边界路由器)。<br>找俩个区域的ABR，让他们互指Virtual-Link即可。</p><ul><li><strong>STEP1：</strong> 网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-6-ci-bi-ji/60a44e765e8940cfa3e33b8f01d5cb50.png"><ul><li><strong>STEP2：</strong> 配置虚链路</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 查看OSPF区域的邻居关系</span><span class="token punctuation">[</span>R<span class="token punctuation">]</span>dis ospf peer</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：指向对方RID</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>R2-ospf-1<span class="token punctuation">]</span><span class="token punctuation">[</span>R2-ospf-1<span class="token punctuation">]</span>dis ospf peer   OSPF Process <span class="token number">1</span> with Router ID <span class="token number">10.0</span>.2.2     Neighbors  Area <span class="token number">0.0</span>.0.0 interface <span class="token number">12.1</span>.1.2<span class="token punctuation">(</span>GigabitEthernet0/0/0<span class="token punctuation">)</span><span class="token string">'s neighbors Router ID: 10.0.1.1         Address: 12.1.1.1           State: Full  Mode:Nbr is  Slave  Priority: 1   DR: 12.1.1.2  BDR: 12.1.1.1  MTU: 0       Dead timer due in 40  sec    Retrans timer interval: 5    Neighbor is up for 00:06:24        Authentication Sequence: [ 0 ]      Neighbors  Area 0.0.0.1 interface 23.1.1.2(GigabitEthernet0/0/1)'</span>s neighbors Router ID: <span class="token number">10.0</span>.3.3         Address: <span class="token number">23.1</span>.1.3           State: Full  Mode:Nbr is  Master  Priority: <span class="token number">1</span>   DR: <span class="token number">23.1</span>.1.3  BDR: <span class="token number">23.1</span>.1.2  MTU: <span class="token number">0</span>       Dead timer due <span class="token keyword">in</span> <span class="token number">30</span>  sec    Retrans timer interval: <span class="token number">5</span>    Neighbor is up <span class="token keyword">for</span> 00:06:19        Authentication Sequence: <span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span>R2-ospf-1<span class="token punctuation">]</span>a <span class="token number">1</span><span class="token punctuation">[</span>R2-ospf-1-area-0.0.0.1<span class="token punctuation">]</span>vlink-peer <span class="token number">10.0</span>.3.3  <span class="token comment"># 对方的RID</span><span class="token comment"># todo AR3：指向对方RID</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>R3-ospf-1<span class="token punctuation">]</span>a <span class="token number">1</span><span class="token punctuation">[</span>R3-ospf-1-area-0.0.0.1<span class="token punctuation">]</span>dis ospf peer   OSPF Process <span class="token number">1</span> with Router ID <span class="token number">10.0</span>.3.3     Neighbors  Area <span class="token number">0.0</span>.0.1 interface <span class="token number">23.1</span>.1.3<span class="token punctuation">(</span>GigabitEthernet0/0/0<span class="token punctuation">)</span><span class="token string">'s neighbors Router ID: 10.0.2.2         Address: 23.1.1.2           State: Full  Mode:Nbr is  Slave  Priority: 1   DR: 23.1.1.3  BDR: 23.1.1.2  MTU: 0       Dead timer due in 31  sec    Retrans timer interval: 5    Neighbor is up for 00:07:30        Authentication Sequence: [ 0 ]      Neighbors  Area 0.0.0.2 interface 34.1.1.3(GigabitEthernet0/0/1)'</span>s neighbors Router ID: <span class="token number">34.1</span>.1.4         Address: <span class="token number">34.1</span>.1.4           State: Full  Mode:Nbr is  Master  Priority: <span class="token number">1</span>   DR: <span class="token number">34.1</span>.1.3  BDR: <span class="token number">34.1</span>.1.4  MTU: <span class="token number">0</span>       Dead timer due <span class="token keyword">in</span> <span class="token number">39</span>  sec    Retrans timer interval: <span class="token number">5</span>    Neighbor is up <span class="token keyword">for</span> 00:04:02        Authentication Sequence: <span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span>R3-ospf-1-area-0.0.0.1<span class="token punctuation">]</span>vlink-peer <span class="token number">10.0</span>.2.2  <span class="token comment"># 对方的RID</span></code></pre><p>区域2需要通过区域1到达区域0，所以要在区域1下，指向<strong>对方RID</strong>。</p><h3 id="原理：LSA链路状态通告"><a href="#原理：LSA链路状态通告" class="headerlink" title="原理：LSA链路状态通告"></a><strong>原理：LSA链路状态通告</strong></h3><ul><li>弄清楚：LSA由谁产生的、传播范围、包含了什么东西</li></ul><p>LSA一共有11种，单播使用的LSA有6种类型</p><table><thead><tr><th>类别</th><th>说明</th><th>路由表中的协议</th></tr></thead><tbody><tr><td>1</td><td>路由器LSA</td><td>OSPF</td></tr><tr><td>2</td><td>网络LSA</td><td>OSPF</td></tr><tr><td>3</td><td>网络汇总LSA</td><td>OSPF</td></tr><tr><td>4</td><td>ASBR汇总LSA</td><td>OSPF</td></tr><tr><td>5</td><td>AS外部LSA</td><td>O_ASE</td></tr><tr><td>7</td><td>NSSA外部LSA</td><td>O_NSSA</td></tr></tbody></table><p><strong>LSA</strong>(Link-State Advertisement)链路状态通告，路由条目的类型，只是路由报文的一个字段。<br><strong>LSACK</strong>(Link-State Acknowledge)链路状态确认，路由报文。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 重置路由器邻居关系</span><span class="token operator">&lt;</span>R<span class="token operator">&gt;</span>reset ospf process</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 查看OSPF链路状态数据库——LSA1</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>display ospf lsdb router </code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 查看OSPF的LSDB链路状态数据库——LSA2</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>dis ospf lsdb network </code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 查看OSPF——LSA3</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>display ospf lsdb summary</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 查看OSPF——LAS4</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>show <span class="token function">ip</span> ospf border-routers   <span class="token punctuation">[</span>R1<span class="token punctuation">]</span>show <span class="token function">ip</span> ospf database asbr-summary</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 查看OSPF——LSA5</span><span class="token punctuation">[</span>R6<span class="token punctuation">]</span>display ospf lsdb ase</code></pre><p><strong>同一个区域的LSDB(链路状态数据库)必须保持一致</strong>，否则邻居关系无法建立</p><p>末梢网络：接口没选DR和BDR，且下面连接了一个终端设备PC</p><p>1类LSA：每个路由器都产生<br>2类LSA：DR产生<br>3类LSA：有区域间路由ABR产生，跨区域传播路由条目，只有路由条目信息，所有区域可以传递！<br>4类LSA：ABR产生，告诉ASBR该找谁，为5类LSA服务<br>5类LSA：ASBR产生<br>6类LSA：组播用<br>7类LSA：NSSA中的ASBR产生，仅NSSA区域传播，NSAA区域的ABR将7转5，让其他路由器学习</p><p>OSPF开销(向上取整) = 参考带宽(默认100M) / 接口带宽</p><p><font color="#999AAA">交换机灯一亮一灭：</font><br><font color="#999AAA">原因：线过长或者水晶头做工不行，距离越长，带宽越低</font><br><font color="#999AAA">解决方法：所有路由器都修改参考带宽<code>bandwith-reference 1000</code></font></p><h3 id="实验二：路由注入"><a href="#实验二：路由注入" class="headerlink" title="实验二：路由注入"></a><strong>实验二：路由注入</strong></h3><p>路由注入：让路由器能交换<strong>不同的路由协议</strong>的路由条目</p><p>重分发：<br>类型1：每经过一个路由器，开销cost会自动增加<br>类型2：不管经过几个路由器，开销cost恒定不变(为设定的值)，不管接口开销多大</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># show 路由注入命令</span><span class="token punctuation">[</span>ospf-1<span class="token punctuation">]</span>import-route rip <span class="token number">1</span> <span class="token builtin class-name">type</span> <span class="token number">1</span> cost <span class="token number">50</span>  设置路由引入RIP协议重分发类型1开销cost<span class="token punctuation">[</span>ospf-1<span class="token punctuation">]</span>import-route rip <span class="token number">1</span> <span class="token builtin class-name">type</span> <span class="token number">2</span> cost <span class="token number">50</span>  设置路由引入RIP协议重分发类型2开销cost<span class="token punctuation">[</span>g0/0/0<span class="token punctuation">]</span>ospf cost <span class="token number">10</span>  设置路由器接口OSPF开销cost</code></pre><ul><li><strong>STEP1：</strong> 网络拓扑</li></ul><p><font color="#999AAA">注：这个拓扑不是上课的网络拓扑，这个实验也不是上课做的实验。</font></p><img src="/2022/06/29/ict-zhan-dui-di-6-ci-bi-ji/634c0bbe3fd44a1a961f736a8890d058.png"><ul><li><p><strong>STEP2：</strong> 配置IP(略)</p></li><li><p><strong>STEP3：</strong> 配置路由注入</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR5：进入RIP，配置OSPF引入</span><span class="token punctuation">[</span>AR5<span class="token punctuation">]</span>rip<span class="token punctuation">[</span>AR5-rip-1<span class="token punctuation">]</span>import-route ospf<span class="token comment"># todo AR5：进入OSPF，配置RIP引入</span><span class="token punctuation">[</span>AR5<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>AR5-ospf-1<span class="token punctuation">]</span>import-route rip</code></pre><p>ASBR：自治系统边界路由器<br>想要学习到对方路由条目，Adv rtr必须可达</p><h3 id="实验三：路由汇总"><a href="#实验三：路由汇总" class="headerlink" title="实验三：路由汇总"></a><strong>实验三：路由汇总</strong></h3><p>做了路由汇总之后，如果汇总的路由拓扑发生变化，也不影响</p><ul><li><strong>STEP1：</strong> 网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-6-ci-bi-ji/5efac16d31e145a1881e2e3267c97dfe.png"><ul><li><strong>STEP2.1：</strong> 配置环回地址</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR4：配置环回地址</span><span class="token punctuation">[</span>AR4<span class="token punctuation">]</span>int lo <span class="token number">0</span><span class="token punctuation">[</span>AR4-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">14.1</span>.4.1 <span class="token number">255.255</span>.255.0<span class="token punctuation">[</span>AR4-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">14.1</span>.5.1 <span class="token number">255.255</span>.255.0 sub<span class="token punctuation">[</span>AR4-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">14.1</span>.6.1 <span class="token number">255.255</span>.255.0 sub<span class="token punctuation">[</span>AR4-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">14.1</span>.7.1 <span class="token number">255.255</span>.255.0 sub</code></pre><ul><li><strong>STEP2.2：</strong> 宣告环回地址</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 宣告环回地址网段</span><span class="token punctuation">[</span>AR4-LoopBack0<span class="token punctuation">]</span>ospf <span class="token builtin class-name">enable</span> <span class="token number">1</span> a <span class="token number">0</span></code></pre><ul><li><strong>STEP2.3：</strong> 查看环回地址是否被学习到</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 查看路由表</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">15</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">15</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface       <span class="token number">12.1</span>.1.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">14.1</span>.1.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">14.1</span>.4.1/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">14.1</span>.5.1/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">14.1</span>.6.1/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">14.1</span>.7.1/32  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       ······<span class="token punctuation">[</span>R3<span class="token punctuation">]</span></code></pre><p>可以看到掩码是32</p><ul><li><strong>STEP2.4：</strong> 查看OSPF接口网络类型</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR4：查看OSPF接口网络类型 </span><span class="token punctuation">[</span>AR4-LoopBack0<span class="token punctuation">]</span>dis ospf int         OSPF Process <span class="token number">1</span> with Router ID <span class="token number">14.1</span>.1.4                 Interfaces  Area: <span class="token number">0.0</span>.0.1          <span class="token punctuation">(</span>MPLS TE not enabled<span class="token punctuation">)</span> IP Address      Type         State    Cost    Pri   DR              BDR  <span class="token number">14.1</span>.1.4        Broadcast    DR       <span class="token number">1</span>       <span class="token number">1</span>     <span class="token number">14.1</span>.1.4        <span class="token number">14.1</span>.1.1 <span class="token number">14.1</span>.4.1        P2P          P-2-P    <span class="token number">0</span>       <span class="token number">1</span>     <span class="token number">0.0</span>.0.0         <span class="token number">0.0</span>.0.0 <span class="token punctuation">[</span>AR4-LoopBack0<span class="token punctuation">]</span></code></pre><p>可以看出环回地址是点到点网络类型</p><ul><li><strong>STEP2.5：</strong> 修改OSPF接口网络类型</li></ul><p>修改网络类型，让掩码变成24</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 修改网络类型</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>int lo <span class="token number">0</span><span class="token punctuation">[</span>R2-LoopBack0<span class="token punctuation">]</span>ospf network-type broadcast  <span class="token comment"># 修改网络类型为广播，掩码变成24</span></code></pre><p>华为：环回口认为是点到点P2P、点到多点p2mp网络类型，掩码是32；修改成广播Broadcast，掩码变成24</p><ul><li><strong>STEP3.1：</strong> 汇总方法1</li></ul><p><strong>同一个区域的LSDB必须保持一致</strong>，所以只能在ABR或者ASBR上做汇总，而且是在要汇总的区域内进行汇总。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>ospf <span class="token number">1</span><span class="token punctuation">[</span>R1-ospf-1<span class="token punctuation">]</span>a <span class="token number">1</span>                                  <span class="token punctuation">[</span>R1-ospf-1-area-0.0.0.1<span class="token punctuation">]</span>abr-summary <span class="token number">14.1</span>.4.0 <span class="token number">255.255</span>.252.0   </code></pre><ul><li><strong>STEP3.2：</strong> 查看路由表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">12</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">12</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface       <span class="token number">12.1</span>.1.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">14.1</span>.1.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">14.1</span>.4.0/22  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/0       ······<span class="token punctuation">[</span>R3<span class="token punctuation">]</span></code></pre><ul><li><strong>STEP4.1：</strong> 汇总方法2</li></ul><p>在汇总之前，先配置环回地址和路由引入。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：配置环回地址</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>int lo <span class="token number">0</span><span class="token punctuation">[</span>R3-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.0.1 <span class="token number">24</span><span class="token punctuation">[</span>R3-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.1.1 <span class="token number">24</span> sub<span class="token punctuation">[</span>R3-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.2.1 <span class="token number">24</span> sub<span class="token punctuation">[</span>R3-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.3.1 <span class="token number">24</span> sub<span class="token comment"># 头都 AR3：宣告网段</span><span class="token punctuation">[</span>R3-LoopBack0<span class="token punctuation">]</span>rip <span class="token number">1</span><span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>net<span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>network <span class="token number">192.168</span>.0.0<span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>network <span class="token number">192.168</span>.1.0<span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>network <span class="token number">192.168</span>.2.0<span class="token punctuation">[</span>R3-rip-1<span class="token punctuation">]</span>network <span class="token number">192.168</span>.3.0</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：路由引入</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>ospf <span class="token number">1</span><span class="token punctuation">[</span>R2-ospf-1<span class="token punctuation">]</span>import-route rip</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：查看路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">22</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">22</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface    ······    <span class="token number">192.168</span>.0.0/24  O_ASE   <span class="token number">150</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0    <span class="token number">192.168</span>.1.0/24  O_ASE   <span class="token number">150</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0    <span class="token number">192.168</span>.1.0/26  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">192.168</span>.1.1     LoopBack0    <span class="token number">192.168</span>.1.1/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0   <span class="token number">192.168</span>.1.63/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0    <span class="token number">192.168</span>.2.0/24  O_ASE   <span class="token number">150</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0    <span class="token number">192.168</span>.3.0/24  O_ASE   <span class="token number">150</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0    ······<span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：汇总</span><span class="token punctuation">[</span>R2-ospf-1<span class="token punctuation">]</span>asbr-summary <span class="token number">192.168</span>.0.0 <span class="token number">255.255</span>.252.0 cost <span class="token number">66</span>  <span class="token comment"># ASBR汇总，设置开销为66</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：查看路由表</span><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">19</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">19</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface    ······    <span class="token number">192.168</span>.0.0/22  O_ASE   <span class="token number">150</span>  <span class="token number">66</span>          D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0    <span class="token number">192.168</span>.1.0/26  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">192.168</span>.1.1     LoopBack0    <span class="token number">192.168</span>.1.1/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0   <span class="token number">192.168</span>.1.63/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0   ······<span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span></code></pre><h3 id="实验四：默认路由"><a href="#实验四：默认路由" class="headerlink" title="实验四：默认路由"></a><strong>实验四：默认路由</strong></h3><ul><li><strong>STEP1：</strong> 网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-6-ci-bi-ji/30fff28111df4c24869e1f2d41d7e324.png"><ul><li><strong>STEP2：</strong> 配置默认路由、下放路由</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置默认路由</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>ip route-static <span class="token number">0.0</span>.0.0 <span class="token number">0.0</span>.0.0 <span class="token number">192.168</span>.1.1</code></pre><p>此时，如果下面路由器想配置默认路由，需要手动添加，比较麻烦，所以考虑使用OSPF下放一条默认路由：更新后的默认路由也能下放。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：OSPF下放路由</span><span class="token punctuation">[</span>R1-ospf-1<span class="token punctuation">]</span>default-route-advertise</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：查看路由表</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">16</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">16</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">0.0</span>.0.0/0   O_ASE   <span class="token number">150</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.        ······<span class="token punctuation">[</span>R2<span class="token punctuation">]</span></code></pre><p>默认路由通过OSPF(O_ASE)获取到</p><ul><li><strong>STEP3：</strong> 把下放路由改成always查看现象</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：首先删除默认路由</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>un <span class="token function">ip</span> route-static <span class="token number">0.0</span>.0.0 <span class="token number">0.0</span>.0.0 <span class="token number">192.168</span>.1.1<span class="token punctuation">[</span>R1<span class="token punctuation">]</span>un <span class="token function">ip</span> route-static <span class="token number">0.0</span>.0.0 <span class="token number">0.0</span>.0.0 <span class="token number">192.168</span>.3.254</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：查看路由表</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">15</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">15</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface       <span class="token number">10.0</span>.1.1/32  OSPF    <span class="token number">10</span>   <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.1        GigabitEthernet0/0/0       <span class="token number">10.0</span>.2.0/24  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">10.0</span>.2.2        LoopBack0       <span class="token number">10.0</span>.2.2/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       LoopBack0      ······<span class="token punctuation">[</span>R2<span class="token punctuation">]</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置下放路由always</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>ospf <span class="token number">1</span><span class="token punctuation">[</span>R1-ospf-1<span class="token punctuation">]</span>default-route-advertise always </code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：查看路由表</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">16</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">16</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">0.0</span>.0.0/0   O_ASE   <span class="token number">150</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.1        GigabitEthernet0/0/0       ······<span class="token punctuation">[</span>R2<span class="token punctuation">]</span></code></pre><p>注：<br>1.默认路由可以把其他路由器的条目吸引到出口路由器<br>2.下放默认路由必须得有默认路由才能下放<br>3.always：不管有没有默认路由都下放</p><h3 id="实验五：末梢网络"><a href="#实验五：末梢网络" class="headerlink" title="实验五：末梢网络"></a><strong>实验五：末梢网络</strong></h3><ul><li><strong>STEP1：</strong> 网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-6-ci-bi-ji/2f82af0675ac40ebb9430e4907964487.png"><ul><li><strong>STEP2.1：</strong> 配置末梢网络(学习了3类LSA)</li></ul><p>末梢网络：不接受4、5、7类LSA，只接受1、3类LSA。有效降低网络的复杂度。<br>只要在一个路由器上配置末梢网络，整个区域都要配置末梢网络</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：配置末梢网络</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>R2-ospf-1<span class="token punctuation">]</span>a <span class="token number">1</span><span class="token punctuation">[</span>R2-ospf-1-area-0.0.0.1<span class="token punctuation">]</span>stub<span class="token comment"># 配置完该命令后，可以看到日志信息</span><span class="token comment"># todo AR1：配置末梢网络</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>R1-ospf-1<span class="token punctuation">]</span>a <span class="token number">1</span><span class="token punctuation">[</span>R1-ospf-1-area-0.0.0.1<span class="token punctuation">]</span>stub<span class="token comment"># 配置完该命令后，ABR会主动产生一个默认路由下放给区域内路由器</span><span class="token comment"># todo AR1：查看路由表的默认路由</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>dis <span class="token function">ip</span> rou</code></pre><p>此时，</p><ul><li><strong>STEP2.2：</strong> 配置末梢网络(不学习3类LSA)</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置末梢网络不接受3类LSA</span><span class="token punctuation">[</span>R1-ospf-1-area-0.0.0.1<span class="token punctuation">]</span>stub no-summary <span class="token comment"># todo AR2：配置末梢网络不接受3类LSA</span><span class="token punctuation">[</span>R2-ospf-1-area-0.0.0.1<span class="token punctuation">]</span>stub no-summary <span class="token comment"># todo AR1：查看路由表</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>dis <span class="token function">ip</span> rou<span class="token comment"># 可以看到除了直连，只剩一条默认路由，但是可以ping通其他区域路由</span></code></pre><p>两个路由器都配置不接受3类LSA邻居关系才能建立<br>骨干区域不能做成末梢网络<br>末梢网络<strong>不允许</strong>在末梢区域<strong>重分发</strong><br>但是 NSSA 可以做到末梢网络和重分发</p><ul><li><strong>STEP3.1：</strong> 配置NSSA</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR4：配置NSSA</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>R4-ospf-1<span class="token punctuation">]</span>a <span class="token number">2</span><span class="token punctuation">[</span>R4-ospf-1-area-0.0.0.2<span class="token punctuation">]</span>nssa <span class="token comment"># todo AR3：配置NSSA</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>R3-ospf-1<span class="token punctuation">]</span>a <span class="token number">2</span><span class="token punctuation">[</span>R3-ospf-1-area-0.0.0.2<span class="token punctuation">]</span>nssa</code></pre><ul><li><strong>STEP3.2：</strong> NSSA下放路由</li></ul><p>正常NSSA不下放默认路由，下放默认路由可以配置以下命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：配置NSSA下放路由</span><span class="token punctuation">[</span>R3-ospf-1-area-0.0.0.2<span class="token punctuation">]</span>nssa default-route-advertise</code></pre><p>如果想要不接受3类LSA，可以配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：不接受3类LSA</span><span class="token punctuation">[</span>R3-ospf-1-area-0.0.0.2<span class="token punctuation">]</span>nssa default-route-advertise no-summary<span class="token comment"># todo AR4：不接受4类LSA</span><span class="token punctuation">[</span>R4-ospf-1-area-0.0.0.2<span class="token punctuation">]</span>nssa default-route-advertise no-summary</code></pre><h2 id="RIP"><a href="#RIP" class="headerlink" title="RIP"></a>RIP</h2><p>RIP属于IGP(内部网关协议)</p><h3 id="原理：距离矢量路由协议"><a href="#原理：距离矢量路由协议" class="headerlink" title="原理：距离矢量路由协议"></a><strong>原理：距离矢量路由协议</strong></h3><p>距离矢量：只关心方向和度量</p><p>OSPF封装在IP中，协议号89<br>RIP封装在UDP中，目标端口号520</p><img src="/2022/06/29/ict-zhan-dui-di-6-ci-bi-ji/7b841e84c947488f9aa30ec124342629.png"><p>注：<br><strong>1.</strong> RIP每隔30s发一次更新，180s未应答就从路由表删除。<br><strong>2.</strong> 更新原则——删除：发跳数为16的更新，然后将该路由条目从路由表中删除掉。<br><strong>3.</strong> 避免路由环路方法：最大跳数、水平分割、路由毒化、毒性反转、触发更新</p><h3 id="实验六：RIP版本"><a href="#实验六：RIP版本" class="headerlink" title="实验六：RIP版本"></a><strong>实验六：RIP版本</strong></h3><img src="/2022/06/29/ict-zhan-dui-di-6-ci-bi-ji/4b56590fe7a24986b4ae1a076b172025.png"><p><strong>RIPv2组播路由更新的目的地址使用<code>224.0.0.9</code></strong></p><ul><li><strong>STEP1：</strong> 网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-6-ci-bi-ji/0c885af960194cfa9eacc2d039cc4891.png"><ul><li><strong>STEP2.1：</strong> 配置IP</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置端口和环回地址</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">12.1</span>.1.1 <span class="token number">24</span>  <span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>int lo <span class="token number">0</span><span class="token punctuation">[</span>AR1-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">1.1</span>.1.1 <span class="token number">32</span><span class="token comment"># todo AR2：配置端口和环回地址</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR2-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">12.1</span>.1.2 <span class="token number">24</span><span class="token punctuation">[</span>AR2-GigabitEthernet0/0/0<span class="token punctuation">]</span>int lo <span class="token number">0</span><span class="token punctuation">[</span>AR2-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">2.2</span>.2.2 <span class="token number">32</span></code></pre><ul><li><strong>STEP2.2：</strong> 配置版本和宣告</li></ul><p>RIPv1只能按地址类别进行宣告。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：版本、宣告</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>rip<span class="token punctuation">[</span>AR1-rip-1<span class="token punctuation">]</span>version <span class="token number">1</span><span class="token punctuation">[</span>AR1-rip-1<span class="token punctuation">]</span>network <span class="token number">1.0</span>.0.0<span class="token punctuation">[</span>AR1-rip-1<span class="token punctuation">]</span>network <span class="token number">12.0</span>.0.0<span class="token comment"># todo AR2：版本、宣告</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>rip<span class="token punctuation">[</span>AR2-rip-1<span class="token punctuation">]</span>version <span class="token number">1</span><span class="token punctuation">[</span>AR2-rip-1<span class="token punctuation">]</span>network <span class="token number">2.0</span>.0.0<span class="token punctuation">[</span>AR2-rip-1<span class="token punctuation">]</span>network <span class="token number">12.0</span>.0.0</code></pre><ul><li><strong>STEP2.3：</strong> 查看路由表</li></ul><p>可以看到路由表中有对方接口和环回地址条目，且是有类路由。</p><ul><li><strong>STEP2.4：</strong> 修改RIP版本</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：版本</span><span class="token punctuation">[</span>AR1-rip-1<span class="token punctuation">]</span>version <span class="token number">2</span><span class="token comment"># todo AR2：版本</span><span class="token punctuation">[</span>AR2-rip-1<span class="token punctuation">]</span>version <span class="token number">2</span></code></pre><ul><li><strong>STEP2.5：</strong> 查看路由表</li></ul><p>可以看到路由表中的有类路由变成无类路由。</p><h3 id="实验七：RIP相关配置"><a href="#实验七：RIP相关配置" class="headerlink" title="实验七：RIP相关配置"></a><strong>实验七：RIP相关配置</strong></h3><ul><li><strong>STEP1：</strong> 网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-6-ci-bi-ji/924ad19ecbdd497a93c903277172efcc.png"><ul><li><strong>STEP2.1：</strong> 配置IP</li></ul><p>路由器：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置IP</span><span class="token punctuation">[</span>AR3<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR3-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">23.1</span>.1.3 <span class="token number">24</span><span class="token punctuation">[</span>AR3-GigabitEthernet0/0/0<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>AR3-GigabitEthernet0/0/1<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.1</span>.2.3 <span class="token number">24</span><span class="token comment"># todo AR2：配置IP</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>int g0/0/0     <span class="token punctuation">[</span>AR2-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">12.1</span>.1.2 <span class="token number">24</span><span class="token punctuation">[</span>AR2-GigabitEthernet0/0/0<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>AR2-GigabitEthernet0/0/1<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">23.1</span>.1.2 <span class="token number">24</span><span class="token comment"># todo AR3：配置IP</span><span class="token punctuation">[</span>AR3<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR3-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">23.1</span>.1.3 <span class="token number">24</span><span class="token punctuation">[</span>AR3-GigabitEthernet0/0/0<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>AR3-GigabitEthernet0/0/1<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.1</span>.2.3 <span class="token number">24</span></code></pre><table><thead><tr><th>主机</th><th>IP地址</th><th>子网掩码</th><th>网关</th></tr></thead><tbody><tr><td>PC1</td><td>10.1.1.250</td><td>255.255.255.0</td><td>10.1.1.1</td></tr><tr><td>PC2</td><td>10.1.2.250</td><td>255.255.255.0</td><td>10.1.2.3</td></tr></tbody></table><ul><li><strong>STEP2.2：</strong> 测试连通性</li></ul><p>主机ping网关，路由器ping邻居，ping通即可</p><ul><li><p><strong>①配置：RIP基本配置</strong></p></li><li><p><strong>STEP3：</strong> 修改版本为RIPv1，宣告网段</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：宣告网段</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>rip<span class="token punctuation">[</span>AR1-rip-1<span class="token punctuation">]</span>version <span class="token number">2</span><span class="token punctuation">[</span>AR1-rip-1<span class="token punctuation">]</span>network <span class="token number">10.0</span>.0.0<span class="token punctuation">[</span>AR1-rip-1<span class="token punctuation">]</span>network <span class="token number">12.0</span>.0.0<span class="token comment"># todo AR2：宣告网段</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>rip<span class="token punctuation">[</span>AR2-rip-1<span class="token punctuation">]</span>version <span class="token number">2</span><span class="token punctuation">[</span>AR2-rip-1<span class="token punctuation">]</span>network <span class="token number">12.0</span>.0.0 <span class="token punctuation">[</span>AR2-rip-1<span class="token punctuation">]</span>network <span class="token number">23.0</span>.0.0<span class="token comment"># todo AR3：宣告网段</span><span class="token punctuation">[</span>AR3<span class="token punctuation">]</span>rip<span class="token punctuation">[</span>AR3-rip-1<span class="token punctuation">]</span>version <span class="token number">2</span><span class="token punctuation">[</span>AR3-rip-1<span class="token punctuation">]</span>network <span class="token number">23.0</span>.0.0<span class="token punctuation">[</span>AR3-rip-1<span class="token punctuation">]</span>network <span class="token number">10.0</span>.0.0</code></pre><ul><li><p><strong>②配置：路由汇总</strong></p></li><li><p><strong>STEP4：</strong> 配置汇总</p></li></ul><p>RIPv1默认自动汇总，不能手动开启或关闭，RIPv2默认自动汇总，可以手动开启或关闭。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo STEP1：所有路由器改为RIPv2，开启自动汇总</span><span class="token comment"># todo STEP2：查看AR2路由表，发现是没汇总的明细路由</span><span class="token punctuation">[</span>AR2-rip-1<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">12</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">12</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface       <span class="token number">10.1</span>.1.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.1        GigabitEthernet0/0/0       <span class="token number">10.1</span>.2.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.3        GigabitEthernet0/0/1       ······<span class="token punctuation">[</span>AR2-rip-1<span class="token punctuation">]</span><span class="token comment"># todo STEP3：所有路由器关闭自动汇总，路由表不变</span><span class="token comment"># todo STEP4：所有路由器改为RIPv1，开启自动汇总</span><span class="token comment"># todo STEP5：查看AR2路由表，发现汇总路由</span><span class="token punctuation">[</span>AR2-rip-1<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">11</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">12</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface       <span class="token number">10.0</span>.0.0/8   RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.1        GigabitEthernet0/0/0                    RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.3        GigabitEthernet0/0/1       ······<span class="token punctuation">[</span>AR2-rip-1<span class="token punctuation">]</span><span class="token comment"># todo STEP6：所有路由器关闭自动汇总，路由表不变</span></code></pre><ul><li><p><strong>③配置：链路聚合</strong></p></li><li><p><strong>STEP1：</strong> 网络拓扑</p></li></ul><img src="/2022/06/29/ict-zhan-dui-di-6-ci-bi-ji/2affc9fb6a9b44178218ccef6cc2c94e.png"><ul><li><strong>STEP2：</strong> 配置环回地址</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置环回地址</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>int lo <span class="token number">0</span><span class="token punctuation">[</span>AR1-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.2</span>.0.1 <span class="token number">24</span><span class="token punctuation">[</span>AR1-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.2</span>.1.1 <span class="token number">24</span> sub<span class="token punctuation">[</span>AR1-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.2</span>.2.1 <span class="token number">24</span> sub<span class="token punctuation">[</span>AR1-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.2</span>.3.1 <span class="token number">24</span> sub</code></pre><ul><li><strong>STEP3.1：</strong> 修改所有路由器为RIPv2</li><li><strong>STEP3.2：</strong> 配置链路聚合</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1配置链路聚合</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>rip summary-address <span class="token number">10.2</span>.0.0 <span class="token number">255.255</span>.252.0</code></pre><ul><li><strong>STEP3.3：</strong> 查看路由表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 查看AR2路由表</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">13</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">13</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface       <span class="token number">10.1</span>.1.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.1        GigabitEthernet0/0/0       <span class="token number">10.1</span>.2.0/24  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">23.1</span>.1.3        GigabitEthernet0/0/1       <span class="token number">10.2</span>.0.0/22  RIP     <span class="token number">100</span>  <span class="token number">1</span>           D   <span class="token number">12.1</span>.1.1        GigabitEthernet0/0/0       ······<span class="token punctuation">[</span>AR2-rip-1<span class="token punctuation">]</span></code></pre><ul><li><p><strong>④配置：下放路由</strong></p></li><li><p><strong>STEP1：</strong> 网络拓扑</p></li></ul><img src="/2022/06/29/ict-zhan-dui-di-6-ci-bi-ji/c8aa4658042942c88cf32cfcc8d21c49.png"><ul><li><strong>STEP2：</strong> 配置云</li></ul><p>绑定信息：1.UDP、2.以太网<br>出端口：1<br>入端口：2<br>双向通道：√</p><ul><li><strong>STEP3：</strong> 配置下放默认路由</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：配置下放默认路由</span><span class="token punctuation">[</span>AR2-rip-1<span class="token punctuation">]</span>default-route originate </code></pre><ul><li><strong>STEP4：</strong> 查看路由表</li></ul><p>查看AR1、AR3路由表，可以看到默认路由的条目：<br><code>0.0.0.0/0   RIP     100  1           D   12.1.1.2        GigabitEthernet0/0/0</code><br><code>0.0.0.0/0   RIP     100  1           D   23.1.1.2        GigabitEthernet0/0/0</code></p><ul><li><strong>⑤配置：抑制接口</strong></li></ul><p>抑制接口：只收不发，一般连接终端接口配置抑制接口</p><ul><li><p><strong>STEP1：</strong> 网络拓扑(同上)</p></li><li><p><strong>STEP2：</strong> 配置抑制接口</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：设置抑制接口</span><span class="token punctuation">[</span>AR1-rip-1<span class="token punctuation">]</span>silent-interface g0/0/1<span class="token comment"># [AR1-rip-1]silent-interface all  # 把所有端口设置为抑制接口</span></code></pre><p>实际上，可以先把所有端口设置为抑制接口，然后再取消其中某个需要的接口</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># show 该配置模拟器上不可用，实际中可用</span><span class="token punctuation">[</span>AR1-rip-1<span class="token punctuation">]</span>silent-interface all<span class="token punctuation">[</span>AR1-rip-1<span class="token punctuation">]</span>un silent-interface g0/0/0</code></pre><ul><li><strong>⑥配置：认证</strong></li></ul><p>认证都是在接口下配置的</p><ul><li><p><strong>STEP1：</strong> 网络拓扑(同上)</p></li><li><p><strong>STEP2：</strong> 配置认证</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置认证</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>rip authentication-mode md5 usual cipher <span class="token number">123456</span><span class="token comment"># todo AR2：配置认证</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR2-GigabitEthernet0/0/0<span class="token punctuation">]</span>rip authentication-mode md5 usual cipher <span class="token number">123456</span></code></pre><p><strong>密码不要加空格！！！</strong></p><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><p>使用SecureCRT连接eNSP设备：<a href="https://blog.csdn.net/qq_41490561/article/details/104894891">CRT(Securecrt)连接ENSP设备</a></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> ICT战队数据通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HCIA </tag>
            
            <tag> 华为eNSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICT战队-第5次笔记</title>
      <link href="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/"/>
      <url>/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="ICT战队-第5次笔记"><a href="#ICT战队-第5次笔记" class="headerlink" title="ICT战队-第5次笔记"></a>ICT战队-第5次笔记</h1><p>[toc]</p><h2 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h2><h3 id="实验一：静态路由"><a href="#实验一：静态路由" class="headerlink" title="实验一：静态路由"></a><strong>实验一：静态路由</strong></h3><ul><li>STEP1：网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/2f4fbfc4c48246bcb81ce7296075cf04.png"><ul><li>STEP2.1：路由器配置IP</li></ul><p>说明：<code>AR几</code>就配置<code>X.X.X.几/24</code>的地址，例：AR2：12.1.5.2/24。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># AR1</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.1.1 <span class="token number">24</span><span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>AR1-GigabitEthernet0/0/1<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">12.1</span>.1.1 <span class="token number">24</span><span class="token comment"># AR2</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR2-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">12.1</span>.1.2 <span class="token number">24</span><span class="token punctuation">[</span>AR2-GigabitEthernet0/0/0<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>AR2-GigabitEthernet0/0/1<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">23.1</span>.1.2 <span class="token number">24</span><span class="token comment"># AR3</span><span class="token punctuation">[</span>AR3<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR3-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">23.1</span>.1.3 <span class="token number">24</span><span class="token punctuation">[</span>AR3-GigabitEthernet0/0/0<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>AR3-GigabitEthernet0/0/1<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.2.3 <span class="token number">24</span></code></pre><ul><li>STEP2.2：主机配置IP</li></ul><table><thead><tr><th align="center">主机</th><th align="center">IP地址</th><th align="center">掩码</th><th align="center">网关</th></tr></thead><tbody><tr><td align="center">PC1</td><td align="center">192.168.1.250</td><td align="center">255.255.255.0</td><td align="center">192.168.1.1</td></tr><tr><td align="center">PC2</td><td align="center">192.168.2.250</td><td align="center">255.255.255.0</td><td align="center">192.168.2.3</td></tr></tbody></table><ul><li>STEP2.3：测试网络连通性(略)</li></ul><p>用PC1 ping PC2，ping不通。</p><ul><li>STEP2.4：查看路由表</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">10</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">10</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface       <span class="token number">12.1</span>.1.0/24  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">12.1</span>.1.2/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/0     <span class="token number">12.1</span>.1.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/0       <span class="token number">23.1</span>.1.0/24  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">23.1</span>.1.2        GigabitEthernet0/0/1       <span class="token number">23.1</span>.1.2/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/1     <span class="token number">23.1</span>.1.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/1      <span class="token number">127.0</span>.0.0/8   Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0      <span class="token number">127.0</span>.0.1/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0<span class="token number">127.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0<span class="token number">255.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0<span class="token punctuation">[</span>AR2<span class="token punctuation">]</span></code></pre><ul><li>STEP2.5：DEBUG</li></ul><p>在理想环境下，抓包容易，但是在真实生产环境中，抓包很难实现。因此，一般使用DEBUG写日志。</p><p><font color="#999AAA">让客户主动找你，别主动去找客户。</font></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 显示日志</span><span class="token operator">&lt;</span>AR<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>terminal monitor  <span class="token comment"># 在终端显示日志</span>Info: Current terminal monitor is on.<span class="token operator">&lt;</span>AR<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>terminal debugging  <span class="token comment"># 显示日志等级</span>Info: Current terminal debugging is on.<span class="token comment"># &lt;AR2&gt;terminal all  # 永远不要使用该命令</span><span class="token comment"># todo 显示相应日志</span><span class="token operator">&lt;</span>AR<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>debugging <span class="token function">ip</span> icmp</code></pre><p>然后，使用AR1 ping AR2，可以在AR2终端看到(ping通了)：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2终端信息</span><span class="token operator">&lt;</span>AR<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>Oct <span class="token number">12</span> <span class="token number">2021</span> <span class="token number">17</span>:46:11.832.2-08:00 AR2 IP/7/debug_icmp:ICMP Send: echo-reply<span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">Code</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>, Src <span class="token operator">=</span> <span class="token number">2.1</span>.1.12, Dst <span class="token operator">=</span> <span class="token number">1.1</span>.1.12, ICMP Id <span class="token operator">=</span> 0xabcd, ICMP Seq <span class="token operator">=</span> <span class="token number">256</span><span class="token operator">&lt;</span>AR<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>Oct <span class="token number">12</span> <span class="token number">2021</span> <span class="token number">17</span>:46:12.272.1-08:00 AR2 IP/7/debug_icmp:ICMP Receive: echo<span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token number">2048</span>, <span class="token assign-left variable">Code</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>, Src <span class="token operator">=</span> <span class="token number">1.1</span>.1.12, Dst <span class="token operator">=</span> <span class="token number">2.1</span>.1.12, ICMP Id <span class="token operator">=</span> 0xabcd, ICMP Seq <span class="token operator">=</span> <span class="token number">512</span><span class="token operator">&lt;</span>AR<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>Oct <span class="token number">12</span> <span class="token number">2021</span> <span class="token number">17</span>:46:12.272.2-08:00 AR2 IP/7/debug_icmp:ICMP Send: echo-reply<span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">Code</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>, Src <span class="token operator">=</span> <span class="token number">2.1</span>.1.12, Dst <span class="token operator">=</span> <span class="token number">1.1</span>.1.12, ICMP Id <span class="token operator">=</span> 0xabcd, ICMP Seq <span class="token operator">=</span> <span class="token number">512</span><span class="token operator">&lt;</span>AR<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>Oct <span class="token number">12</span> <span class="token number">2021</span> <span class="token number">17</span>:46:12.772.1-08:00 AR2 IP/7/debug_icmp:ICMP Receive: echo<span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token number">2048</span>, <span class="token assign-left variable">Code</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>, Src <span class="token operator">=</span> <span class="token number">1.1</span>.1.12, Dst <span class="token operator">=</span> <span class="token number">2.1</span>.1.12, ICMP Id <span class="token operator">=</span> 0xabcd, ICMP Seq <span class="token operator">=</span> <span class="token number">768</span><span class="token operator">&lt;</span>AR<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>Oct <span class="token number">12</span> <span class="token number">2021</span> <span class="token number">17</span>:46:12.772.2-08:00 AR2 IP/7/debug_icmp:ICMP Send: echo-reply<span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">Code</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>, Src <span class="token operator">=</span> <span class="token number">2.1</span>.1.12, Dst <span class="token operator">=</span> <span class="token number">1.1</span>.1.12, ICMP Id <span class="token operator">=</span> 0xabcd, ICMP Seq <span class="token operator">=</span> <span class="token number">768</span><span class="token operator">&lt;</span>AR<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>Oct <span class="token number">12</span> <span class="token number">2021</span> <span class="token number">17</span>:46:13.272.1-08:00 AR2 IP/7/debug_icmp:ICMP Receive: echo<span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token number">2048</span>, <span class="token assign-left variable">Code</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>, Src <span class="token operator">=</span> <span class="token number">1.1</span>.1.12, Dst <span class="token operator">=</span> <span class="token number">2.1</span>.1.12, ICMP Id <span class="token operator">=</span> 0xabcd, ICMP Seq <span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">&lt;</span>AR<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>Oct <span class="token number">12</span> <span class="token number">2021</span> <span class="token number">17</span>:46:13.272.2-08:00 AR2 IP/7/debug_icmp:ICMP Send: echo-reply<span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">Code</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>, Src <span class="token operator">=</span> <span class="token number">2.1</span>.1.12, Dst <span class="token operator">=</span> <span class="token number">1.1</span>.1.12, ICMP Id <span class="token operator">=</span> 0xabcd, ICMP Seq <span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">&lt;</span>AR<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>Oct <span class="token number">12</span> <span class="token number">2021</span> <span class="token number">17</span>:46:13.762.1-08:00 AR2 IP/7/debug_icmp:ICMP Receive: echo<span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token number">2048</span>, <span class="token assign-left variable">Code</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>, Src <span class="token operator">=</span> <span class="token number">1.1</span>.1.12, Dst <span class="token operator">=</span> <span class="token number">2.1</span>.1.12, ICMP Id <span class="token operator">=</span> 0xabcd, ICMP Seq <span class="token operator">=</span> <span class="token number">1280</span><span class="token operator">&lt;</span>AR<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>Oct <span class="token number">12</span> <span class="token number">2021</span> <span class="token number">17</span>:46:13.762.2-08:00 AR2 IP/7/debug_icmp:ICMP Send: echo-reply<span class="token punctuation">(</span>Type<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">Code</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>, Src <span class="token operator">=</span> <span class="token number">2.1</span>.1.12, Dst <span class="token operator">=</span> <span class="token number">1.1</span>.1.12, ICMP Id <span class="token operator">=</span> 0xabcd, ICMP Seq <span class="token operator">=</span> <span class="token number">1280</span><span class="token operator">&lt;</span>AR<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span></code></pre><p><a href="https://blog.csdn.net/zhenyi2000/article/details/79795095">ICMP类型字段(Type)以及代码字段(Code)含义汇总</a></p><ul><li>STEP3.1：配置静态路由</li></ul><p>静态路由配置语法：<code>[AR]ip route-static &lt;目标网段&gt; &lt;子网掩码&gt; &lt;下跳地址&gt;</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1配置静态路由</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>ip route-static <span class="token number">192.168</span>.2.0 <span class="token number">255.255</span>.255.0 <span class="token number">12.1</span>.1.2<span class="token comment"># todo AR2配置静态路由</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>ip route-static <span class="token number">192.168</span>.2.0 <span class="token number">255.255</span>.255.0 <span class="token number">23.1</span>.1.3<span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>ip route-static <span class="token number">192.168</span>.1.0 <span class="token number">255.255</span>.255.0 <span class="token number">12.1</span>.1.1<span class="token comment"># todo AR3配置静态路由</span><span class="token punctuation">[</span>AR3<span class="token punctuation">]</span>ip route-static <span class="token number">192.168</span>.1.0 <span class="token number">255.255</span>.255.0 <span class="token number">23.1</span>.1.2</code></pre><ul><li>STEP3.2：测试网络连通性</li></ul><p>主机之间可以ping通，其通信过程为：</p><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/33d9c319820d41ddb02fabbe4654a383.png"><p><strong>路由器基于路由表进行转发</strong>。</p><h3 id="小实验-1"><a href="#小实验-1" class="headerlink" title="小实验$_1$"></a>小实验$_1$</h3><p>两个路由器地址不在同一网段能否通信。</p><ul><li>STEP1：网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/62af52d773c54532bb3cd64d843be2e8.png"><ul><li>STEP2：路由器配置IP(略)</li><li>STEP3：测试连通性(略：路由器互相ping不通)</li><li>STEP4：添加静态路由</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>ip route-static <span class="token number">192.168</span>.1.1 <span class="token number">255.255</span>.255.0 g0/0/0Info: The destination address and mask of the configured static route mismatched, and the static route <span class="token number">192.168</span>.1.0/24 was generated.<span class="token comment"># todo AR2</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>ip route-static <span class="token number">12.1</span>.1.1 <span class="token number">255.255</span>.255.0 g0/0/0Info: The destination address and mask of the configured static route mismatched, and the static route <span class="token number">12.1</span>.1.0/24 was generated.</code></pre><ul><li>STEP5：测试连通性</li></ul><p>此时，<strong>按理来说</strong>，应该能ping通了。<br>但是，涉及到ARP轮询技术(?)，没有ping通。</p><blockquote><p>注；如果路由器没有基于路由表进行转发，一般就是路由器出BUG了。</p></blockquote><h3 id="原理：路由协议"><a href="#原理：路由协议" class="headerlink" title="原理：路由协议"></a><strong>原理：路由协议</strong></h3><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/ac940265ba7d419bb08b350e0f188a80.png"><p>查询AS：<a href="https://www.cidr-report.org/as2.0/">CIDR Report</a></p><table><thead><tr><th>算法</th><th>协议</th></tr></thead><tbody><tr><td>距离矢量路由选择协议</td><td>RIP、BGP</td></tr><tr><td>链路状态路由选择协议</td><td>OSPF、ISIS</td></tr></tbody></table><p>距离矢量：实时根据方向的距离转发数据<br>链路状态：已经计算好转发数据的最短路径</p><p>路由度量：</p><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/1849c73748a74dba92878c6f96ce3003.png"><p>等价路由：ECMP</p><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/b8f533e8554148be93a4b4cb5f58f219.png"><p>例：等价路由</p><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/c74f445e32564661b7d857b3d856a1d6.png"><p>路由表<strong>最长匹配原则</strong></p><p>VRP缺省路由优先级：</p><table><thead><tr><th align="center">路由协议</th><th align="center">优先级</th></tr></thead><tbody><tr><td align="center">DIRECT</td><td align="center">0</td></tr><tr><td align="center">OSPF</td><td align="center">10</td></tr><tr><td align="center">IS-IS</td><td align="center">15</td></tr><tr><td align="center">STATIC</td><td align="center">60</td></tr><tr><td align="center">RIP</td><td align="center">100</td></tr><tr><td align="center">OSPF ASE</td><td align="center">150</td></tr></tbody></table><h3 id="小实验-2"><a href="#小实验-2" class="headerlink" title="小实验$_2$"></a>小实验$_2$</h3><ul><li>STEP1：网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/8aaf15f88feb46068eec0ef6c6ba23f3.png"><ul><li>STEP2.1：路由器配置环回口地址</li></ul><p>路由器的环回口可以自己指定，配置任意IP地址。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置环回口</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>int LoopBack <span class="token number">0</span><span class="token punctuation">[</span>AR1-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">1.1</span>.1.1 <span class="token number">32</span><span class="token comment"># todo 查看环回地址</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>dis <span class="token function">ip</span> rou<span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>dis <span class="token function">ip</span> int bri</code></pre><ul><li>STEP2.2：配置IP地址</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置IP</span><span class="token punctuation">[</span>AR1int g0/0/0<span class="token punctuation">[</span>AR1-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">12.1</span>.1.1 <span class="token number">24</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：配置IP</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR2-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">12.1</span>.1.2 <span class="token number">24</span><span class="token punctuation">[</span>AR2-GigabitEthernet0/0/0<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>AR2-GigabitEthernet0/0/1<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.1.2 <span class="token number">24</span></code></pre><table><thead><tr><th>主机</th><th>IP地址</th><th>子网掩码</th><th>网关</th></tr></thead><tbody><tr><td>PC1</td><td>192.168.1.250</td><td>255.255.255.0</td><td>192.168.1.2</td></tr></tbody></table><ul><li>STEP2.3：配置默认路由</li></ul><p>末梢网络一般添加默认路由</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置默认路由</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>ip route-static <span class="token number">192.168</span>.1.0 <span class="token number">255.255</span>.255.0 <span class="token number">12.1</span>.1.2</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：配置默认路由</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>ip route-static <span class="token number">0.0</span>.0.0 <span class="token number">0.0</span>.0.0 <span class="token number">12.1</span>.1.1</code></pre><ul><li>STEP0：测试连通</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># tood AR1：</span><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>ping -a <span class="token number">1.1</span>.1.1 <span class="token number">192.168</span>.1.250    PING <span class="token number">192.168</span>.1.250: <span class="token number">56</span>  data bytes, press CTRL_C to <span class="token builtin class-name">break</span>    Request <span class="token function">time</span> out    Reply from <span class="token number">192.168</span>.1.250: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">Sequence</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">127</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">40</span> ms    Reply from <span class="token number">192.168</span>.1.250: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">Sequence</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">127</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">30</span> ms    Reply from <span class="token number">192.168</span>.1.250: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">Sequence</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">127</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">30</span> ms    Reply from <span class="token number">192.168</span>.1.250: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">Sequence</span><span class="token operator">=</span><span class="token number">5</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">127</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">20</span> ms  --- <span class="token number">192.168</span>.1.250 <span class="token function">ping</span> statistics ---    <span class="token number">5</span> packet<span class="token punctuation">(</span>s<span class="token punctuation">)</span> transmitted    <span class="token number">4</span> packet<span class="token punctuation">(</span>s<span class="token punctuation">)</span> received    <span class="token number">20.00</span>% packet loss    round-trip min/avg/max <span class="token operator">=</span> <span class="token number">20</span>/30/40 ms<span class="token punctuation">[</span>AR1<span class="token punctuation">]</span></code></pre><ul><li>STEP3：删除主机连线，路由器之间成环</li></ul><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/3d43052de942494c9a89739643363d1a.png"><p>此时测试连通性：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>AR1<span class="token punctuation">]</span>tracert -a <span class="token number">1.1</span>.1.1 <span class="token number">192.168</span>.1.250 <span class="token function">traceroute</span> to  <span class="token number">192.168</span>.1.250<span class="token punctuation">(</span><span class="token number">192.168</span>.1.250<span class="token punctuation">)</span>, max hops: <span class="token number">30</span> ,packet length: <span class="token number">40</span>,press CTRL_C to <span class="token builtin class-name">break</span>  <span class="token number">1</span> <span class="token number">12.1</span>.1.2 <span class="token number">50</span> ms  <span class="token number">20</span> ms  <span class="token number">20</span> ms  <span class="token number">2</span> <span class="token number">12.1</span>.1.1 <span class="token number">10</span> ms  <span class="token number">20</span> ms  <span class="token number">10</span> ms  <span class="token number">3</span> <span class="token number">12.1</span>.1.2 <span class="token number">20</span> ms  <span class="token number">10</span> ms  <span class="token number">30</span> ms  <span class="token number">4</span> <span class="token number">12.1</span>.1.1 <span class="token number">20</span> ms  <span class="token number">20</span> ms  <span class="token number">20</span> ms ······<span class="token number">27</span> <span class="token number">12.1</span>.1.2 <span class="token number">80</span> ms  <span class="token number">60</span> ms  <span class="token number">100</span> ms <span class="token number">28</span> <span class="token number">12.1</span>.1.1 <span class="token number">70</span> ms  <span class="token number">80</span> ms  <span class="token number">80</span> ms <span class="token number">29</span> <span class="token number">12.1</span>.1.2 <span class="token number">70</span> ms  <span class="token number">100</span> ms  <span class="token number">80</span> ms <span class="token number">30</span> <span class="token number">12.1</span>.1.1 <span class="token number">80</span> ms  <span class="token number">90</span> ms  <span class="token number">80</span> ms <span class="token punctuation">[</span>AR1<span class="token punctuation">]</span></code></pre><p>环路原因：路由器端口down了后，其路由表中的对应的路由条目会被删除，此时路由器就会根据默认路由进行转发，这两台路由器都根据默认路由进行转发就形成了环路。</p><ul><li>STEP4：配置防环的丢弃路由</li></ul><p>丢弃路由：匹配到指定的地址都丢弃掉</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：配置丢弃路由</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>ip route-static <span class="token number">192.168</span>.1.0 <span class="token number">255.255</span>.255.0 NULL <span class="token number">0</span></code></pre><ul><li>STEP0：分别连接/断开连线测试连通性</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：线路连接时的路由表</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">11</span>       Routes <span class="token builtin class-name">:</span> <span class="token number">11</span>       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">0.0</span>.0.0/0   Static  <span class="token number">60</span>   <span class="token number">0</span>          RD   <span class="token number">12.1</span>.1.1        GigabitEthernet0/0/0       <span class="token number">12.1</span>.1.0/24  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">12.1</span>.1.2/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/0    ······    <span class="token number">192.168</span>.1.0/24  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">192.168</span>.1.2     GigabitEthernet0/0/1    <span class="token number">192.168</span>.1.2/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/1  <span class="token number">192.168</span>.1.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/1<span class="token number">255.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0<span class="token comment"># todo AR2：线路断开时的路由表</span><span class="token punctuation">[</span>AR2<span class="token punctuation">]</span>dis <span class="token function">ip</span> rouRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations <span class="token builtin class-name">:</span> <span class="token number">9</span>        Routes <span class="token builtin class-name">:</span> <span class="token number">9</span>        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        <span class="token number">0.0</span>.0.0/0   Static  <span class="token number">60</span>   <span class="token number">0</span>          RD   <span class="token number">12.1</span>.1.1        GigabitEthernet0/0/0       <span class="token number">12.1</span>.1.0/24  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">12.1</span>.1.2        GigabitEthernet0/0/0       <span class="token number">12.1</span>.1.2/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       GigabitEthernet0/0/0    ······    <span class="token number">192.168</span>.1.0/24  Static  <span class="token number">60</span>   <span class="token number">0</span>           D   <span class="token number">0.0</span>.0.0         NULL0<span class="token number">255.255</span>.255.255/32  Direct  <span class="token number">0</span>    <span class="token number">0</span>           D   <span class="token number">127.0</span>.0.1       InLoopBack0</code></pre><p>注意到：<br>连接：<code>192.168.1.0/24  Direct  0    0           D   192.168.1.2     GigabitEthernet0/0/1</code><br>断开：<code>192.168.1.0/24  Static  60   0           D   0.0.0.0         NULL0</code></p><ul><li>总结<ul><li>路由：RIP、OSPG、BGP</li><li>动态协议：距离矢量、链路状态</li><li>路由表：目的地址、协议、优先级、度量、下一跳、下一跳端口</li><li>等价路由：同一协议，到同一目的有多个相同度量</li></ul></li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h3><p><font color="#999AAA">略：上面已经做过</font></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 命令：配置到达某个网段的静态路由</span><span class="token punctuation">[</span>AR<span class="token punctuation">]</span>ip route-static <span class="token operator">&lt;</span>目标网段<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>子网掩码<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>出口地址<span class="token operator">&gt;</span><span class="token punctuation">[</span>AR<span class="token punctuation">]</span>ip route-static <span class="token operator">&lt;</span>目标网段<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>子网掩码位数<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>下一跳地址<span class="token operator">&gt;</span><span class="token punctuation">[</span>AR<span class="token punctuation">]</span>ip route-static <span class="token operator">&lt;</span>目标网段<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>子网掩码位数<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>下一跳端口<span class="token operator">&gt;</span></code></pre><h3 id="负载分担"><a href="#负载分担" class="headerlink" title="负载分担"></a>负载分担</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 命令：配置等价路由实现负载分担</span><span class="token punctuation">[</span>AR<span class="token punctuation">]</span>ip route-static <span class="token operator">&lt;</span>目标网段<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>子网掩码<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>出口地址<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token punctuation">[</span>AR<span class="token punctuation">]</span>ip route-static <span class="token operator">&lt;</span>目标网段<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>子网掩码<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>出口地址<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">[</span>AR<span class="token punctuation">]</span>ip route-static <span class="token operator">&lt;</span>目标网段<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>子网掩码<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>出口地址<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span></code></pre><h3 id="路由备份"><a href="#路由备份" class="headerlink" title="路由备份"></a>路由备份</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 命令：静态路由的路由备份</span><span class="token punctuation">[</span>AR<span class="token punctuation">]</span>ip route-static <span class="token operator">&lt;</span>目标网段<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>子网掩码<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>出口地址<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token punctuation">[</span>AR<span class="token punctuation">]</span>ip route-static <span class="token operator">&lt;</span>目标网段<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>子网掩码<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>出口地址<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> preference <span class="token number">100</span></code></pre><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/9a6bb1b37b814f4f9ad645286c1befb7.png"><h3 id="缺省路由"><a href="#缺省路由" class="headerlink" title="缺省路由"></a>缺省路由</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 命令：配置缺省路由</span><span class="token punctuation">[</span>AR<span class="token punctuation">]</span>ip route-static <span class="token number">0.0</span>.0.0 <span class="token number">0.0</span>.0.0 <span class="token operator">&lt;</span>下一跳地址<span class="token operator">&gt;</span></code></pre><h2 id="OSPF路由协议"><a href="#OSPF路由协议" class="headerlink" title="OSPF路由协议"></a>OSPF路由协议</h2><h3 id="原理：OSPF路由协议"><a href="#原理：OSPF路由协议" class="headerlink" title="原理：OSPF路由协议"></a><strong>原理：OSPF路由协议</strong></h3><ul><li><strong>①开方式最短路径优先协议OSPF</strong></li></ul><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/a7cc17215aba44b2a7f5d4bc5b7b1c34.png"><p>协议号：<a href="https://blog.csdn.net/zhenyi2000/article/details/79795140">IP协议(Protocol)字段释义</a></p><p>有些特定<strong>防火墙过滤</strong>某一协议得写协议号。</p><ul><li><strong>②OSPF基本特点</strong></li></ul><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/d9775633684f4fc68de933983ab55079.png"><p>无类：不关心IP地址的类别<br>区域划分：骨干、非骨干区域(非骨干必须和骨干直连)<br>无路由自环：迪杰斯特拉<br>收敛快：毫秒级别<br>组播：代替广播，使用224.0.0.5和224.0.0.6<br>等值路由：负载均衡<br>认证：支持认证</p><ul><li><strong>③OSPF报文</strong></li></ul><p>OSPF的3张表：邻居表、链路状态数据库、路由表</p><p>OSPF五种报文：<a href="https://blog.csdn.net/qq_43499889/article/details/104987294">OSPF报文类型及格式总结</a><br><font color="#999AAA">LSA( Link-State Advertisement )链路状态通告</font></p><ol><li>Hello报文：用来发现并维持邻居</li><li>DD报文(Database Description)：用来描述本地LSDB信息(和邻居是否互通)，只携带LSA的Header</li><li>LSR报文(Link State Request，链路状态请求)：用于请求邻居的LSA</li><li>LSU报文()：发送LSA具体信息，或者用于泛洪LSA，或者用于隐式回应LSU报文</li><li>LSAck报文()：用于回应LSU报文</li></ol><ul><li><strong>④OSPF状态过程</strong></li></ul><p><strong>Init</strong>：已经把Hello报文发出去，但是暂没收到回应，默认10s发一次，如果收到回复，则进入 2-way 状态<br><strong>2-way</strong>：选举DR和BDR，2-way这个状态最长持续40s。<br><strong>ExStart</strong>：<br><strong>Exchange</strong>：<br><strong>Loading</strong>：<br><strong>Full</strong>：</p><ul><li><strong>⑤DR和BDR</strong></li></ul><p>避免一个更新被重复传递多次，减少路由更新消耗的资源。</p><p>DRother只能和DR、BDR建立邻接关系，DRother只能建立 2-way 状态</p><p>选DR和BDR：比较RouterID(RID)大小(越大越优)</p><p><strong>RID来源</strong>：<br>1.管理员手动设置<br>2.活动的环回口最大IP<br>3.活动的物理接口最大IP</p><p>在Wireshark中，OSPF数据帧的<code>Source OSPF Router</code>就是RID</p><p>OSPF先选举BDR：比大小，谁大谁先成为BDR，如果没有DR，BDR就变成DR，然后再选举BDR。</p><p>显示确认：使用专有的报文进行确认<br><strong>隐式确认</strong>：(基于<strong>序列号</strong>的确认机制)收到一份报文，然后向发送者回复一份<strong>序列号相同</strong>的报文。仅有OSPF支持这种确认机制。</p><h3 id="实验二：使用debug观察邻接关系形成过程"><a href="#实验二：使用debug观察邻接关系形成过程" class="headerlink" title="实验二：使用debug观察邻接关系形成过程"></a><strong>实验二：使用debug观察邻接关系形成过程</strong></h3><ul><li>STEP1：网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/332dc88ff0414092aa2b22ee4142ebcf.png"><ul><li>STEP2：查看OSPF表</li></ul><p>首先打开抓包</p><p>然后清空邻居关系</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>R<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>reset ospf process Warning: The OSPF process will be reset. Continue? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span>:y</code></pre><p>查看抓到的数据包/查询路由表State：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 查看OSPF邻居表</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>dis ospf peer         OSPF Process <span class="token number">1</span> with Router ID <span class="token number">12.1</span>.1.1                 Neighbors  Area <span class="token number">0.0</span>.0.0 interface <span class="token number">12.1</span>.1.1<span class="token punctuation">(</span>GigabitEthernet0/0/0<span class="token punctuation">)</span>'s neighbors Router ID: <span class="token number">12.1</span>.1.2         Address: <span class="token number">12.1</span>.1.2           State: Full  Mode:Nbr is  Master  Priority: <span class="token number">1</span>   DR: <span class="token number">12.1</span>.1.2  BDR: <span class="token number">12.1</span>.1.1  MTU: <span class="token number">0</span>       Dead timer due <span class="token keyword">in</span> <span class="token number">31</span>  sec    Retrans timer interval: <span class="token number">5</span>    Neighbor is up <span class="token keyword">for</span> 00:03:03        Authentication Sequence: <span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span>R1<span class="token punctuation">]</span></code></pre><h3 id="实验三：DR和BDR"><a href="#实验三：DR和BDR" class="headerlink" title="实验三：DR和BDR"></a><strong>实验三：DR和BDR</strong></h3><ul><li>STEP1：网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/d946c30a16fc44918cc8e3406bbfdd3b.png"><ul><li>STEP2：配置IP地址(略)</li></ul><p>除了网络拓扑中的端口IP地址，还有：</p><table><thead><tr><th>路由器</th><th>环回地址</th></tr></thead><tbody><tr><td>AR1</td><td>10.0.1.1</td></tr><tr><td>AR2</td><td>10.0.2.2</td></tr><tr><td>AR3</td><td>10.0.3.3</td></tr></tbody></table><ul><li>STEP3：配置OSPF</li></ul><p>OSPF宣告网段：<code>network &lt;目标网段&gt; &lt;反掩码&gt;</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：配置OSPF</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>ospf  <span class="token comment"># OSPF进程ID</span><span class="token punctuation">[</span>R3-ospf-1<span class="token punctuation">]</span>a <span class="token number">0</span>  <span class="token comment"># 进入区域</span><span class="token punctuation">[</span>R3-ospf-1-area-0.0.0.0<span class="token punctuation">]</span>network <span class="token number">10.0</span>.123.0 <span class="token number">0.0</span>.0.255  <span class="token comment"># 宣告直连网段</span><span class="token punctuation">[</span>R3-ospf-1-area-0.0.0.0<span class="token punctuation">]</span>network <span class="token number">10.0</span>.3.0 <span class="token number">0.0</span>.0.255  <span class="token comment"># 宣告换回网段</span><span class="token comment"># [R3-ospf-1]silent-interface LoopBack 0  # 如果需要，启用抑制端口</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1：配置OSPF</span><span class="token punctuation">[</span>R1<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>R1-ospf-1<span class="token punctuation">]</span>a <span class="token number">0</span><span class="token punctuation">[</span>R1-ospf-1-area-0.0.0.0<span class="token punctuation">]</span>network <span class="token number">10.0</span>.123.0 <span class="token number">0.0</span>.0.255······<span class="token punctuation">(</span>可以看到：Down-<span class="token operator">&gt;</span>Init-<span class="token operator">&gt;</span>2Way-<span class="token operator">&gt;</span>ExStart-<span class="token operator">&gt;</span>Exchange-<span class="token operator">&gt;</span>Loading<span class="token punctuation">)</span><span class="token punctuation">[</span>R1-ospf-1-area-0.0.0.0<span class="token punctuation">]</span>network <span class="token number">10.0</span>.1.0 <span class="token number">0.0</span>.0.255</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR2：配置OSPF</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>R2-ospf-1<span class="token punctuation">]</span>a <span class="token number">0.0</span>.0.0<span class="token punctuation">[</span>R2-ospf-1-area-0.0.0.0<span class="token punctuation">]</span>network <span class="token number">10.0</span>.123.0 <span class="token number">0.0</span>.0.255<span class="token punctuation">[</span>R2-ospf-1-area-0.0.0.0<span class="token punctuation">]</span>network <span class="token number">10.0</span>.2.0 <span class="token number">0.0</span>.0.255</code></pre><blockquote><p>问：直连路由还有必要宣告吗？<br>答：如果不宣告，那么该接口无法收发OSPF报文。</p></blockquote><p><code>network</code>功能：1.宣告网段，2.接口收发OSPF报文</p><p>如果路由器端口连接了终端PC，建议配置好<code>network</code>后，再把接口功能过滤掉，即抑制端口<code>silent-interface</code>：只宣告网段，但不能收发OSPF报文。(没必要和PC收发OSPF报文)</p><ul><li>STEP4：查看DR和BDR</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>AR<span class="token punctuation">]</span>dis ospf peer  <span class="token comment"># 查看OSPF邻居关系</span></code></pre><p>在这里，因为我们路由器配置顺序为：AR3-&gt;AR1-&gt;AR2<br>因为没开启抢占特性，所以AR3为DR，AR1为BDR，AR2为DROther</p><p>每隔10s发送一个Hello报文，40s收不到Hello，断开邻居关系(死亡间隔40s)</p><h3 id="实验四：OSPF认证"><a href="#实验四：OSPF认证" class="headerlink" title="实验四：OSPF认证"></a><strong>实验四：OSPF认证</strong></h3><ul><li>STEP1：网络拓扑(略：同上)</li><li>STEP2：配置认证</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR1、AR2、AR3均配置认证</span><span class="token punctuation">[</span>R1-GigabitEthernet0/0/0<span class="token punctuation">]</span>ospf authentication-mode md5 <span class="token number">1</span> cipher huawei<span class="token comment"># md5方式加密，Ket id为1，Key id保持一致！</span></code></pre><p>hmac-md5：<a href="https://blog.csdn.net/chy2z/article/details/80828770">HMAC-MD5 签名算法</a><br>simple：防君子不妨小人，认证之后正常收发OSPF包，但是抓包能直接看到密码</p><p>修改**卡信息：网络验证：只能改服务器数据；本地验证：想咋改咋改(不会…)</p><blockquote><p>技巧：每个文件都会有一个自己的指纹信息，生成一个32位/64位的哈希值，且该值唯一，扫描文件的MD5值，只要发现有与违法视频/文件MD5值匹配的，就认为扫描的文件违法。所以，如果想在百度网盘上传一个不健康的小视频/软件，那么可以把一个非空的.txt文件和想要上传的文件一起压缩，再上传即可。</p></blockquote><p><font color="#999AAA">饱汉不知饿汉饥<span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></font></p><h3 id="实验五：多区域OSPF"><a href="#实验五：多区域OSPF" class="headerlink" title="实验五：多区域OSPF"></a><strong>实验五：多区域OSPF</strong></h3><ul><li>STEP1：网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-5-ci-bi-ji/169b2c3f83ec4f608e592b6b3adcfaef.png"><ul><li>STEP2：配置多区域OSPF</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR3：配置多区域OSPF</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>R3-GigabitEthernet0/0/1<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.0</span>.34.3 <span class="token number">24</span>  <span class="token comment"># 接口添加IP地址</span><span class="token punctuation">[</span>R3<span class="token punctuation">]</span>ospf <span class="token number">1</span><span class="token punctuation">[</span>R3-ospf-1<span class="token punctuation">]</span>a <span class="token number">1</span>  <span class="token comment"># 进入区域1</span><span class="token punctuation">[</span>R3-ospf-1-area-0.0.0.1<span class="token punctuation">]</span>network <span class="token number">10.0</span>.34.0 <span class="token number">0.0</span>.0.255  <span class="token comment"># 宣告区域</span></code></pre><table><thead><tr><th>路由器</th><th>IP地址</th><th>环回地址</th></tr></thead><tbody><tr><td>AR4</td><td>10.0.34.4</td><td>10.0.4.4</td></tr></tbody></table><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo AR4：配置多区域OSPF</span><span class="token punctuation">[</span>AR4<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>AR4-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.0</span>.34.4 <span class="token number">24</span>  <span class="token comment"># 接口配置地址</span><span class="token punctuation">[</span>AR4-GigabitEthernet0/0/0<span class="token punctuation">]</span>int loo <span class="token number">0</span><span class="token punctuation">[</span>AR4-LoopBack0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.0</span>.4.4 <span class="token number">24</span>  <span class="token comment"># 环回口网络类型：点到点，掩码按32宣告</span><span class="token punctuation">[</span>R4<span class="token punctuation">]</span>ospf <span class="token number">1</span><span class="token punctuation">[</span>R4-ospf-1<span class="token punctuation">]</span>a <span class="token number">1</span>  <span class="token comment"># 进入区域1</span><span class="token punctuation">[</span>R4-ospf-1-area-0.0.0.1<span class="token punctuation">]</span>network <span class="token number">10.0</span>.34.0 <span class="token number">0.0</span>.0.255  <span class="token comment"># 宣告网段</span><span class="token punctuation">[</span>R4-ospf-1-area-0.0.0.1<span class="token punctuation">]</span>int loo <span class="token number">0</span><span class="token punctuation">[</span>AR4-LoopBack0<span class="token punctuation">]</span>ospf <span class="token builtin class-name">enable</span> <span class="token number">1</span> a <span class="token number">1</span><span class="token comment"># 宣告环回口网段的一种方式，和在OSPF area里面用network效果一样</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>AR4-ospf-1-area-0.0.0.1<span class="token punctuation">]</span>network <span class="token number">10.0</span>.34.4 <span class="token number">0.0</span>.0.0<span class="token comment"># 宣告端口，虽然反掩码是32，但是还是按端口反掩码进行正常宣告</span></code></pre><p>(理论上不允许！)物理上非骨干区域连接非骨干区域，可以想办法把两个区域变成一个区域：Virtual Link。</p><ul><li>练习题：OSPF故障排查</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> ICT战队数据通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HCIA </tag>
            
            <tag> 华为eNSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICT战队-第4次笔记</title>
      <link href="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/"/>
      <url>/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="ICT战队-第4次笔记"><a href="#ICT战队-第4次笔记" class="headerlink" title="ICT战队-第4次笔记"></a>ICT战队-第4次笔记</h1><p>[toc]</p><h2 id="STP生成树协议"><a href="#STP生成树协议" class="headerlink" title="STP生成树协议"></a>STP生成树协议</h2><h3 id="实验一：STP生成树协议配置"><a href="#实验一：STP生成树协议配置" class="headerlink" title="实验一：STP生成树协议配置"></a><strong>实验一：STP生成树协议配置</strong></h3><ul><li><strong>Step1：</strong> 网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/实验一STP网络拓扑-16564712180951.png"><ul><li><strong>Step1.5：</strong> 配置主机IP</li></ul><table><thead><tr><th>主机</th><th>IP地址</th><th>掩码</th><th>网关</th></tr></thead><tbody><tr><td>PC1</td><td>10.1.10.1</td><td>255.255.255.0</td><td>10.1.10.254</td></tr><tr><td>PC2</td><td>10.1.20.1</td><td>255.255.255.0</td><td>10.1.20.254</td></tr></tbody></table><ul><li><strong>Step2：</strong> 指定根桥交换机LSW2</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 每个交换机执行</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>stp mode rstp  <span class="token comment"># 启用快速生成树RSTP模式</span>Info: This operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment<span class="token punctuation">..</span>.done.<span class="token comment"># todo 指定LSW2为根桥（比较桥ID：网桥交换机优先级、MAC地址）</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>stp priority <span class="token number">4096</span>  <span class="token comment"># 指定交换机优先级</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dis stp bri  <span class="token comment"># 查看生成树简要信息</span> MSTID  Port                        Role  STP State     Protection   <span class="token number">0</span>    GigabitEthernet0/0/1        DESI  FORWARDING      NONE   <span class="token number">0</span>    GigabitEthernet0/0/2        DESI  FORWARDING      NONE   <span class="token number">0</span>    GigabitEthernet0/0/3        DESI  FORWARDING      NONE   <span class="token number">0</span>    GigabitEthernet0/0/4        DESI  FORWARDING      NONE   <span class="token number">0</span>    GigabitEthernet0/0/5        DESI  DISCARDING      NONE<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span></code></pre><ul><li><strong>Step3：</strong> 划分VLAN</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 每个交换机批量创建VLAN10、VLAN20</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>vlan batch <span class="token number">10</span> <span class="token number">20</span>Info: This operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment<span class="token punctuation">..</span>.done.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span></code></pre><ul><li><strong>Step4：</strong> 配置交换机接口模式</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 交换机与主机配access，交换机之间配trunk</span><span class="token comment"># todo LSW1</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>int g0/0/2<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>int g0/0/3<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>int g0/0/4<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>int g0/0/5<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/5<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/5<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token comment"># todo LSW2</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>int g0/0/2<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>int g0/0/3<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>int g0/0/4<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>int g0/0/5<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/5<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/5<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token comment"># todo LSW3</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>int g0/0/2<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>int g0/0/3<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port link-type access<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port default vlan <span class="token number">10</span><span class="token comment"># todo LSW4</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>int g0/0/2<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>port trunk allow-pass vlan all<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>int g0/0/3<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port link-type access<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port default vlan <span class="token number">20</span></code></pre><ul><li><strong>Step5：</strong> LSW1配置网关</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo LSW1配置网关</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int vlan <span class="token number">10</span><span class="token punctuation">[</span>Huawei-Vlanif10<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.1</span>.10.254 <span class="token number">24</span><span class="token punctuation">[</span>Huawei-Vlanif10<span class="token punctuation">]</span>int vlan <span class="token number">20</span><span class="token punctuation">[</span>Huawei-Vlanif20<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.1</span>.20.254 <span class="token number">24</span></code></pre><ul><li><p><strong>Step6：</strong> 两台主机之间可以ping通</p></li><li><p><strong>Step7：</strong> 思考：</p><ul><li>问题1.数据包转发的路径</li><li>问题2.该网络的毛病(目标是冗余性)</li></ul></li></ul><p>答1、<br>PC1-&gt;LSW3(g0/0/2)-&gt;LSW2(g0/0/4)-&gt;LSW1(g0/0/4)-&gt;LSW2(g0/0/2)-&gt;LSW4(g0/0/3)-PC2<br><font color="#999AAA">从根端口和非指定端口出去的数据包离根桥越走越近，指定端口越走越远</font></p><p>答2、<br>1.交换机宕掉一个无法主机正常通信<br>2.无法联外网<br>3.网关没有冗余性</p><p>设置根桥和备份根桥：根桥宕掉后，备份根桥充当根桥<br>在要设置根桥的交换机上配置：stp root primary，设置比根桥优先级更低(-4096)<br>在要设置备份根桥的交换机上配置：stp root secondary</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 根桥</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>stp root primary<span class="token comment"># todo 备份根桥</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>stp root secondary</code></pre><p><font color="#999AAA">代理ARP：proxy ARP<br>proxy ARP使用在主机没有配置默认网关或没有任何路由策略的网络上。<br>简答来说就是，如果代理ARP路由器收到路由表中已知网段的IP地址，虽然路由表没有该IP条目，但是代理ARP仍然向该IP地址所属网段转发该IP地址。</font></p><h2 id="VRRP虚拟路由冗余协议"><a href="#VRRP虚拟路由冗余协议" class="headerlink" title="VRRP虚拟路由冗余协议"></a>VRRP虚拟路由冗余协议</h2><p>VRRP：把两个网关逻辑上变成一个网关(网关的冗余性)</p><p>网络忌讳：<strong>路径不对称</strong></p><p>虚拟IP：<br>LSW1 254 -&gt; 网关250(主)<br>LSW2 253 -&gt; 网关250(备)</p><h3 id="实验二：VRRP简单配置"><a href="#实验二：VRRP简单配置" class="headerlink" title="实验二：VRRP简单配置"></a><strong>实验二：VRRP简单配置</strong></h3><ul><li>Step1：网络拓扑(书接上回<span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)</li></ul><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/实验二VRRP网络拓扑-16564712180952.png"><ul><li>Step2：LSW2添加IP(为了做虚拟IP)</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo LSW2添加IP</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int vlan <span class="token number">10</span><span class="token punctuation">[</span>Huawei-Vlanif10<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.1</span>.10.253 <span class="token number">24</span><span class="token punctuation">[</span>Huawei-Vlanif10<span class="token punctuation">]</span>int vlan <span class="token number">20</span><span class="token punctuation">[</span>Huawei-Vlanif20<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.1</span>.20.253 <span class="token number">24</span></code></pre><ul><li>Step3：配置虚拟IP</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo LSW1、LSW2配置虚拟IP</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int vlan <span class="token number">10</span><span class="token punctuation">[</span>Huawei-Vlanif10<span class="token punctuation">]</span>vrrp vrid <span class="token number">10</span> virtual-ip <span class="token number">10.1</span>.10.250<span class="token punctuation">[</span>Huawei-Vlanif10<span class="token punctuation">]</span>int vlan <span class="token number">20</span><span class="token punctuation">[</span>Huawei-Vlanif20<span class="token punctuation">]</span>vrrp vrid <span class="token number">20</span> virtual-ip <span class="token number">10.1</span>.20.250<span class="token punctuation">[</span>Huawei-Vlanif20<span class="token punctuation">]</span></code></pre><p>1.vrid随意，为了好认，取特殊值<br>2.VRRP可以用物理接口作为虚拟IP(不推荐，原因：物理接口作为虚拟IP问题：部分链路段掉之后，主备无法切换)</p><ul><li>Step3.5：修改主机网关</li></ul><table><thead><tr><th>主机</th><th>IP地址</th><th>掩码</th><th>网关</th></tr></thead><tbody><tr><td>PC1</td><td>10.1.10.1</td><td>255.255.255.0</td><td>10.1.10.250</td></tr><tr><td>PC2</td><td>10.1.20.1</td><td>255.255.255.0</td><td>10.1.20.250</td></tr></tbody></table><ul><li>Step4：主机测试连通性</li></ul><h3 id="实验三：VRRP其他配置"><a href="#实验三：VRRP其他配置" class="headerlink" title="实验三：VRRP其他配置"></a><strong>实验三：VRRP其他配置</strong></h3><ul><li><p><strong>Step5.0：</strong> 测试(以下实验基于上面的网络拓扑的小实验)</p></li><li><p><strong>Step5.1：</strong> 通过修改路由器优先级更改主路由器</p></li></ul><p>VRRP<br>VRID最大255个虚拟MAC：00-00-5E-00-01-XX，XX对应vrid号<br>成为主路由器的条件：<br>1.比较优先级，默认100，越大越优先，有抢占特性<br>2.比较物理接口IP大小，越大越优先，没有抢占特性<br><font color="#999AAA">抢占特性：默认开启，关闭则优先级失去抢占特性</font></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 修改之前查看路由器VRRP信息</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dis vrrp<span class="token comment"># todo 选择状态为Backup的路由器，修改其优先级，使其成为Master</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int vlan <span class="token number">10</span><span class="token punctuation">[</span>Huawei-Vlanif10<span class="token punctuation">]</span>vrrp vrid <span class="token number">10</span> priority <span class="token number">101</span></code></pre><ul><li><strong>Step5.2：</strong> 查看各路由器VRRP信息</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 查看各路由器VRRP信息，可以看到路由器状态改变</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dis vrrp</code></pre><ul><li><strong>Step5.3：</strong> 关闭抢占特性</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 关闭抢占特性</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int vlan <span class="token number">10</span><span class="token punctuation">[</span>Huawei-Vlanif10<span class="token punctuation">]</span>vrrp vrid <span class="token number">10</span> preempt-mode disable</code></pre><ul><li><strong>Step5.4：</strong> 设置Hello时间间隔</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 设置备份Master时间间隔</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int vlan <span class="token number">20</span><span class="token punctuation">[</span>Huawei-Vlanif20<span class="token punctuation">]</span>vrrp vrid <span class="token number">20</span> timer advertise <span class="token number">1</span>  <span class="token comment"># 命令用来配置备份组中Master发送VRRP报文的时间间隔为1s</span></code></pre><ul><li><strong>Step5.5：</strong> 修改VLAN状态</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 关掉</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int vlan <span class="token number">20</span><span class="token punctuation">[</span>Huawei-Vlanif20<span class="token punctuation">]</span>shutdown  <span class="token comment"># 状态：Backup -&gt; Initialize</span><span class="token comment"># todo 开启</span><span class="token punctuation">[</span>Huawei-Vlanif20<span class="token punctuation">]</span>undo <span class="token function">shutdown</span>  <span class="token comment"># 状态：Initialize -&gt; Backup</span></code></pre><ul><li><strong>Step5.6：</strong> 观察修改主路由器VLAN状态后，主机连通性情况</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo PC2</span>PC<span class="token operator">&gt;</span>ping <span class="token number">10.1</span>.20.250 -t  <span class="token comment"># 持续ping目的IP地址</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 主路由器LSW1</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int vlan <span class="token number">20</span><span class="token punctuation">[</span>Huawei-Vlanif20<span class="token punctuation">]</span>shutdown  <span class="token comment"># 状态：Master -&gt; Initialize</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo PC2会短暂出现：</span>Request timeout<span class="token operator">!</span></code></pre><p>解释：主Maste路由器线路断掉之后，备Backup路由器马上成为主Master路由器</p><p>VRRP相关资料：<br><a href="http://www1.h3c.com/cn/d_200904/631528_30003_0.htm">VRRP技术介绍</a><br><a href="http://www.h3c.com/cn/d_200802/335873_30003_0.htm">VRRP技术白皮书</a></p><h2 id="逻辑链路聚合"><a href="#逻辑链路聚合" class="headerlink" title="逻辑链路聚合"></a>逻辑链路聚合</h2><p>1.最多可聚合8个端口<br>2.所有聚合端口link-mode必须一致<br>3.link-mode trunk下确保trunk允许VLAN必须一致<br>5.接口类型必须保持一致<br>6.加入聚合端口之前不能有任何配置</p><h3 id="实验四：逻辑链路聚合"><a href="#实验四：逻辑链路聚合" class="headerlink" title="实验四：逻辑链路聚合"></a><strong>实验四：逻辑链路聚合</strong></h3><ul><li>Step1：网络拓扑</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo LSW2配置</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int Eth-Trunk <span class="token number">1</span>  <span class="token comment"># 建立汇聚端口</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>clear configuration int g0/0/4  <span class="token comment"># 清除接口配置</span>Warning: All configurations of the interface will be cleared, and its state will be shutdown. Continue? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span> :yInfo: Total execute <span class="token number">2</span> command<span class="token punctuation">(</span>s<span class="token punctuation">)</span>, <span class="token number">2</span> successful, <span class="token number">0</span> failed.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>clear configuration int g0/0/5  <span class="token comment"># 清除接口配置</span>Warning: All configurations of the interface will be cleared, and its state will be shutdown. Continue? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span> :yInfo: Total execute <span class="token number">2</span> command<span class="token punctuation">(</span>s<span class="token punctuation">)</span>, <span class="token number">2</span> successful, <span class="token number">0</span> failed.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/4<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>un shut  <span class="token comment"># 开启链路</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>eth-trunk <span class="token number">1</span>  <span class="token comment"># 将该端口g0/0/4加入聚合接口eth-trunk 1</span>Info: This operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment<span class="token punctuation">..</span>.done.<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>int g0/0/5<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/5<span class="token punctuation">]</span>un shut  <span class="token comment"># 开启链路</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/5<span class="token punctuation">]</span>eth-trunk <span class="token number">1</span>  <span class="token comment"># 将该端口g0/0/5加入聚合接口eth-trunk 1</span>Info: This operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment<span class="token punctuation">..</span>.done.<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/5<span class="token punctuation">]</span><span class="token comment"># todo LSW1配置</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int Eth-Trunk <span class="token number">1</span>  <span class="token comment"># 建立汇聚端口</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>clear configuration int g0/0/4  <span class="token comment"># 清除接口配置</span>Warning: All configurations of the interface will be cleared, and its state will be shutdown. Continue? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span> :yInfo: Total execute <span class="token number">2</span> command<span class="token punctuation">(</span>s<span class="token punctuation">)</span>, <span class="token number">2</span> successful, <span class="token number">0</span> failed.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>clear configuration int g0/0/5  <span class="token comment"># 清除接口配置</span>Warning: All configurations of the interface will be cleared, and its state will be shutdown. Continue? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span> :yInfo: Total execute <span class="token number">2</span> command<span class="token punctuation">(</span>s<span class="token punctuation">)</span>, <span class="token number">2</span> successful, <span class="token number">0</span> failed.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/4<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>un shut  <span class="token comment"># 开启链路</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>eth-trunk <span class="token number">1</span>  <span class="token comment"># 将该端口g0/0/4加入聚合接口eth-trunk 1</span>Info: This operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment<span class="token punctuation">..</span>.done.<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>int g0/0/5<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/5<span class="token punctuation">]</span>un shut  <span class="token comment"># 开启链路</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/5<span class="token punctuation">]</span>eth-trunk <span class="token number">1</span>  <span class="token comment"># 将该端口g0/0/5加入聚合接口eth-trunk 1</span>Info: This operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment<span class="token punctuation">..</span>.done.<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/5<span class="token punctuation">]</span><span class="token comment"># todo 检查逻辑链路聚合</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/5<span class="token punctuation">]</span>dis eth-trunk <span class="token number">1</span>Eth-Trunk1's state information is:WorkingMode: NORMAL         Hash arithmetic: According to SIP-XOR-DIP         Least Active-linknumber: <span class="token number">1</span>  Max Bandwidth-affected-linknumber: <span class="token number">8</span>              Operate status: up          Number Of Up Port In Trunk: <span class="token number">2</span>                     --------------------------------------------------------------------------------PortName                      Status      Weight GigabitEthernet0/0/4          Up          <span class="token number">1</span>      GigabitEthernet0/0/5          Up          <span class="token number">1</span>      </code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo LSW2配置</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int Eth-Trunk <span class="token number">1</span><span class="token punctuation">[</span>Huawei-Eth-Trunk1<span class="token punctuation">]</span>port link-type  trunk <span class="token punctuation">[</span>Huawei-Eth-Trunk1<span class="token punctuation">]</span>port trunk allow-pass vlan all <span class="token punctuation">[</span>Huawei-Eth-Trunk1<span class="token punctuation">]</span>dis vlanThe total number of vlans is <span class="token builtin class-name">:</span> <span class="token number">3</span>--------------------------------------------------------------------------------U: Up<span class="token punctuation">;</span>         D: Down<span class="token punctuation">;</span>         TG: Tagged<span class="token punctuation">;</span>         UT: Untagged<span class="token punctuation">;</span>MP: Vlan-mapping<span class="token punctuation">;</span>               ST: Vlan-stacking<span class="token punctuation">;</span><span class="token comment">#: ProtocolTransparent-vlan;    *: Management-vlan;</span>--------------------------------------------------------------------------------VID  Type    Ports                                                          --------------------------------------------------------------------------------<span class="token number">1</span>    common  UT:GE0/0/1<span class="token punctuation">(</span>U<span class="token punctuation">)</span>      GE0/0/2<span class="token punctuation">(</span>U<span class="token punctuation">)</span>      GE0/0/3<span class="token punctuation">(</span>U<span class="token punctuation">)</span>      GE0/0/6<span class="token punctuation">(</span>D<span class="token punctuation">)</span>                      GE0/0/7<span class="token punctuation">(</span>D<span class="token punctuation">)</span>      GE0/0/8<span class="token punctuation">(</span>D<span class="token punctuation">)</span>      GE0/0/9<span class="token punctuation">(</span>D<span class="token punctuation">)</span>      GE0/0/10<span class="token punctuation">(</span>D<span class="token punctuation">)</span>                     GE0/0/11<span class="token punctuation">(</span>D<span class="token punctuation">)</span>     GE0/0/12<span class="token punctuation">(</span>D<span class="token punctuation">)</span>     GE0/0/13<span class="token punctuation">(</span>D<span class="token punctuation">)</span>     GE0/0/14<span class="token punctuation">(</span>D<span class="token punctuation">)</span>                     GE0/0/15<span class="token punctuation">(</span>D<span class="token punctuation">)</span>     GE0/0/16<span class="token punctuation">(</span>D<span class="token punctuation">)</span>     GE0/0/17<span class="token punctuation">(</span>D<span class="token punctuation">)</span>     GE0/0/18<span class="token punctuation">(</span>D<span class="token punctuation">)</span>                     GE0/0/19<span class="token punctuation">(</span>D<span class="token punctuation">)</span>     GE0/0/20<span class="token punctuation">(</span>D<span class="token punctuation">)</span>     GE0/0/21<span class="token punctuation">(</span>D<span class="token punctuation">)</span>     GE0/0/22<span class="token punctuation">(</span>D<span class="token punctuation">)</span>                     GE0/0/23<span class="token punctuation">(</span>D<span class="token punctuation">)</span>     GE0/0/24<span class="token punctuation">(</span>D<span class="token punctuation">)</span>     Eth-Trunk1<span class="token punctuation">(</span>U<span class="token punctuation">)</span>   Eth-Trunk11<span class="token punctuation">(</span>D<span class="token punctuation">)</span>  <span class="token number">10</span>   common  TG:GE0/0/1<span class="token punctuation">(</span>U<span class="token punctuation">)</span>      GE0/0/2<span class="token punctuation">(</span>U<span class="token punctuation">)</span>      GE0/0/3<span class="token punctuation">(</span>U<span class="token punctuation">)</span>      Eth-Trunk1<span class="token punctuation">(</span>U<span class="token punctuation">)</span>   <span class="token number">20</span>   common  TG:GE0/0/1<span class="token punctuation">(</span>U<span class="token punctuation">)</span>      GE0/0/2<span class="token punctuation">(</span>U<span class="token punctuation">)</span>      GE0/0/3<span class="token punctuation">(</span>U<span class="token punctuation">)</span>      Eth-Trunk1<span class="token punctuation">(</span>U<span class="token punctuation">)</span>   VID  Status  Property      MAC-LRN Statistics Description      --------------------------------------------------------------------------------<span class="token number">1</span>    <span class="token builtin class-name">enable</span>  default       <span class="token builtin class-name">enable</span>  disable    VLAN 0001                         <span class="token number">10</span>   <span class="token builtin class-name">enable</span>  default       <span class="token builtin class-name">enable</span>  disable    VLAN 0010                         <span class="token number">20</span>   <span class="token builtin class-name">enable</span>  default       <span class="token builtin class-name">enable</span>  disable    VLAN 0020                         <span class="token punctuation">[</span>Huawei-Eth-Trunk1<span class="token punctuation">]</span></code></pre><p>协商：······</p><h2 id="交换机端口安全技术"><a href="#交换机端口安全技术" class="headerlink" title="交换机端口安全技术"></a>交换机端口安全技术</h2><h3 id="实验五：端口隔离"><a href="#实验五：端口隔离" class="headerlink" title="实验五：端口隔离"></a><strong>实验五：端口隔离</strong></h3><p>应用场景：酒店、宿舍<br>端口隔离：做了端口隔离的端口之间互相通信，做了和没做的可以通信</p><ul><li>Step1：网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/实验五端口隔离网络拓扑-165647121809715.png"><ul><li>Step2：云和主机的配置</li></ul><p>云配置：<br>绑定信息：1.UDP、2.VMware···IP: 192.168.126.1<br>端口类型：Ethernet<br>入端口号：1<br>出端口号：2<br>双向通道：√</p><p>计算机配置：DHCP</p><ul><li>Step3：做端口隔离</li></ul><p><strong>隔离组中的用户之间不能通信，只能和上行端口进行通信</strong>。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 交换机做端口隔离</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>port-isolate <span class="token builtin class-name">enable</span> <span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>int g0/0/2<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>port-isolate <span class="token builtin class-name">enable</span></code></pre><ul><li>Step5.0：搞事：在PC3抓PC1跟PC2通信的数据包</li></ul><p>首先要关掉上面配置的端口隔离：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 关闭端口隔离</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/2<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>undo mac-add dynamic<span class="token comment"># todo 快速手动清除交换机MAC地址表</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>undo mac-address<span class="token comment"># todo 在MAC地址表中查找指定的MAC地址</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dis mac-address <span class="token operator">|</span> include <span class="token number">4491</span></code></pre><p><font color="#999AAA">清除交换表的攻击方式：<br>攻击机发送伪造BPDU给交换机，交换机主动清除MAC地址表。<br>TCBPDU，触发MAC地址表老化时间由30s变成15s。</font></p><ul><li>Step5.1：攻击机MAC地址泛洪</li></ul><p>攻击机使用MAC地址泛洪：</p><pre class="language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> macof</code></pre><p>此后，交换机MAC地址表被垃圾MAC填满，所以交换机会泛洪数据帧，即广播，所以实现了抓包的效果。</p><ul><li>Step5.2：抓包</li></ul><p>在PC3的线路上开始抓包，然后用PC1 ping PC2，在wireshark上面可以看到ping使用的ICMP报文信息。</p><p>此时，如果交换机使用telnet明文登录方式，那不寄了嘛<span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><ul><li>Step5.3：交换机配置Telnet明文远程登录</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 交换机配IP</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int vlan <span class="token number">1</span><span class="token punctuation">[</span>Huawei-Vlanif1<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.126.24 <span class="token number">24</span><span class="token punctuation">[</span>Huawei-Vlanif1<span class="token punctuation">]</span><span class="token comment"># todo 交换机配置telnet</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>telnet server <span class="token builtin class-name">enable</span> Info: The Telnet server has been enabled.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>user-interface vty <span class="token number">0</span> <span class="token number">4</span><span class="token punctuation">[</span>Huawei-ui-vty0-4<span class="token punctuation">]</span>set authentication password cipher <span class="token number">123456</span></code></pre><ul><li>Step5.4：远程登录交换机</li></ul><p>此时，用kali远程登录交换机时，在登录线路上开始抓包，就能看见使用telnet登录。寄！<span class="github-emoji"><span>😬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="实验六：端口安全"><a href="#实验六：端口安全" class="headerlink" title="实验六：端口安全"></a><strong>实验六：端口安全</strong></h3><p><font color="#999AAA">以上是攻击，以下是防御。</font></p><p>MAC地址表分为：<br>静态MAC地址表：手工绑定，优先级高于动态MAC地址表<br>动态MAC地址表：交换机收到数据帧后，将源MAC地址学习到MAC地址表中<br>黑洞MAC地址表：手工绑定或自动学习，用于丢弃指定MAC地址</p><ul><li>Step6：端口安全配置</li></ul><p>端口安全：控制一个端口能收发的MAC地址数量</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 交换机配置端口安全</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/4<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port-security <span class="token builtin class-name">enable</span>  <span class="token comment"># 开启端口安全</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port-security max-mac-num <span class="token number">1</span>  <span class="token comment"># 接口最多学习多少地址，如果连输出端，那么学习最多一个就行</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port-security mac-address sticky  <span class="token comment"># 端口安全地址通过**自动学习**获取，即自动学习合法的MAC地址</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port-security protect-action <span class="token function">shutdown</span>  <span class="token comment"># 惩罚：把端口down掉</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>int g0/0/3<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port-security <span class="token builtin class-name">enable</span>  <span class="token comment"># 开启端口安全</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port-security max-mac-num <span class="token number">1</span>  <span class="token comment"># 接口最多学习多少地址，如果连输出端，那么学习最多一个就行</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port-security mac-address sticky  <span class="token comment"># 端口安全地址通过**自动学习**获取，即自动学习合法的MAC地址</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port-security protect-action <span class="token function">shutdown</span>  <span class="token comment"># 惩罚：把端口down掉</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span></code></pre><ul><li>Step6.5：观察</li></ul><p>首先，会发现，连接kali的端口已经被交换机down掉了（坏事干太多了<span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）<br>然后，使用PC3主机ping其他主机，交换机就会学习到PC3的MAC地址</p><ul><li>Step7：测试</li></ul><p>在拓扑中拉一台主机PC4出来，配置跟PC3一摸一样的地址，然后删除原PC3连线，跟PC4连线，如图所示：</p><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/端口安全1-16564712180963.png"><p>此时，因为PC4不发送数据包，交换机无法判断该接口的主机是否是原主机，所以PC4 ping任意其他主机(ping不同)，之后该端口就down掉了(等30s端口老化时间)：</p><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/端口安全2-16564712180965.png"><h3 id="实验七：MAC地址防漂移-无实验"><a href="#实验七：MAC地址防漂移-无实验" class="headerlink" title="实验七：MAC地址防漂移(无实验)"></a><strong>实验七：MAC地址防漂移</strong>(无实验)</h3><p>MAC地址漂移：在一个接口学习到的MAC<br>地址在通一个VLAN中的其他接口上也被学习到，这样后学习的MAC地址就会覆盖先学习到的MAC地址信息（出接口频繁变动），这种情况多数为出现环路的时候发生，所以这个功能也可以用来排查和解决环路问题。</p><p>MAC地址防止漂移功能原理：在接口上配置优先级，优先级高的接口学习到的MAC地址不会在同VLAN的优先级低的其他接口上被学习到，如果优先级一样，那么可以配置不允许相同优先级的接口学习到同一个MAC地址。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo MAC地址防止漂移配置</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>mac-address flapping detection  <span class="token comment"># 全局开启MAC漂移检测</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/2<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>mac-learning priority <span class="token number">3</span>  <span class="token comment"># 配置g0/0/0接口优先级为3，默认为0</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>mac-address flapping trigger error-down  <span class="token comment"># 接口发生MAC地址漂移后关闭</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/3<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>mac-address flapping trigger error-down  <span class="token comment"># 接口发生MAC地址漂移后关闭</span>配置完成后，当g0/0/2的MAC地址漂移到g0/0/后，g0/0/3端口将被关闭</code></pre><h3 id="实验八：DHCP欺骗-DHCP-Spoofing"><a href="#实验八：DHCP欺骗-DHCP-Spoofing" class="headerlink" title="实验八：DHCP欺骗(DHCP Spoofing)"></a><strong>实验八：DHCP欺骗(DHCP Spoofing)</strong></h3><ul><li>Step1：网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/实验八DHCP欺骗-16564712180964.png"><p>拓扑图跟上面的一样，但是<strong>不要</strong>配置端口安全，配了的话把端口安全配置全部删掉。</p><p>一般主机连接外网，都能通过DHCP获取IP地址</p><ul><li>Step2：使用攻击机kali耗尽DHCP的IP地址池资源</li></ul><p>dhcpstarv：（DHCP饿死攻击）指定一个接口，就会把局域网里面的DHCP地址全部干掉，相当于不断获取IP地址，把IP资源耗尽。</p><pre class="language-bash" data-language="bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ dhcpstarv -i eth0 -e <span class="token number">192.168</span>.126.131</code></pre><ul><li>Step3：检查主机IP地址</li></ul><p>让各PC重新应用DHCP，然后就无法分配到IP地址。</p><ul><li>Step4：攻击机kali使用DNS欺骗</li></ul><p>通过Ethercap软件模拟DHCP服务器</p><p>打开Ettercap -&gt; √ -&gt; DHCP Spoofing -&gt; 配置如下 -&gt; OK</p><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/DHCP Spoofing-16564712180966.png"><ul><li>Step5：检查主机IP地址</li></ul><p>让各PC重新应用DHCP，然后可以看到主机分配到了我们自定义的IP地址。</p><p>Ettercap显示：<br><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/Ettercap-16564712180967.png"></p><p>其中一台主机的配置：<br><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/PC configration-16564712180968.png"></p><h3 id="实验九：DHCP窥探-DHCP-snooping"><a href="#实验九：DHCP窥探-DHCP-snooping" class="headerlink" title="实验九：DHCP窥探(DHCP snooping)"></a><strong>实验九：DHCP窥探(DHCP snooping)</strong></h3><ul><li>Step1：网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/DHCP窥探-16564712180969.png"><ul><li>Step2：配置DHCP服务器和攻击DHCP</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo DHCP Server</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dhcp enInfo: The operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment.done.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.126.1 <span class="token number">24</span>      <span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>dhcp <span class="token keyword">select</span> interface<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span><span class="token comment"># todo Attacker</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dhcp enInfo: The operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment.done.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>ip pool p1Info: It's successful to create an IP address pool.<span class="token punctuation">[</span>Huawei-ip-pool-p1<span class="token punctuation">]</span>network <span class="token number">192.168</span>.99.0 mask <span class="token number">24</span><span class="token punctuation">[</span>Huawei-ip-pool-p1<span class="token punctuation">]</span>gateway-list <span class="token number">192.168</span>.99.1<span class="token punctuation">[</span>Huawei-ip-pool-p1<span class="token punctuation">]</span>int g0/0/0<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.99.1 <span class="token number">24</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>dhcp <span class="token keyword">select</span> global </code></pre><ul><li>Step2.5：查看主机IP地址</li></ul><p>主机获取两个DHCP服务器IP地址的概率五五开。</p><ul><li>Step3：交换机开启DHCP Snooping</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dhcp <span class="token builtin class-name">enable</span> Info: The operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment.done.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dhcp snooping <span class="token builtin class-name">enable</span>  <span class="token comment"># 全局开启DHCP snooping</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dhcp snooping <span class="token builtin class-name">enable</span> vlan <span class="token number">1</span>  <span class="token comment"># 针对VLAN开启DHCP snooping</span></code></pre><ol><li>交换机全局开启DHCP Snoop ing后，需要再在VLAN中开启</li><li>DHCP分配地址过程中，DCHP发送Offer和ACK报文</li><li>交换机开启Spoofing，所有端口设置为不信任端口，即不接受Offer和ACK</li><li>此时，主机无法获取IP地址，因为交换机做了DHCP窥探（DHCP snooping）</li><li>所以，再单独将某个端口设置为信任端口，就可以从这个端口接收Offer和ACk，主机也可以从信任端口的DHCP服务器获取IP地址</li></ol><ul><li>Step4：交换机设置信任端口</li></ul><p>无差别地将VLAN下的端口设置为untrust(默认)</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 设置信任端口</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/5<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/5<span class="token punctuation">]</span>dhcp snooping trusted  <span class="token comment"># 将端口设置为信任</span><span class="token comment"># todo 设置端口能分配的最大IP，防止DHCP饿死攻击</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/5<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>dhcp snooping max-user-number <span class="token number">1</span>  <span class="token comment"># 一个端口分一个IP，防止DHCP饿死攻击</span></code></pre><p>此时，发现，主机可以获取DHCP server地址池地IP地址，不会从Attacker获取IP地址</p><ul><li>Step5：防止IP地址冲突</li></ul><p>首先，为了出现地址冲突，手动将PC1配置改成和PC3一样的配置。</p><p>为了对比配置命令的效果，先用PC1 ping其网关：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> <span class="token number">192.168</span>.126.1</code></pre><p>然后，在上面已经做好DHCP Snooping的基础上，配置IP源防护(必须在配置DHCP Snooping之后)</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/1  <span class="token comment"># 进入需要配置的端口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>ip <span class="token builtin class-name">source</span> check user-bind <span class="token builtin class-name">enable</span>  <span class="token comment"># 配置IP源防护</span></code></pre><p>然后，主机就无法ping通其网关了。</p><p>源IP防护相关配置：<br><a href="https://www.bilibili.com/video/av713269292">华为ip源防护arp防护dhcp snooping 和端口保护</a><br><a href="https://blog.csdn.net/weixin_34062469/article/details/92356463">CISCO交换机配置DHCP监听、IP源防护和动态ARP检测</a><br><a href="https://blog.csdn.net/weixin_33754065/article/details/92531941">IP 源防护</a></p><h2 id="AAA认证"><a href="#AAA认证" class="headerlink" title="AAA认证"></a>AAA认证</h2><p>AAA是Authentication(认证)、Authorization(授权)、Accounting(计费)的简称。</p><p>telnet和ssh基于设备本地用户名和密码进行认证。如果设备单一，没问题，但是设备有成百上千台，这种配置方式就不合理：安全风险、麻烦。所以，可以把所有的用户放入服务器。在企业里头，大型网络都是AAA认证。</p><h3 id="实验十：AAA配置——搭建AAA认证服务器"><a href="#实验十：AAA配置——搭建AAA认证服务器" class="headerlink" title="实验十：AAA配置——搭建AAA认证服务器"></a><strong>实验十：AAA配置——搭建AAA认证服务器</strong></h3><ul><li>Step1：网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/aaa认证网络拓扑-165647121809610.png"><ul><li>Step2：配置路由器</li></ul><p>AR1配置Telnet，Telnet认证基于AAA服务器做认证。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 路由器AR1通过DHCP获取IP</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dhcp enInfo: The operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment.done.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/1<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>ip <span class="token function">add</span> dhcp-alloc<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span></code></pre><ul><li>Step3：搭建AAA认证服务器</li></ul><p>搭建AAA认证服务器：思科的ACS（操作系统）<font color="#999AAA">安装ACS虚拟机步骤：视频从02:23:17开始</font></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 安装虚拟机（没截图，凑合看）</span>localhost login:setupEnter hostname<span class="token punctuation">[</span><span class="token punctuation">]</span>：dcm  <span class="token comment"># 主机名：大聪明</span>Enter IP address<span class="token punctuation">[</span><span class="token punctuation">]</span>：192.168.126.44  <span class="token comment"># 网段一致即可</span>Enter IP network<span class="token punctuation">[</span><span class="token punctuation">]</span>：255.255.255.0  <span class="token comment"># 掩码，没啥好说的</span>Enter IP default gateway<span class="token punctuation">[</span><span class="token punctuation">]</span>：192.168.126.2  <span class="token comment"># 网关，没啥好说的</span>Enter default DNS domain<span class="token punctuation">[</span><span class="token punctuation">]</span>：ct.com  <span class="token comment"># 这个随便写个域名</span>Enter primary nameserver<span class="token punctuation">[</span><span class="token punctuation">]</span>：8.8.8.8  <span class="token comment"># DNS服务器地址</span>Add seconary nameserver? Y/N <span class="token punctuation">[</span>N<span class="token punctuation">]</span>：n  <span class="token comment"># 是否添加第二个DNS服务器地址</span>Enter NTP server<span class="token punctuation">[</span>time.nist.gov<span class="token punctuation">]</span>：  <span class="token comment"># NTP时间同步服务器</span>Add seconary NTP? Y/N <span class="token punctuation">[</span>N<span class="token punctuation">]</span>：nEnter system timezone<span class="token punctuation">[</span>UTC<span class="token punctuation">]</span>：Enter SSH service? Y/N <span class="token punctuation">[</span>N<span class="token punctuation">]</span>：yEnter username<span class="token punctuation">[</span>admin<span class="token punctuation">]</span>：Enter password：Dcm123Enter password again：Dcm123  <span class="token comment"># 至少6位,英文及数字组合</span>Nameserver <span class="token function">ping</span> failed. Retried? Y/N <span class="token punctuation">[</span>Y<span class="token punctuation">]</span>：n</code></pre><p>等ACS安装完成之后，随便测试几条命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 测试命令</span>dcm/admin<span class="token comment"># show ip route</span>dcm/admin<span class="token comment"># </span></code></pre><ul><li>Step3：进入AAA认证服务器</li></ul><p><strong>-&gt;</strong> 在浏览器中输入<code>https://192.168.126.44</code><br><strong>-&gt;</strong> 高级<br><strong>-&gt;</strong> 继续前往<code>https://192.168.126.44</code>（没截图，凑合看）<br><strong>-&gt;</strong> 服务器登录界面：输入用户名、密码<br><strong>-&gt;</strong> 输入新密码<br><strong>-&gt;</strong> 使用新密码登录<br><strong>-&gt;</strong> 授权</p><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/进入AAA服务器1-165647121809611.png"><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/../../STDATA/VSCodeData/MarkDown/ICT战队/ICT数通/04/进入AAA服务器2.png"><p>默认账号：acsadmin<br>默认密码：default</p><p>第一次进入会被要求重置密码，重设密码后直接登录即可。</p><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/../../STDATA/VSCodeData/MarkDown/ICT战队/ICT数通/04/AAA服务器授权1.png"><p><strong>-&gt;</strong> 选择文件：<code>acs5.6_base_57class.cn</code><br><strong>-&gt;</strong> install<br><strong>-&gt;</strong> 然后就来到这个界面</p><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/AAA服务器授权2-165647121809714.png"><p><strong>-&gt;</strong> 查看base导入情况：</p><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/AAA服务器授权3-165647121809716.png"><p><strong>-&gt;</strong> 已经导入<br><strong>-&gt;</strong> 导入feature：</p><img src="/2022/06/29/ict-zhan-dui-di-4-ci-bi-ji/AAA服务器授权4-165647121809717.png"><p><strong>-&gt;</strong> Add/Upgrade<br><strong>-&gt;</strong> 选择文件：<code>acs5.6_feature_57class.cn</code><br><strong>-&gt;</strong> Submit<br><strong>-&gt;</strong> 到此为止，AAA服务器搭建完成！</p><ul><li>Step4：次日的内容：移步[<a href="../05/%E4%BD%95%E6%98%8E%E6%B3%BD_%E7%AC%AC5%E6%AC%A1%E7%AC%94%E8%AE%B0.md">何明泽_第5次笔记</a>]</li></ul><p>AAA认证配置：<br><a href="https://blog.csdn.net/qq_22193519/article/details/83088547">华为AAA认证详解</a><br><a href="https://blog.51cto.com/guojiping/972978">Windows下AAA服务器的搭建及身份认证！ </a></p><h2 id="MAC地址表管理命令"><a href="#MAC地址表管理命令" class="headerlink" title="MAC地址表管理命令"></a>MAC地址表管理命令</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.配置MAC地址表<span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>dis mac-address<span class="token number">2</span>.配置静态MAC地址表<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>mac-address static <span class="token number">5489</span>-98C0-7E34 g0/0/1 vlan <span class="token number">1</span>  <span class="token comment"># 将MAC地址绑定到接口g0/0/1在vlan1中有效</span><span class="token number">3</span>.配置黑洞MAC地址表<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>mac-address black-hole <span class="token number">5489</span>-98C0-7E34 vlan <span class="token number">1</span>  <span class="token comment"># 在VLAN1中收到源或目的问此MAC时，丢弃帧</span><span class="token number">4</span>.禁止端口学习MAC地址，可以在端口或者VLAN中禁止MAC地址学习功能<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>mac-address learning disable action discard进制学习MAC地址，并将收到的所有帧丢弃，也可以在VLAN中配置<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>mac-address learning disable action forward禁止学习MAC地址，但是将收到帧以泛洪方式转发（交换机对于未知目的MAC地址转发原理），也可以在VLAN中配置<span class="token number">5</span>.限制MAC地址学习数量，可以端口或者VLAN配置<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>mac-limit maximum <span class="token number">9</span> alarm <span class="token builtin class-name">enable</span>交换机限制MAC地址学习数量为9个，并在超出数量时发出告警，超过的MAC数量将无法被端口学习到，但是可以通过泛洪转发<span class="token number">6</span>.配置端口安全动态MAC地址此功能将动态学习到MAC地址设置安全属性，其他没有被学习的非安全属性的MAC地址的帧将被端口丢弃<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>port-security max-max-num <span class="token number">1</span>限制安全MAC地址最大数量为1个，默认为1<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>port-security protect-action ?配置其他非安全MAC数据帧的处理动作protect Discard packets 丢弃，不产生告警信息restrict Discardpackets and warning 丢弃，产生告警信息<span class="token function">shutdown</span> Shutdown 丢弃，并将端口shutdown<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>port-security aging-time <span class="token number">300</span>配置安全MAC地址的老化时间为300s，默认不老化在端口动态MAC地址中，配置如上的话，在g0/0/1端口学习到的第一个MAC地址设置为安全MAC地址，此外其他MAC地址在接入端口的话都不予转发，在300s后刷新安全MAC地址表，并重新学习安全MAC地址，哪个MAC地址先到交换机，交换机就先学到哪个MAC地址就将其设置为安全地址，但是交换机重启后，安全MAC地址就会被清空重新学习。</code></pre><p>protect-action保护行为：<br>protect：只接受合法的，丢弃所有非法的<br>restrict：只接受合法的，丢弃所有非法的，并且发一个warning，发SNMP告警信息报文<br>shutdown：断开</p><p>*down管理员关掉的接口<br>违规导致的shutdown，只能先shutdown再undo shutdown打开<br>设置一个延迟时间，down掉多少时间后恢复，</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> ICT战队数据通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HCIA </tag>
            
            <tag> 华为eNSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICT战队-第3次笔记</title>
      <link href="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/"/>
      <url>/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="ICT战队-第3次笔记"><a href="#ICT战队-第3次笔记" class="headerlink" title="ICT战队-第3次笔记"></a>ICT战队-第3次笔记</h1><p>[toc]</p><h2 id="数据中心IDC机房"><a href="#数据中心IDC机房" class="headerlink" title="数据中心IDC机房"></a>数据中心IDC机房</h2><p><strong>1.光纤接口</strong>：</p><p>SC：大方<br>LC：小方(交换机上的光模块基本上插的都是LC接头)<br>FC、ST：一般运营商用</p><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 光纤接口-16564712016121.png"><p><strong>2.光纤跳线</strong>：</p><p>多模光纤(青色)、单模光纤(黄色)<br><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 光纤跳线-16564712016142.png"></p><p>OM2<br>OM3，蓝色<br>OM4，紫色，传输带宽最大</p><p><strong>3.光纤模块</strong>：</p><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 光纤模块-16564712016143.png"><p>基带宽带</p><h2 id="VLAN技术原理与配置"><a href="#VLAN技术原理与配置" class="headerlink" title="VLAN技术原理与配置"></a>VLAN技术原理与配置</h2><p><font color="#999AAA">VLAN虚拟局域网：逻辑上把交换机分成两个交换机，一个VLAN等于一个广播域，等于一个网段。</font>目的是为了隔离广播域。</p><br><h3 id="实验一：单个交换机相同VLAN间的通信"><a href="#实验一：单个交换机相同VLAN间的通信" class="headerlink" title="实验一：单个交换机相同VLAN间的通信"></a>实验一：单个交换机相同VLAN间的通信</h3><br><ul><li><strong>Step1：</strong> 画出网络拓扑图</li></ul><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 实验一——网络拓扑-16564712016144.png"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 查看Huawei交换机默认VLAN信息</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>display vlan  <span class="token comment"># 查看所有VLAN信息</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>display port vlan  <span class="token comment"># 查看各个接口类型</span></code></pre><p><font color="#999AAA">1.华为设备上默认有一个VLAN，为VLAN1<br>2.电脑的VLAN不是电脑的配置，而是电脑连接的端口对应的VLAN</font></p><ul><li><strong>Step2：</strong> 配置主机IP地址和子网掩码</li></ul><table><thead><tr><th align="center">主机</th><th align="center">IP地址</th><th align="center">子网掩码</th></tr></thead><tbody><tr><td align="center">PC1</td><td align="center">10.1.1.1</td><td align="center">255.255.255.0</td></tr><tr><td align="center">PC2</td><td align="center">10.1.1.2</td><td align="center">255.255.255.0</td></tr><tr><td align="center">PC3</td><td align="center">10.1.2.3</td><td align="center">255.255.255.0</td></tr></tbody></table><ul><li><strong>Step3：</strong> 创建VLAN</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 配置VLAN</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>vlan <span class="token number">2</span>  <span class="token comment"># 创建VLAN</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>undo vlan <span class="token number">2</span>  <span class="token comment"># 删除VLAN</span><span class="token punctuation">[</span>Huawei-vlan2<span class="token punctuation">]</span>describtion something  <span class="token comment"># 对VLAN添加描述</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>vlan batch <span class="token number">2</span> to <span class="token number">10</span>  <span class="token comment"># 批量创建VLAN</span></code></pre><p>一个交换机上最多可以创建4095个VLAN</p><ul><li><strong>Step4：</strong> 把端口加入到创建的VLAN</li></ul><p>法1：直接在VLAN模式下添加(<strong>前提</strong>：把端口改成access模式)</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 错误示范</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>vlan <span class="token number">2</span><span class="token punctuation">[</span>Huawei-vlan2<span class="token punctuation">]</span>port GigabitEthernet <span class="token number">0</span>/0/3Error: Trunk or Hybrid port<span class="token punctuation">(</span>s<span class="token punctuation">)</span> can not be added or deleted <span class="token keyword">in</span> this manner.<span class="token punctuation">[</span>Huawei-vlan2<span class="token punctuation">]</span></code></pre><p>法2：在端口试图下将端口划入对应的VLAN</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 进入交换机g0/0/3接口</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>inter g0/0/3<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port link-type ?  access        Access port  dot1q-tunnel  QinQ port  hybrid        Hybrid port  trunk         Trunk port<span class="token comment"># todo 指定端口类型，将交换机接口类型设置为接入模式</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port link-type access<span class="token comment"># todo 应用相应的VLAN到该端口上，将某个接口加入VLAN</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port default vlan <span class="token number">2</span></code></pre><table><thead><tr><th align="center">端口类型</th><th align="center">使用说明</th></tr></thead><tbody><tr><td align="center"><code>access</code></td><td align="center">交换机连终端设备(网络电视、PC……)</td></tr><tr><td align="center"><code>trunk</code></td><td align="center">交换机连交换机</td></tr><tr><td align="center"><code>hybrid</code></td><td align="center">混合类型</td></tr></tbody></table><ul><li><strong>Step5：</strong> 使用其中一个VLAN(冲突域)的主机ping交换机内<strong>其他</strong>VLAN(冲突域)的主机即可ping通</li></ul><h3 id="实验二：不同交换机相同VLAN间的通信"><a href="#实验二：不同交换机相同VLAN间的通信" class="headerlink" title="实验二：不同交换机相同VLAN间的通信"></a><strong>实验二：不同交换机相同VLAN间的通信</strong></h3><ul><li><p><strong>一、使用两根线实现VLAN</strong></p></li><li><p><strong>Step1：</strong> 画出网络拓扑图(书接上回<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)</p></li></ul><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 实验二——网络拓扑1-16564712016146.png"><ul><li><strong>Step2：</strong> 在两台交换机上各自配置VLAN(把某一条线路的端口加入创建的VLAN)</li></ul><p>交换机LSW1的配置：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 配置LSW1的VLAN</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>inter g0/0/4  <span class="token comment"># 进入端口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port link-type access  <span class="token comment"># 指定端口类型</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port default vlan <span class="token number">2</span>  <span class="token comment"># todo 应用相应的VLAN到该端口上，将某个接口加入VLAN</span></code></pre><p>交换机LSW2的配置：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 配置LSW2的VLAN</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>inter g0/0/2  <span class="token comment"># 进入端口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>port link-type access  <span class="token comment"># 指定端口类型</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>port default vlan <span class="token number">2</span>  <span class="token comment"># todo 应用相应的VLAN到该端口上，将某个接口加入VLAN</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>inter g0/0/3  <span class="token comment"># 进入端口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port link-type access  <span class="token comment"># 指定端口类型</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port default vlan <span class="token number">2</span>  <span class="token comment"># todo 应用相应的VLAN到该端口上，将某个接口加入VLAN</span></code></pre><ul><li><strong>Step3.5：</strong> 关闭STP生成树协议</li></ul><p><font color="#999AAA">由于生成树阻塞的问题，冲突域之内的主机无法ping通，所以要关闭Huawei交换机的STP生成树协议。</font></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>display stp  <span class="token comment"># 显示STP信息</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>display stp brief  <span class="token comment"># 显示STP简要信息</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>undo stp <span class="token builtin class-name">enable</span>  <span class="token comment"># 关闭STP生成树协议</span>Warning: The global STP state will be changed. Continue? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span>yInfo: This operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment<span class="token punctuation">..</span>.done.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span></code></pre><ul><li><p><strong>Step4：</strong> 使用其中一个交换机的一个VLAN(冲突域)的主机ping其他交换机内<strong>同一个</strong>VLAN(冲突域)的主机即可ping通</p></li><li><p><strong>二、使用一根线(通过标签管理)实现VLAN</strong></p></li></ul><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 VLAN标签-16564712016145.png"><p>UT：untagged 不打标<br>TG：tagged 打标</p><ul><li><strong>Step1：</strong> 画出网络拓扑图(书接上回<span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)</li></ul><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 实验二——网络拓扑2-16564712016147.png"><ul><li><strong>Step2：</strong> 在两台交换机上各自配置VLAN</li></ul><p>注：<br><strong>1.</strong> 需要一层一层的来删除配置，直到恢复到默认的配置。否则会出现错误：<code>Error: Please renew the default configurations.</code><br><strong>2.</strong> 或者直接删除线路直接配置。</p><p>交换机LSW1的配置：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 配置LSW1的VLAN(删除线路)</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>inter g0/0/4  <span class="token comment"># 进入端口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port link-type trunk  <span class="token comment"># 指定端口类型</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port trunk allow-pass vlan <span class="token number">2</span>  <span class="token comment"># 设置端口允许通过的VLAN</span><span class="token comment"># [Huawei-GigabitEthernet0/0/4]port trunk allow-pass vlan all  # 设置所有端口允许通过的VLAN</span></code></pre><p>交换机LSW2的配置：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 配置LSW2的VLAN(删除配置)</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>inter g0/0/3  <span class="token comment"># 进入端口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>undo port default vlan<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>undo port link-type<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port link-type trunk  <span class="token comment"># 指定端口类型</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port trunk allow-pass vlan <span class="token number">2</span>  <span class="token comment"># 设置端口允许通过的VLAN</span><span class="token comment"># [Huawei-GigabitEthernet0/0/3]port trunk allow-pass vlan all  # 设置所有端口允许通过的VLAN</span></code></pre><ul><li><p><strong>Step3：</strong> 使用其中一个交换机的一个VLAN(冲突域)的主机ping其他交换机内<strong>同一个</strong>VLAN(冲突域)的主机即可ping通</p></li><li><p><strong>Step4.1：</strong> 抓包测试(开始抓包即可查看数据帧信息)</p></li></ul><p>注：<br><strong>1.</strong> trunk封装的标签802.1Q(思科有私有的协议ISL)<br><strong>2.</strong> 本征VLAN(Navtive Vlan)，只要不打标的帧就是转发到本征VLAN的帧。<br><font color="#999AAA">例如，如果 VLAN 99 被配置为本征 VLAN，则PVID为 99，那么所有的无标记流量都被转发到 VLAN 99。</font><br><strong>3.</strong> 所以，两个直连的交换机端口的本征VLAN必须相同<br><strong>4.</strong> Huawei真机上可以同时进两个端口进行相同的操作</p><ul><li><strong>三、使用三个交换机一根线实现VLAN</strong></li></ul><p><font color="#999AAA">交换机之间要通，要设置<strong>相同</strong>的VLAN。</font></p><ul><li><strong>Step1：</strong> 画出网络拓扑图(书接上回<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)</li></ul><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 实验二——网络拓扑3-16564712016148.png"><ul><li><strong>Step2：</strong> 在三台交换机上各自配置VLAN</li></ul><p>交换机LSW1和LSW2的配置：略</p><p>交换机LSW3的配置：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 配置LSW2的VLAN</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>vlan <span class="token number">2</span><span class="token punctuation">[</span>Huawei-vlan2<span class="token punctuation">]</span>inter g0/0/2  <span class="token comment"># 进入端口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>port link-type trunk  <span class="token comment"># 指定端口类型</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>port trunk allow-pass vlan <span class="token number">2</span>  <span class="token comment"># 设置端口允许通过的VLAN</span><span class="token comment"># [Huawei-GigabitEthernet0/0/2]port trunk allow-pass vlan all  # 设置端口允许通过的VLAN</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/2<span class="token punctuation">]</span>inter g0/0/3  <span class="token comment"># 进入端口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port link-type trunk  <span class="token comment"># 指定端口类型</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/3<span class="token punctuation">]</span>port trunk allow-pass vlan <span class="token number">2</span>  <span class="token comment"># 设置端口允许通过的VLAN</span><span class="token comment"># [Huawei-GigabitEthernet0/0/3]port trunk allow-pass vlan all  # 设置端口允许通过的VLAN</span></code></pre><ul><li><strong>Step3：</strong> 使用其中一个交换机的一个VLAN(冲突域)的主机ping其他交换机内<strong>同一个</strong>VLAN(冲突域)的主机即可ping通</li></ul><h3 id="实验三：VLAN间路由-单臂路由"><a href="#实验三：VLAN间路由-单臂路由" class="headerlink" title="实验三：VLAN间路由(单臂路由)"></a><strong>实验三：VLAN间路由(单臂路由)</strong></h3><p>通过路由器转发不同网段的数据。</p><ul><li><strong>Step1：</strong> 画出网络拓扑图(书接上回<span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)</li></ul><p><font color="#999AAA">路由器AR1选AR2220</font><br><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 实验三——网络拓扑-16564712016149.png"></p><ul><li><strong>Step2：</strong> 配置交换机的VLAN</li></ul><p>把交换机的接口接入模式全部设置成trunk。</p><p>连接主机的交换机的接口：略</p><p>连接路由器的交换机的接口：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 设置交换机接口模式为trunk</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>inter g0/0/4<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port link-type trunk<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/4<span class="token punctuation">]</span>port trunk allow-pass vlan all</code></pre><ul><li><strong>Step3：</strong> 配置路由器</li></ul><p><font color="#999AAA">路由器：用来转发不同网段的设备</font></p><p><font color="#999AAA">在本实验中：</font><br>VLAN1 要通信，在物理接口上配IP即可<br>VLAN2 要通信，则要用打标签的方法</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 配置路由器</span><span class="token comment"># todo 配置g0/0/0接口</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>inter g0/0/0  <span class="token comment"># 进入接口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip address <span class="token number">10.1</span>.1.254 <span class="token number">24</span>  <span class="token comment"># 配置IP</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>display this  <span class="token comment"># 显示配置信息</span><span class="token punctuation">[</span>V200R003C00<span class="token punctuation">]</span><span class="token comment">#</span>interface GigabitEthernet0/0/0 <span class="token function">ip</span> address <span class="token number">10.1</span>.1.254 <span class="token number">255.255</span>.255.0 <span class="token comment">#</span><span class="token builtin class-name">return</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span><span class="token comment"># todo 配置g0/0/0.2子接口(逻辑接口)</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>inter g0/0/0.2  <span class="token comment"># 进入接口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0.2<span class="token punctuation">]</span>dot1q termination vid <span class="token number">2</span>  <span class="token comment"># 封装dot1q协议，该子接口对应VLAN2，该接口收发的数据帧都要打上标签2</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0.2<span class="token punctuation">]</span>ip address <span class="token number">10.1</span>.2.254 <span class="token number">24</span>  <span class="token comment"># 添加IP</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0.2<span class="token punctuation">]</span>arp broadcast <span class="token builtin class-name">enable</span>  <span class="token comment"># 开启终结子接口的ARP广播功能</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0.2<span class="token punctuation">]</span>display this  <span class="token comment"># 显示配置信息</span><span class="token punctuation">[</span>V200R003C00<span class="token punctuation">]</span><span class="token comment">#</span>interface GigabitEthernet0/0/0.2 dot1q termination vid <span class="token number">2</span> <span class="token function">ip</span> address <span class="token number">10.1</span>.2.254 <span class="token number">255.255</span>.255.0  arp broadcast <span class="token builtin class-name">enable</span><span class="token comment">#</span><span class="token builtin class-name">return</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0.2<span class="token punctuation">]</span></code></pre><p>注：<br><strong>1.</strong> 物理接口数据帧不打标，逻辑接口数据帧才打标。(逻辑接口依赖物理接口通信)<br><strong>2.</strong> g0/0/0.1和VLAN1没有对应关系，g0/0/0.x随便用。<br><strong>3.</strong> <strong>跨VLAN通信过程</strong>！！！</p><ul><li><p><strong>Step3.5：</strong> 主机配置相应的网关</p></li><li><p><strong>Step4：</strong> 使用其中一个VLAN(冲突域)的主机ping其他VLAN(冲突域)的主机即可</p></li></ul><h3 id="实验四：VLAN间路由-三层交换"><a href="#实验四：VLAN间路由-三层交换" class="headerlink" title="实验四：VLAN间路由(三层交换)"></a><strong>实验四：VLAN间路由(三层交换)</strong></h3><ul><li><p><strong>一、使用两个交换机实现VLAN间通信(三层交换机之间的VLAN路由)</strong></p></li><li><p><strong>Step1：</strong> 画出网络拓扑图(书接上回<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)</p></li></ul><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 实验四——网络拓扑1-165647120161410.png"><ul><li><p><strong>Step1.5：</strong> 配置主机的IP地址、子网掩码、网关(略)</p></li><li><p><strong>Step2：</strong> 配置交换机的VLAN</p></li></ul><p>为交换机端口划分VLAN：略</p><p>为交换机接口配置IP：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 为交换机接口配置IP</span><span class="token punctuation">[</span>Huawei-Vlanif2<span class="token punctuation">]</span>int vlan <span class="token number">1</span><span class="token punctuation">[</span>Huawei-Vlanif1<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.1</span>.1.254 <span class="token number">24</span><span class="token punctuation">[</span>Huawei-Vlanif1<span class="token punctuation">]</span>int vlan <span class="token number">2</span><span class="token punctuation">[</span>Huawei-Vlanif2<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">10.1</span>.2.254 <span class="token number">24</span><span class="token punctuation">[</span>Huawei-Vlanif2<span class="token punctuation">]</span></code></pre><ul><li><strong>Step2.5：</strong> 主机配置网关</li><li><strong>Step3：</strong> 使用其中一个VLAN的主机ping其他VLAN的主机即可</li><li><strong>Step4：</strong> 抓包</li></ul><p>经过交换机转发的数据帧<strong>不打</strong>标签，因为其连接各主机是 <strong>access</strong> 模式。</p><h2 id="DHCP原理与配置"><a href="#DHCP原理与配置" class="headerlink" title="DHCP原理与配置"></a>DHCP原理与配置</h2><ul><li><p><strong>一、使用交换机配置DHCP和DNS</strong></p></li><li><p><strong>Step1：</strong> 画出网络拓扑图(书接上回<span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)</p></li></ul><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 DHCP实验1——网络拓扑-165647120161411.png"><ul><li><strong>Step2：</strong> 配置三层交换机的DHCP和DNS服务</li></ul><p><strong>法1：</strong> 基于接口DHCP配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 配置DHCP和DNS</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dhcp <span class="token builtin class-name">enable</span>  <span class="token comment"># 开启DHCP服务</span>Info: The operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment.done.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>inter vlan <span class="token number">1</span>  <span class="token comment"># 进入VLAN1</span><span class="token punctuation">[</span>Huawei-Vlanif1<span class="token punctuation">]</span>dhcp <span class="token keyword">select</span> interface  <span class="token comment"># 使用接口的IP作为网关</span><span class="token punctuation">[</span>Huawei-Vlanif1<span class="token punctuation">]</span>dhcp server lease day <span class="token number">0</span> hour <span class="token number">2</span> minute <span class="token number">0</span>  <span class="token comment"># 设置DHCP租约时间</span><span class="token punctuation">[</span>Huawei-Vlanif1<span class="token punctuation">]</span>dhcp server dns-list <span class="token number">114.114</span>.114.114  <span class="token comment"># 设置DNS服务器地址114.114.114.114(万能DNS地址)</span><span class="token punctuation">[</span>Huawei-Vlanif1<span class="token punctuation">]</span></code></pre><p><strong>法2：</strong> 基于DHCP地址池分配全局配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 配置DHCP和DNS</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>ip pool <span class="token number">1</span>  <span class="token comment"># 创建IP地址池</span>Info:It's successful to create an IP address pool.<span class="token punctuation">[</span>Huawei-ip-pool-1<span class="token punctuation">]</span>network <span class="token number">10.1</span>.2.0 mask <span class="token number">24</span>  <span class="token comment"># 配置网段和掩码</span><span class="token punctuation">[</span>Huawei-ip-pool-1<span class="token punctuation">]</span>gateway-list <span class="token number">10.1</span>.2.254  <span class="token comment"># 配置网关</span><span class="token punctuation">[</span>Huawei-ip-pool-1<span class="token punctuation">]</span>dns-list <span class="token number">114.114</span>.114.114  <span class="token comment"># 设置DNS地址</span><span class="token punctuation">[</span>Huawei-ip-pool-1<span class="token punctuation">]</span>lease day <span class="token number">0</span> hour <span class="token number">2</span> minute <span class="token number">0</span>  <span class="token comment"># 设置DHCP租约时间</span><span class="token punctuation">[</span>Huawei-ip-pool-1<span class="token punctuation">]</span>excluded-ip-address <span class="token number">10.1</span>.2.200 <span class="token number">10.1</span>.2.250  <span class="token comment"># 这些地址不会被分配出去</span><span class="token punctuation">[</span>Huawei-ip-pool-1<span class="token punctuation">]</span>inter vlan <span class="token number">2</span>  <span class="token comment"># 进入VLAN2</span><span class="token punctuation">[</span>Huawei-Vlanif2<span class="token punctuation">]</span>dhcp <span class="token keyword">select</span> global  <span class="token comment"># 设置DHCP基于全局配置</span></code></pre><p>注：<br><strong>1.</strong> DHCP获取的地址有祖约时间<br><strong>2.</strong> 给别人分祖约时间一般分2h<br><strong>3.</strong> 一般过了租约时间的2/3，PC会发送请求，服务器会继续续租</p><ul><li><p><strong>Step3：</strong> 主机开启并应用DHCP配置，即可获得DHCP自动分配的IP地址</p></li><li><p><strong>二、使用DHCP中继配置DHCP和DNS</strong></p></li><li><p><strong>Step1：</strong> 画出网络拓扑图(书不接上回)</p></li></ul><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 DHCP实验2——网络拓扑-165647120161512.png"><ul><li><strong>Step2：</strong> 配置路由器的DHCP和DNS服务</li></ul><p>配置路由器<strong>AR2</strong>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 配置接口IP、静态路由</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dhcp <span class="token builtin class-name">enable</span>  <span class="token comment"># 开启DHCP服务</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int g0/0/0  <span class="token comment"># 进入接口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">23.1</span>.1.3 <span class="token number">24</span>  <span class="token comment"># 添加IP地址、掩码</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>q<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>ip route-static <span class="token number">0.0</span>.0.0 <span class="token number">0.0</span>.0.0 <span class="token number">23.1</span>.1.2  <span class="token comment"># 缺省路由，所有网络到达所有网络的路径都是通过23.1.1.2这个地址转发的</span><span class="token comment"># todo 创建DHCP地址池分配IP</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip pool pc  <span class="token comment"># 创建IP地址池</span>Info: It's successful to create an IP address pool.<span class="token punctuation">[</span>Huawei-ip-pool-pc<span class="token punctuation">]</span>network <span class="token number">192.168</span>.1.0 mask <span class="token number">255.255</span>.255.0  <span class="token comment"># 设置网段、掩码</span><span class="token punctuation">[</span>Huawei-ip-pool-pc<span class="token punctuation">]</span>gateway-list <span class="token number">192.168</span>.1.1  <span class="token comment"># 设置网关</span><span class="token punctuation">[</span>Huawei-ip-pool-pc<span class="token punctuation">]</span>dns-list <span class="token number">114.114</span>.114.114  <span class="token comment"># 设置DNS地址</span><span class="token punctuation">[</span>Huawei-ip-pool-pc<span class="token punctuation">]</span>dis th  <span class="token comment"># 显示本配置</span><span class="token punctuation">[</span>V200R003C00<span class="token punctuation">]</span><span class="token comment">#</span><span class="token function">ip</span> pool pc gateway-list <span class="token number">192.168</span>.1.1  network <span class="token number">192.168</span>.1.0 mask <span class="token number">255.255</span>.255.0  dns-list <span class="token number">114.114</span>.114.114 <span class="token comment">#</span><span class="token builtin class-name">return</span><span class="token comment"># todo 启用DHCP</span><span class="token punctuation">[</span>Huawei-ip-pool-pc<span class="token punctuation">]</span>inter g0/0/0  <span class="token comment"># 进入接口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>dhcp <span class="token keyword">select</span> global  <span class="token comment"># 设置DHCP全局配置</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>dis th  <span class="token comment"># 显示本配置</span><span class="token punctuation">[</span>V200R003C00<span class="token punctuation">]</span><span class="token comment">#</span>interface GigabitEthernet0/0/0 <span class="token function">ip</span> address <span class="token number">23.1</span>.1.3 <span class="token number">255.255</span>.255.0  dhcp <span class="token keyword">select</span> global<span class="token comment">#</span><span class="token builtin class-name">return</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span></code></pre><p>配置路由器<strong>AR1</strong>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 配置IP地址</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>inter g0/0/1  <span class="token comment"># 进入接口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">23.1</span>.1.2 <span class="token number">24</span>  <span class="token comment"># 添加IP</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/1<span class="token punctuation">]</span>ping <span class="token number">23.1</span>.1.3  <span class="token comment"># 测试网络连通性</span>  PING <span class="token number">23.1</span>.1.3: <span class="token number">56</span>  data bytes, press CTRL_C to <span class="token builtin class-name">break</span>    Reply from <span class="token number">23.1</span>.1.3: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">Sequence</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">255</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">100</span> ms    Reply from <span class="token number">23.1</span>.1.3: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">Sequence</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">255</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">20</span> ms    Reply from <span class="token number">23.1</span>.1.3: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">Sequence</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">255</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">30</span> ms    Reply from <span class="token number">23.1</span>.1.3: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">Sequence</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">255</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">30</span> ms  --- <span class="token number">23.1</span>.1.3 <span class="token function">ping</span> statistics ---    <span class="token number">4</span> packet<span class="token punctuation">(</span>s<span class="token punctuation">)</span> transmitted    <span class="token number">4</span> packet<span class="token punctuation">(</span>s<span class="token punctuation">)</span> received    <span class="token number">0.00</span>% packet loss    round-trip min/avg/max <span class="token operator">=</span> <span class="token number">20</span>/45/100 ms<span class="token comment"># todo DHCP中继</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dhcp <span class="token builtin class-name">enable</span>  <span class="token comment"># 开启DHCP服务</span>Info: The operation may take a few seconds. Please <span class="token function">wait</span> <span class="token keyword">for</span> a moment.done.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>inter g0/0/0  <span class="token comment"># 进入接口</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.1.1 <span class="token number">24</span>  <span class="token comment"># 添加IP地址</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>dhcp <span class="token keyword">select</span> relay<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>dhcp relay server-ip <span class="token number">23.1</span>.1.3  <span class="token comment"># 指向DHCP服务器IP</span></code></pre><p>AR2根据源IP地址判断应该用哪一个地址池分配IP地址<br>广播包-&gt;单播包</p><ul><li><strong>Step3：</strong> 抓包测试(略)</li></ul><h2 id="STP原理与配置"><a href="#STP原理与配置" class="headerlink" title="STP原理与配置"></a>STP原理与配置</h2><p>STP作用：消除环路、阻塞端口、链路备份</p><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 STP作用——消除环路.png"><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 STP作用——阻塞端口-165647120161514.png"><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 STP作用——链路备份.png"><h3 id="环路引起的问题"><a href="#环路引起的问题" class="headerlink" title="环路引起的问题"></a>环路引起的问题</h3><p><strong>交换机转发流程</strong>：交换机收到数据帧，先把源MAC添加到MAC表中，然后根据目标MAC转发 。如果MAC表中没有目的MAC则泛洪(把帧复制成多份，向除了接收端口外其他<strong>相同VLAN</strong>下的所有接口以及<strong>trunk接口</strong>转发单播帧)。</p><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 交换机转发流程-165647120161516.png"><p><strong>问题</strong>：</p><p><strong>环路引起的问题之一——广播风暴</strong>.<br><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 广播风暴-165647120161517.png"></p><p><strong>环路引起的问题之二——MAC地址表不稳定</strong>.<br><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 MAC地址表不稳定-165647120161518.png"></p><p><strong>环路引起的问题之三——帧的多个副本</strong>.</p><h3 id="生成树基本计算过程"><a href="#生成树基本计算过程" class="headerlink" title="生成树基本计算过程"></a>生成树基本计算过程</h3><ul><li>Step1. 选取根桥/根交换机(一个广播域内桥ID<font color="#999AAA">(桥ID由网桥优先级和MAC地址组成)</font>最小的交换机)</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dis stp  <span class="token comment"># 查看交换机STP信息</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>dis stp brief  <span class="token comment"># 查看交换机STP信息</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>stp priorit <span class="token number">4096</span>  <span class="token comment"># 修改交换机优先级</span></code></pre><p><strong>1.</strong> 优先级步长 4096<br><strong>2.</strong> Huawei 交换机端口开销默认为 2000</p><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 交换机端口角色-165647120161519.png"><ul><li>Step2. <strong>Root Port</strong> 根端口(<strong>非根</strong>交换机到达<strong>根</strong>交换机累计路径开销最小的接口)</li></ul><p>根端口RP比较优先级：</p><ol><li>根桥ID大小</li><li>到达根桥累计路径开销</li><li>指定桥ID/<strong>发送者</strong>桥ID</li><li>指定PID(端口ID：port id)/<strong>发送者</strong>端口ID = 端口优先级(默认128) + 端口号</li><li><strong>本地</strong>端口ID</li></ol><p>注：<br><strong>1.</strong> <strong>根桥</strong>上的端口<strong>不是</strong>根端口！！！<br><strong>2.</strong> <strong>根端口</strong>是在<strong>非根桥</strong>上的端口！！！<br><strong>3.</strong> 根桥确定之前，交换机只能发送BPDU，不能转发BPDU<br><strong>4.</strong> 一旦根桥被选出来，非根桥没有权利发送BPDU</p><p>转发：不改动数据帧<br>中继：改动数据帧，然后转发</p><ul><li>Step3. <strong>Designated Port</strong> 指定端口(一个网段/冲突域内到达根桥累计开销最小的接口)</li></ul><p>一个<strong>冲突域</strong>就要选一个<strong>指定端口</strong></p><p>指定端口比较优先级：</p><ol><li>到达根桥累计开销</li><li>指定桥ID</li></ol><ul><li>Step4. <strong>Alternate Port</strong> 非指定/预备端口(非根交换机上除根端口和指定端口外的其他端口)</li></ul><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 端口状态描述-165647120161520.png"><p><strong>Discarding</strong> = Blocking + Listening</p><p><strong>端口状态变换：</strong><br><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 端口状态变换-165647120161521.png"></p><p><strong>Blocking：</strong> 只收BPDU<br>如果要维持Blocking，那么20s内就要收到根桥发送的配置BPDU。如果连续20s没收到根桥发送的配置BPDU，就自动从Blocking进入Listening状态。或者其他接口断掉直接进入Listening状态。<br><strong>Listening：</strong> 收发BPDU<br>该状态下，如果发现自己是非指定端口，那么将该端口转为Blocking状态，如果发现自己是根桥端口，再等15s，此时还是Listening状态(能收发配置BPDU，但是不能收发用户数据，因为要通过配置BPDU判断自己的端口角色)。如果发现自己真的是根桥端口，那么会变成Learning(Learning再持续15s变成Forwarding)。<br><strong>Learning:</strong> 收发BPDU，只收用户数据(不转发数据帧、学习MAC地址表)<br><strong>Forwarding：</strong> 收发BPDU，收发用户数据(转发数据帧、学习MAC地址表)</p><p>注：<br><strong>1.</strong> 一个老化时间 20s，最大转发延迟 15s<br><strong>2.</strong> 一个端口从 Blocking 到 Forwarding 所需最大时间 = 20s(老化) + 15s(Listening) + 15s(Learning) = 50s<br><strong>3.</strong> MAC地址表快速老化，老化时间缩短</p><blockquote><p><strong>问题：</strong> 左右两根线断掉之后，LSW1的端口GE 0/0/2从Blocking到Forwarding需要多长时间？</p></blockquote><img src="/2022/06/29/ict-zhan-dui-di-3-ci-bi-ji/03 生成树问题-165647120161522.png"><blockquote><p><strong>答：</strong><br>左线断30s = 0s(LSW1：Blocking-&gt;Listening) + 15s(LSW1：Listening-&gt;Learning) + 15s(LSW1：Learning-&gt;Forwarding)<br>右线断50s = 20s(LSW1：Blocking-&gt;Listening) + 15s(LSW1：Listening-&gt;Learning) + 15s(LSW1：Learning-&gt;Forwarding)</p></blockquote><br><h3 id="生成树简单配置"><a href="#生成树简单配置" class="headerlink" title="生成树简单配置"></a>生成树简单配置</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>sw<span class="token punctuation">]</span>stp <span class="token builtin class-name">enable</span><span class="token punctuation">[</span>sw<span class="token punctuation">]</span>stp mode stp<span class="token punctuation">[</span>sw<span class="token punctuation">]</span>stp priority <span class="token number">8192</span></code></pre><p><font color="#999AAA">资料：《H3C STP技术白皮书》</font></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> ICT战队数据通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HCIA </tag>
            
            <tag> 华为eNSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICT战队-第2次笔记</title>
      <link href="/2022/06/29/ict-zhan-dui-di-2-ci-bi-ji/"/>
      <url>/2022/06/29/ict-zhan-dui-di-2-ci-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="ICT战队-第2次笔记"><a href="#ICT战队-第2次笔记" class="headerlink" title="ICT战队-第2次笔记"></a>ICT战队-第2次笔记</h1><p>[toc]</p><p><font color="#999AAA">江老师开场白：<br>组网：smart link<br>物理允许环路，工作时不允许<br>某一链路断开，不会影响其他的通信</font></p><h2 id="Huawei命令行操作基础"><a href="#Huawei命令行操作基础" class="headerlink" title="Huawei命令行操作基础"></a>Huawei命令行操作基础</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 交换机下配置管理ip</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>int vlan <span class="token number">1</span><span class="token punctuation">[</span>Huawei-Vlanif1<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.56.250 <span class="token number">24</span><span class="token punctuation">[</span>Huawei-Vlanif1<span class="token punctuation">]</span>undo <span class="token function">shutdown</span><span class="token comment"># todo 注释</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>description something<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>undo description<span class="token comment"># todo 查看历史命令</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>display history-command历史记录命令<span class="token comment"># todo 使用中文</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>language-mode Chinese Change language mode, confirm? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span> ySep <span class="token number">20</span> <span class="token number">2021</span> <span class="token number">23</span>:44:03-08:00 Huawei %%01CMD/4/LAN_MODE<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>:The user chose Y when deciding whether to change the language mode.提示：改变语言模式成功。<span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span><span class="token comment"># todo 查看设备的配置文件和操作系统</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>dirDirectory of flash:/  Idx  Attr     Size<span class="token punctuation">(</span>Byte<span class="token punctuation">)</span>  Date        Time       FileName     <span class="token number">0</span>  drw-              -  Aug 06 <span class="token number">2015</span> <span class="token number">21</span>:26:42   src    <span class="token number">1</span>  drw-              -  Sep <span class="token number">19</span> <span class="token number">2021</span> <span class="token number">10</span>:16:17   compatible<span class="token number">32,004</span> KB total <span class="token punctuation">(</span><span class="token number">31,972</span> KB <span class="token function">free</span><span class="token punctuation">)</span><span class="token comment"># todo 关闭消息信息</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>un <span class="token keyword">in</span> en<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>undo terminal monitor</code></pre><p>1)交换机没有0/0/0只有0/0/1<br>2)易失、非易失存储器-&gt;内存、硬盘<br>3)开机重装操作系统(操作系统是操作系统，配置文件是配置文件(开机配置、当前配置))</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 查看配置信息</span>display version  <span class="token comment"># 版本信息</span>display current-configuration  <span class="token comment"># 当前配置</span>display saved-configuration  <span class="token comment"># 保存配置</span>display current-configuration configuration XXX  <span class="token comment"># 管理员配置生效内容</span>display current-configuration configuration vlan  <span class="token comment"># vlan相关配置</span>display current-configuration <span class="token operator">|</span> begin  <span class="token comment"># 管道输出指定内容</span>display current-configuration <span class="token operator">|</span> b vty <span class="token number">0</span> <span class="token number">4</span>  <span class="token comment"># 管道输出</span>display current-configuration <span class="token operator">|</span> include sysname  <span class="token comment"># sysname相关配置</span>display <span class="token function">ip</span> interface brief  接口ip状态配置信息，二层接口信息display <span class="token function">ip</span> int brief  接口ip状态配置信息，接口三层信息display interfaces g0/0/1  接口当前流量</code></pre><p>1)推测设备环路：广播包1%+<br>2)Physical端口，Protocol协议；*down被管理员关掉的</p><table><thead><tr><th align="center">设备</th><th align="center">端口</th><th align="center">协议</th><th>说明</th></tr></thead><tbody><tr><td align="center">交换机</td><td align="center">down</td><td align="center">down</td><td>1.没有物理连接，2.(error disable)根防护，先shutdown再undo shutdown</td></tr><tr><td align="center">交换机</td><td align="center">*down</td><td align="center">down</td><td>管理员down，接口下undo shutdown</td></tr><tr><td align="center">路由器</td><td align="center">up</td><td align="center">down</td><td>1.没有物理连接，2.串行线路时钟频率不匹配，3.PPP协商失败</td></tr></tbody></table><table><thead><tr><th align="center">用户级别</th><th align="center">允许使用的命令级</th><th align="center">进入系统试图</th><th align="center">保存配置文件</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">访问级</td><td align="center">不能</td><td align="center">不能</td></tr><tr><td align="center">1</td><td align="center">监控级</td><td align="center">能</td><td align="center">不能</td></tr><tr><td align="center">2</td><td align="center">系统级</td><td align="center">能</td><td align="center">能</td></tr><tr><td align="center">3-15</td><td align="center">管理级</td><td align="center">能</td><td align="center">能</td></tr></tbody></table><h3 id="实验一：Telnet远程登陆配置"><a href="#实验一：Telnet远程登陆配置" class="headerlink" title="实验一：Telnet远程登陆配置"></a><strong>实验一：Telnet远程登陆配置</strong></h3><ul><li>Step1.网络拓扑</li></ul><img src="/2022/06/29/ict-zhan-dui-di-2-ci-bi-ji/Telnet拓扑-16565177900041.png"><ul><li>Step1.5配置云</li></ul><p>绑定信息：1.UDP、2.VirtualBox······IP: 192.168.56.1<br>端口类型：Ethernet<br>双向通道：√</p><ul><li>Step2.配置交换机</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 添加IP，此后主机可以ping通</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>sysEnter system view, <span class="token builtin class-name">return</span> user view with Ctrl+Z.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>interface vlan <span class="token number">1</span><span class="token punctuation">[</span>Huawei-Vlanif1<span class="token punctuation">]</span>ip address <span class="token number">192.168</span>.56.250 <span class="token number">24</span><span class="token punctuation">[</span>Huawei-Vlanif1<span class="token punctuation">]</span>undo <span class="token function">shutdown</span> <span class="token punctuation">[</span>Huawei-Vlanif1<span class="token punctuation">]</span><span class="token comment"># todo 开启telnet服务</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>telnet server enbale  <span class="token comment"># 开启远程登录</span><span class="token comment"># todo 配置虚拟接口</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>user-interface vty <span class="token number">0</span> <span class="token number">4</span>  <span class="token comment"># 同时进入5条虚链路配置</span><span class="token punctuation">[</span>Huawei-ui-vty0-4<span class="token punctuation">]</span>user privilege level <span class="token number">15</span>  <span class="token comment"># 设置用户级别为3</span><span class="token punctuation">[</span>Huawei-ui-vty0-4<span class="token punctuation">]</span>protocol inbound telnet  <span class="token comment"># 设置允许telnet服务接入（默认允许所有）</span><span class="token punctuation">[</span>Huawei-ui-vty0-4<span class="token punctuation">]</span>authentication-mode aaa  <span class="token comment"># 基本本地用户认证</span><span class="token punctuation">[</span>Huawei-ui-vty0-4<span class="token punctuation">]</span>authentication-mode none  <span class="token comment"># 不认证</span><span class="token punctuation">[</span>Huawei-ui-vty0-4<span class="token punctuation">]</span>authentication-mode password  <span class="token comment"># 基于vty线路下密码认证</span><span class="token comment"># todo 线路下设置密码配合基于密码认证，即password</span><span class="token punctuation">[</span>Huawei-ui-vty0-4<span class="token punctuation">]</span>set authentication password cipher huawei  <span class="token comment"># 设置线路下密码</span><span class="token punctuation">[</span>Huawei-ui-vty0-4<span class="token punctuation">]</span>user privilege level <span class="token number">15</span>  <span class="token comment"># 设线路下认证权限</span><span class="token comment"># todo 创建认证用户，即aaa</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>aaa  <span class="token comment"># 进入aaa模式</span><span class="token punctuation">[</span>Huawei-aaa<span class="token punctuation">]</span>local-user admin password cipher huawei  <span class="token comment"># 创建damin用户，设置密码</span><span class="token punctuation">[</span>Huawei-aaa<span class="token punctuation">]</span>local-user admin service-type telnet  <span class="token comment"># 允许使用telnet服务</span><span class="token punctuation">[</span>Huawei-aaa<span class="token punctuation">]</span>local-user admin privilege level <span class="token number">15</span>  <span class="token comment"># 设置用户级别为15</span></code></pre><ul><li>Step3.然后在SecureCRT使用Telnet远程登录</li></ul><blockquote><ul><li><strong>问题</strong>：为什么会down</li><li><strong>答</strong>：(以后再说)</li></ul></blockquote><h3 id="实验二：ssh配置"><a href="#实验二：ssh配置" class="headerlink" title="实验二：ssh配置"></a><strong>实验二：ssh配置</strong></h3><p>telnet明文，ssh加密<br>数据对称加密：加密解密密钥一样<br>数据非对称加密：公钥加密之后的密文只有私钥能解密</p><ul><li><p>Step 0.网络拓扑(同上，略)</p></li><li><p>Step 1.配置交换机</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 创建认证密钥对</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>rsa local-key-pair createThe key name will be: Huawei_HostThe range of public key size is <span class="token punctuation">(</span><span class="token number">512</span> ~ <span class="token number">2048</span><span class="token punctuation">)</span>. NOTES: If the key modulus is greater than <span class="token number">512</span>,        it will take a few minutes.Input the bits <span class="token keyword">in</span> the modulus<span class="token punctuation">[</span>default <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">]</span>:Generating keys<span class="token punctuation">..</span>.<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>++++++++++++<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.++++++++++++<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.++++++++<span class="token punctuation">..</span>++++++++<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span><span class="token comment"># todo 配置虚链路</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>user-interface vty <span class="token number">0</span> <span class="token number">4</span>  <span class="token comment"># 同时进入5条虚链路进行配置</span><span class="token punctuation">[</span>Huawei-ui-vty0-4<span class="token punctuation">]</span>user privilege level <span class="token number">15</span>  <span class="token comment"># 设置用户级别为15</span><span class="token punctuation">[</span>Huawei-ui-vty0-4<span class="token punctuation">]</span>authentication-mode aaa  <span class="token comment"># 基于本地用户认证</span><span class="token punctuation">[</span>Huawei-ui-vty0-4<span class="token punctuation">]</span>protocol inbound <span class="token function">ssh</span>  <span class="token comment"># 设置允许ssh服务接入</span><span class="token punctuation">[</span>Huawei-ui-vty0-4<span class="token punctuation">]</span><span class="token comment"># todo 创建ssh登录用户，切换与ssh登录权限</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>ssh user admin service-type stelnet  <span class="token comment"># 创建ssh用户</span>Info: Succeeded <span class="token keyword">in</span> adding a new SSH user.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>ssh user admin authentication-type password  <span class="token comment"># 设置ssh验证方式</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>aaa  <span class="token comment"># 进入aaa模式</span><span class="token punctuation">[</span>Huawei-aaa<span class="token punctuation">]</span>local-user admin password cipher huawei  <span class="token comment"># 创建用户admin并设置密码</span><span class="token punctuation">[</span>Huawei-aaa<span class="token punctuation">]</span>local-user admin service-type <span class="token function">ssh</span>  <span class="token comment"># 允许使用ssh服务</span><span class="token punctuation">[</span>Huawei-aaa<span class="token punctuation">]</span>local-user admin privilege level <span class="token number">15</span>  <span class="token comment"># 设置用户级别为15</span><span class="token punctuation">[</span>Huawei-aaa<span class="token punctuation">]</span>q<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>stelnet server <span class="token builtin class-name">enable</span>  <span class="token comment"># 开启ssh服务</span>Info: Succeeded <span class="token keyword">in</span> starting the Stelnet server.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span></code></pre><p>开启了ssh服务就不能再使用telnet服务<br>而且，ssh服务只能使用aaa模式登录</p><ul><li><p>Step2.然后在SecureCRT使用ssh远程登录</p></li><li><p><strong>SecureCRT</strong><br>ssh要(不要)保存公钥</p></li></ul><h2 id="Huawei网络设备文件管理"><a href="#Huawei网络设备文件管理" class="headerlink" title="Huawei网络设备文件管理"></a>Huawei网络设备文件管理</h2><ul><li><strong>网络设备文件管理</strong>：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 1. 文件操作</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>dir /all  <span class="token comment"># 显示目录中的文件和子目录列表</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>mkdir <span class="token punctuation">[</span>filename  <span class="token comment"># 创建目录</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>rmdir <span class="token punctuation">[</span>filename  <span class="token comment"># 删除目录</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>more <span class="token punctuation">[</span>filename  <span class="token comment"># 显示文件内容</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>copy <span class="token punctuation">[</span>src-filename <span class="token punctuation">[</span>des-filenmae  <span class="token comment"># 拷贝文件</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>move <span class="token punctuation">[</span>src-filename <span class="token punctuation">[</span>des-filenmae  <span class="token comment"># 移动文件</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>rename <span class="token punctuation">[</span>old-name <span class="token punctuation">[</span>new-name  <span class="token comment"># 重命名文件</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>delete filename  <span class="token comment"># 删除文件</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>undelete filename  <span class="token comment"># 恢复删除的文件</span><span class="token comment"># &lt;Huawei&gt;fixdisk drive  # 修复文件系统异常的存储器</span><span class="token comment"># &lt;Huawei&gt;format drive  # 格式化存储器</span><span class="token comment"># todo 2. 配置文件操作</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>save  <span class="token comment"># 保存配置文件</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>reset saved-configuration  <span class="token comment"># 擦除配置文件</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>startup saved-configuration <span class="token builtin class-name">test</span>  <span class="token comment"># 设置下次开机配置文件</span><span class="token comment"># todo 3. 配置文件显示与维护</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>display saved-configuration  <span class="token comment"># 查看保存的配置文件</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>display startup  <span class="token comment"># 显示当前配置文件</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>display current-configuration <span class="token comment"># 显示当前配置文件</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>display current-configuration configuration aaa  <span class="token comment"># 查看指定内容</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>display this  <span class="token comment"># 查看当前视图下生效的配置</span><span class="token comment"># todo 4. 指定下次启动加载的应用程序</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>startup system-software <span class="token punctuation">[</span>iog-image  <span class="token comment"># 指定下次启动加载的应用程序</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>display boot-loader  <span class="token comment"># 显示下次启动加载的应用程序</span><span class="token comment"># todo 5.重启系统</span><span class="token operator">&lt;</span>SV<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>reboot  <span class="token comment"># 重启</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>reboot fast  <span class="token comment"># 快速重启</span><span class="token operator">&lt;</span>SV<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>schedule <span class="token function">reboot</span> at <span class="token number">22</span>:47  <span class="token comment"># 定时重启</span><span class="token operator">&lt;</span>SV<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>schedule <span class="token function">reboot</span> delay 00:01  <span class="token comment"># 等待重启</span><span class="token operator">&lt;</span>SV<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>display schedule <span class="token function">reboot</span>  <span class="token comment"># 显示设置的重启时间</span></code></pre><p><code>fixdisk drive</code>不要用，文件系统崩溃找厂商处理<br><code>format drive</code>不要用！！！</p><h3 id="实验三：使用FTP备份文件"><a href="#实验三：使用FTP备份文件" class="headerlink" title="实验三：使用FTP备份文件"></a><strong>实验三：使用FTP备份文件</strong></h3><ul><li>Step1.创建FTP服务器</li></ul><p>Serv-U：<br><strong>1.</strong> 新建域-&gt;名称：dazhuang-&gt;下一步-&gt;下一步-&gt;127.0.0.1-&gt;文件夹路径-&gt;下一步-&gt;下一步-&gt;一定选择：所有可用的IPv4-&gt;下一步-&gt;无加密-&gt;完成-&gt;<br><strong>2.</strong> 创建用户-&gt;名：benben-&gt;下一步-&gt;密码：123456-&gt;根目录(在刚才目录中，在其他目录也行)-&gt;访问权限：完全访问-&gt;完成<br><strong>3.</strong> 测试：<code>ftp://127.0.0.1</code>-&gt;benben-&gt;123456</p><ul><li><p><strong>Serv-U</strong><br>只读访问：能下不能传<br>完全访问：能下能传</p></li><li><p>Step2.上传下载备份</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>ftp <span class="token number">192.168</span>.56.1  <span class="token comment"># 使用FTP连接到FTP服务器</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span>get <span class="token punctuation">[</span>filename  <span class="token comment"># 下载</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span>put <span class="token punctuation">[</span>filename  <span class="token comment"># 上传</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span>dir</code></pre><blockquote><ul><li><strong>问题</strong>：wrong ip address</li><li><strong>解决</strong>：1.输入正确IP地址， 2.关闭防火墙</li></ul></blockquote><h2 id="Huawei网络设备基本测试"><a href="#Huawei网络设备基本测试" class="headerlink" title="Huawei网络设备基本测试"></a>Huawei网络设备基本测试</h2><h3 id="实验四：网络设备基本测试"><a href="#实验四：网络设备基本测试" class="headerlink" title="实验四：网络设备基本测试"></a><strong>实验四：网络设备基本测试</strong></h3><p><strong>命令</strong>：<code>ping</code> <code>tracet</code></p><p><strong><code>ping</code></strong></p><table><thead><tr><th align="center">参数</th><th>说明</th></tr></thead><tbody><tr><td align="center">-a</td><td>source-ip，指定ICMP回显请求(ECHO-REQUEST)报文的源IP地址，该地址必须是设备上已配置的IP地址</td></tr><tr><td align="center">-c</td><td>count，指定ICMP回显报文请求的发送次数，取值范围[1, 2^32-1]，缺省值为5</td></tr><tr><td align="center">-f</td><td>将长度大于接口MTU的报文直接丢弃，即不允许对发送的ICMP回显请求报文进行分片</td></tr><tr><td align="center">-h</td><td>指定ICMP回显请求报文中的TTL值，取值范围[1, 255]，缺省值为255</td></tr></tbody></table><p>ping用的是icmp</p><p><strong><code>tracet</code></strong></p><table><thead><tr><th align="center">参数</th><th>说明</th></tr></thead><tbody><tr><td align="center">-a</td><td>指定源IP地址</td></tr><tr><td align="center">-f</td><td>指定一个初始TTL，第一个报文允许的跳数，小于最大TTL，[1, 255]，缺省1</td></tr><tr><td align="center">-m</td><td>指定一个最大TTL，一个报文允许的最大跳数，大于初始TTL，[1, 255]，缺省1</td></tr></tbody></table><p><strong>终端输出</strong>：</p><p><strong>命令一</strong>：<code>terminal monitor</code>  开启控制台对系统信息的监视功能</p><p>用户只有首先配置<code>terminal monitor</code>命令，接下来使用相应命令才能在当前终端显示日志信息，告警信息和调试信息(注：缺省情况下，控制台的监视功能处于开启状态，而监视终端的监视功能处于关闭状态。)</p><p><strong>命令二</strong>：<code>terminal debugging</code></p><p><code>terminal debugging</code>命令用来开启当前终端调试信息的显示功能。<code>undo terminal debugging</code>用来关闭当前终端对调试信息的显示功能。(注：若需要在监控终端上显示调试信息，请先配置<code>terminal monitor</code>和<code>terminal debugging</code>命令，再使能信息中心功能(信息中心功能缺省情况下已经使能)，最后使用<code>debug</code>命令打开调试信息开关。)</p><p><strong>命令三</strong>：<code>debug [model-name</code></p><p><code>debugging</code>命令用来打开设备支持的功能项的调试开关，<code>undo debugging</code>命令用来关闭设备支持的功能项的调试开关。缺省情况下，所有功能项的调试开关处于关闭状态。</p><p><strong>命令四</strong>：<code>&lt;R1&gt;display debugging</code></p><p><code>&lt;R1&gt;display debugging</code>命令用来显示系统中已经打开的调试开关</p><p><font color="#999AAA">真机抓包：端口镜像</font></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 显示debug信息</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>terminal monitor  <span class="token comment"># 在终端显示日志</span>Info: Current terminal monitor is on.<span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>terminal debugging  <span class="token comment"># 显示debug信息</span>Info: Current terminal debugging is on.<span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>debugging <span class="token function">ip</span> icmp verbose  <span class="token comment"># 查看ip详细信息</span><span class="token comment"># &lt;Huawei&gt;debugging tcp packet  # 查看tcp详细信息</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>save</code></pre><p><strong>1.</strong> 不要debug信息量很大的日志信息(防止日志显示过多导致无法输入命令)<br><strong>2.</strong> 装完配置一定要<strong>保存</strong>！！！</p><blockquote><p><strong>问题</strong>：万一debug了信息量很大的日志信息<br><strong>解决</strong>：如果是远程登陆，关掉远程登录再登录关掉即可，例：断开telnet，登上去之后<code>undo debugging tcp packet</code>(需要再次敲显示debug等命令)<br>如果是Console口下而且没有开telent，只能重启设备</p></blockquote><p>ICMP类型字段(Type)以及代码字段(Code)对应表：</p><table><thead><tr><th align="center">Type</th><th align="center">Code</th><th>说明</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td>Echo Reply——回显应答（Ping应答）</td></tr><tr><td align="center">8</td><td align="center">0</td><td>Echo request——回显请求（Ping请求）</td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> ICT战队数据通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HCIA </tag>
            
            <tag> 华为eNSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICT战队-第1次笔记</title>
      <link href="/2022/06/29/ict-zhan-dui-di-1-ci-bi-ji/"/>
      <url>/2022/06/29/ict-zhan-dui-di-1-ci-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="ICT战队-第1次笔记"><a href="#ICT战队-第1次笔记" class="headerlink" title="ICT战队-第1次笔记"></a>ICT战队-第1次笔记</h1><p>[toc]</p><h2 id="IP通信基础"><a href="#IP通信基础" class="headerlink" title="IP通信基础"></a>IP通信基础</h2><p>数据流方向：单工、半双工、全双工</p><p><font color="#999AAA">总线型网络带宽共享</font></p><p>网络拓扑图：路由器、PC端、(忽略这个)网络<br>网络拓扑图画图要求：标上设备端口、广域网线路和局域网线路之间要有线缆颜色区分</p><img src="/2022/06/29/ict-zhan-dui-di-1-ci-bi-ji/01 常见网络拓扑架构.png"><p><font color="#999AAA">无线路由器的加密方式：<br>aes(advanced encryption standard高级加密标准)<br>tkip(temporal key integrity protocol暂时密钥集成协议)<br>(现普遍采用目前最安全的加密方式WPA2进行加密)</font></p><img src="/2022/06/29/ict-zhan-dui-di-1-ci-bi-ji/01 局域网特点和常用设备.png"><p><font color="#999AAA">防火墙：端口与端口之间通信的安全策略</font></p><img src="/2022/06/29/ict-zhan-dui-di-1-ci-bi-ji/01 IP网络典型结构.png"><p>三层架构：核心层、汇聚层、接入层</p><p><code>GE 0/0/0</code></p><p><code>GE</code>当前端口的带宽</p><p><code>et 0/0/0</code>十兆带宽<br><code>fa 0/0/0</code>百兆带宽<br><code>Ge 0/0/0</code>千兆带宽<br><code>xg 0/0/0</code>万兆带宽</p><p><font color="#999AAA">查看端口带宽指令<code>display</code>、<code>show</code></font></p><p><code>0/0/0</code>设备堆叠编号/模块号/</p><h2 id="TCP-x2F-IP基础"><a href="#TCP-x2F-IP基础" class="headerlink" title="TCP/IP基础"></a>TCP/IP基础</h2><h3 id="TCP-x2F-IP协议栈"><a href="#TCP-x2F-IP协议栈" class="headerlink" title="TCP/IP协议栈"></a>TCP/IP协议栈</h3><img src="/2022/06/29/ict-zhan-dui-di-1-ci-bi-ji/01 OSI七层功能.png"><ul><li><p><strong>问题</strong>：路由器连着一台电脑，网络正常，中间加个交换机，网络不同了，原因？</p></li><li><p><strong>答</strong>：vlan划分有问题，端口隔离有问题，MAC地址表······</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 电脑基础配置</span>IP地址：192.168.1.66子网掩码：255.255.255.0网关：192.168.1.1<span class="token comment"># 路由器</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>sysEnter system view, <span class="token builtin class-name">return</span> user view with Ctrl+Z.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>inter g0/0/0<span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span>ip <span class="token function">add</span> <span class="token number">192.168</span>.1.1 <span class="token number">24</span><span class="token punctuation">[</span>Huawei-GigabitEthernet0/0/0<span class="token punctuation">]</span><span class="token comment"># 电脑</span>PC<span class="token operator">&gt;</span>ping <span class="token number">192.168</span>.1.1Ping <span class="token number">192.168</span>.1.1: <span class="token number">32</span> data bytes, Press Ctrl_C to <span class="token builtin class-name">break</span>From <span class="token number">192.168</span>.1.1: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">32</span> <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">255</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">157</span> msFrom <span class="token number">192.168</span>.1.1: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">32</span> <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">255</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">46</span> msFrom <span class="token number">192.168</span>.1.1: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">32</span> <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">255</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">32</span> msFrom <span class="token number">192.168</span>.1.1: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">32</span> <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">255</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">16</span> msFrom <span class="token number">192.168</span>.1.1: <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">32</span> <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">5</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">255</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">46</span> ms--- <span class="token number">192.168</span>.1.1 <span class="token function">ping</span> statistics ---  <span class="token number">5</span> packet<span class="token punctuation">(</span>s<span class="token punctuation">)</span> transmitted  <span class="token number">5</span> packet<span class="token punctuation">(</span>s<span class="token punctuation">)</span> received  <span class="token number">0.00</span>% packet loss  round-trip min/avg/max <span class="token operator">=</span> <span class="token number">16</span>/59/157 msPC<span class="token operator">&gt;</span><span class="token comment"># 交换机</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>display mac-addressMAC address table of slot <span class="token number">0</span>:-------------------------------------------------------------------------------MAC Address    VLAN/       PEVLAN CEVLAN Port            Type      LSP/LSR-ID                 VSI/SI                                              MAC-Tunnel  -------------------------------------------------------------------------------00e0-fca4-15de <span class="token number">1</span>           -      -      GE0/0/1         dynamic   <span class="token number">0</span>/-         <span class="token number">5489</span>-9889-0ff0 <span class="token number">1</span>           -      -      GE0/0/2         dynamic   <span class="token number">0</span>/-         -------------------------------------------------------------------------------Total matching items on slot <span class="token number">0</span> displayed <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span></code></pre><p>交换机收到数据帧后，不管有没有MAC地址，记录数据帧的MAC地址，如果MAC地址表有这个MAC地址，则覆盖</p><blockquote><p><strong>干坏事</strong>：如何获取同一个局域网内其他主机的上网信息<br>可以用macof直接把交换机MAC地址打满，这样就可以把交换机变成集线器(用垃圾MAC信息把交换表打满，这样交换机就无法学习正常交换帧的地址，所以此后遇到正常的单播帧就全部封站)<br><strong>安全防护</strong>：MACFlour，设置特定的MAC地址的学习记录，只要发送超过这个设置的阈值，就不接受MAC地址</p></blockquote><p>不同服务对应的端口：</p><table><thead><tr><th align="center">协议</th><th align="center">端口</th></tr></thead><tbody><tr><td align="center">FTP</td><td align="center">21</td></tr><tr><td align="center">Ssh</td><td align="center">22</td></tr><tr><td align="center">Telnet</td><td align="center">23</td></tr><tr><td align="center">FTP</td><td align="center">20、21</td></tr><tr><td align="center">SMTP</td><td align="center">25</td></tr><tr><td align="center">TFTP</td><td align="center">69</td></tr><tr><td align="center">HTTP</td><td align="center">80</td></tr><tr><td align="center">HTTPS</td><td align="center">443</td></tr></tbody></table><p><font color="#999AAA">20：进行数据传输、21：传输控制</font></p><table><thead><tr><th align="center">层</th><th>PDU</th></tr></thead><tbody><tr><td align="center">物理层</td><td>位</td></tr><tr><td align="center">数据链路层</td><td>帧</td></tr><tr><td align="center">网络层</td><td>包</td></tr><tr><td align="center">传输层</td><td>段</td></tr><tr><td align="center">应用层</td><td>数据</td></tr></tbody></table><p>发数据包 -&gt; 封装<br>收数据包 -&gt; 解封</p><p>IP数据包：<br>ID：数据片在传输过程中的位置<br>MTU：数据包最大限制，默认1500Byte<br>Flags：强制不分片用来检测MTU<br>Fragement Offset：<br>TTL(Time ti Live)：<code>trancrt</code>指令用来查询路由器节点<br>Protocol：(防火墙设置，限制某个协议)</p><h3 id="TCP-x2F-IP协议栈报文封装"><a href="#TCP-x2F-IP协议栈报文封装" class="headerlink" title="TCP/IP协议栈报文封装"></a>TCP/IP协议栈报文封装</h3><img src="/2022/06/29/ict-zhan-dui-di-1-ci-bi-ji/01 TCP首部格式.png"><img src="/2022/06/29/ict-zhan-dui-di-1-ci-bi-ji/01 IP数据报.png"><p>帧头特点：<br>IP报头：源地址在前，目标地址在后<br>数据帧：目标地址在前，源地址在后</p><blockquote><p><strong>干坏事</strong>：ARP中间人攻击(ARP欺骗)，在局域网中截获别人数据包。(断别人的网)</p></blockquote><p>ARP协议：<br>首先查表有无对应的目的MAC地址，有直接封装数据帧并发送给交换机，无则使用ARP协议查询MAC地址。<br>广播(发送ARP请求，询问对方MAC地址)-&gt;单播(返回MAC地址)</p><p>二层广播地址是全F，ARP不封装IP地址</p><blockquote><p><strong>干坏事</strong>：获取局域网内其他主机权限，首先对目标主机做中间人欺骗，然后做DNS欺骗，目标主机打开任何网站均解析到我们搭建的一个网站上面，然后让对方点击网站内容然后运行。<br><strong>安全防护</strong>：找到vlan网关的物理MAC地址和IP地址，再做静态IP绑定，就可以绕过ARP中间人攻击</p></blockquote><h2 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h2><p><font color="#999AAA">TCP半连接攻击：<br>流量清洗：</font></p><ul><li>TCP可靠性：<ul><li>面向连接的传输</li><li>最大报文段长度</li><li>传输确认机制</li><li>首部和数据的检验和</li><li>流量控制</li></ul></li></ul><table><thead><tr><th align="center">0-65535端口号</th><th>说明</th></tr></thead><tbody><tr><td align="center">0-1023</td><td>熟知端口号</td></tr><tr><td align="center">1024-49151</td><td>登记端口号</td></tr><tr><td align="center">49152—65536</td><td>短暂端口号</td></tr></tbody></table><p>TCP连接建立：TCP三次握手</p><img src="/2022/06/29/ict-zhan-dui-di-1-ci-bi-ji/01 TCP连接的建立.png"><p>TCP连接释放：TCP四次握手</p><img src="/2022/06/29/ict-zhan-dui-di-1-ci-bi-ji/01 TCP连接的终止.png"><p>Acknowledgment Number：确认帧(下次希望收到的序列号)<br>Syn：建立连接<br>Fin：断开连接</p><p>TCP确认机制：显示确认<br>OSPF确认机制：隐式确认</p><blockquote><p><strong>搞事情</strong>：web渗透，开代理，通过**拦截数据包，修改数据包的参数</p></blockquote><p><strong>私有地址</strong>：<br>10.0.0.0 ~ 10.255.255.255<br>172.16.0.0 ~ 172.31.255.255<br>192.168.0.0 ~ 192.168.255.255(尽量别用)</p><table><thead><tr><th align="center">二进制</th><th align="center">十进制</th></tr></thead><tbody><tr><td align="center">10000000</td><td align="center">128</td></tr><tr><td align="center">11000000</td><td align="center">192</td></tr><tr><td align="center">11100000</td><td align="center">224</td></tr><tr><td align="center">11110000</td><td align="center">240</td></tr><tr><td align="center">11111000</td><td align="center">248</td></tr><tr><td align="center">11111100</td><td align="center">252</td></tr></tbody></table><p>公式：$2^n-2 &gt; w$</p><p>50：192.168.2.0/26<br>29：192.168.2.64/27<br>2：192.168.2.96/30</p><p><font color="#999AAA">实际中一般使用24个24个地用</font></p><h2 id="VRP基础及操作"><a href="#VRP基础及操作" class="headerlink" title="VRP基础及操作"></a>VRP基础及操作</h2><ul><li>要求：<ul><li>了解VRP体系结构</li><li>掌握VRP配置基础</li><li>掌握升级路由器软件和备份配置文件的方法</li></ul></li></ul><h3 id="1-VRP概述"><a href="#1-VRP概述" class="headerlink" title="1. VRP概述"></a>1. VRP概述</h3><p>通用路由平台VRP(Versatile Routing Platform)是华为数据通信产品地通用操作系统平台，它以IP业务为核心，采用组件化地体系结构，在实现丰富功能特性地同时，提供基于应用的可裁剪和可拓展的功能。</p><h3 id="2-配置环境的搭建"><a href="#2-配置环境的搭建" class="headerlink" title="2. 配置环境的搭建"></a>2. 配置环境的搭建</h3><ul><li><ol><li>通过Console口配置</li></ol></li></ul><p>Console口(光电复用：只能用其中一个口，光口/电口)</p><p><font color="#999AAA">使用SecureCRT，设备开机先做硬件质检</font></p><p><font color="#999AAA">建议：先写好脚本，再复制过去</font></p><ul><li><ol start="2"><li>通过Telnet方式配置</li></ol></li></ul><p><font coor="#AAA">思科ISO平台，华为VRP平台，华三comeware平台</font></p><h3 id="3-eNSP使用"><a href="#3-eNSP使用" class="headerlink" title="3. eNSP使用"></a>3. eNSP使用</h3><table><thead><tr><th>试图</th><th>说明</th></tr></thead><tbody><tr><td>用户视图<code>&lt;Huawei&gt;</code></td><td>设备启动后缺省视图，可查看启动后基本运行状态和统计信息</td></tr><tr><td>系统视图<code>[Huawei]</code></td><td>配登系统全局通用参数的视图</td></tr><tr><td>路由协议视图<code>[Huawei-ospf-1]</code></td><td>配登路由协议参数的视图</td></tr><tr><td>接口视图<code>[Huawei-GigabitEthernet0/0/0]</code></td><td>配笪接口参数的视图</td></tr><tr><td>用户界面视图<code>[Huawei-ui-console0]</code></td><td>配登登录设备的各个用户属性的视图</td></tr></tbody></table><p>修改路由器名字：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 修改路由器名字</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>sysEnter system view, <span class="token builtin class-name">return</span> user view with Ctrl+Z.<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>sysname hw<span class="token punctuation">[</span>hw<span class="token punctuation">]</span></code></pre><p>用户视图到系统视图：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 1.用户视图到系统视图</span><span class="token operator">&lt;</span>Huawei<span class="token operator">&gt;</span>system-view<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>quit  <span class="token comment"># 退出使用quit</span></code></pre><p>系统模式到其他模式：</p><ul><li>接口类型：<ul><li>通信接口，进通信接口：interface</li><li>管理接口，进管理接口：user-interface console 0</li></ul></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 2.系统模式到其他模式</span><span class="token punctuation">[</span>swith<span class="token punctuation">]</span>interface Ethernet <span class="token number">1</span>/0/24  <span class="token comment"># 由系统模式到接口模式</span><span class="token punctuation">[</span>swith<span class="token punctuation">]</span>user-interface vty <span class="token number">0</span> <span class="token number">4</span>  <span class="token comment"># 由系统模式进去用户界面视图</span><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>user-interface aux <span class="token number">0</span>  <span class="token comment"># 由系统视图模式到AUX口</span><span class="token punctuation">[</span>Huawei-ui-aux0<span class="token punctuation">]</span>speed <span class="token number">115200</span>  <span class="token comment"># 修改AUX口速率</span><span class="token punctuation">[</span>Huawei-Ethernet1/0/2Jreturn  <span class="token comment"># 直接退到用户视图模式</span><span class="token punctuation">[</span>R2<span class="token punctuation">]</span>ospf<span class="token punctuation">[</span>R2-ospf-1<span class="token punctuation">]</span>  <span class="token comment"># 系统视图进入路由协议视图</span><span class="token punctuation">[</span>swith<span class="token punctuation">]</span>vlan <span class="token number">1</span><span class="token punctuation">[</span>swith-vlan1<span class="token punctuation">]</span></code></pre><p>Huawei安全配置登录(使用线路下密码认证)：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 3.Huawei安全配登(使用线路下密码认证)</span><span class="token punctuation">[</span>Huaweiluser-interface console <span class="token number">0</span>  <span class="token comment"># 为console口设置密码</span><span class="token punctuation">[</span>Huawei-ui-console0<span class="token punctuation">]</span>authentication-mode aaa  <span class="token comment"># 设登认证模式为本地账户</span><span class="token punctuation">[</span>Huawei-ui-console0<span class="token punctuation">]</span>authentication- mode password  <span class="token comment"># 设翌认证模式为用户视图下密码 </span><span class="token punctuation">[</span>Huawei-ui-console0<span class="token punctuation">]</span>set authentication password cipher huawei  <span class="token comment"># 设登用户视图下密码以秘文方式</span></code></pre><p>使用本地用户及密码认证：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 使用本地用户及密码认证</span><span class="token punctuation">[</span>DS-1<span class="token punctuation">]</span>user-interface aux <span class="token number">0</span>  <span class="token comment"># 为aux口设登密码</span><span class="token punctuation">[</span>Huawei-ui-console0<span class="token punctuation">]</span>authentication-mode aaa  <span class="token comment"># 设登认证模式为本地账户</span><span class="token punctuation">[</span>Huawei-ui-console0<span class="token punctuation">]</span>quit<span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>aaa  <span class="token comment"># 进入aaa模式</span><span class="token punctuation">[</span>Huareiaaallocal-user admin password cipher huawei  <span class="token comment"># 创建用户admin并设登密码</span><span class="token punctuation">[</span>Huawei-aaa<span class="token punctuation">]</span>local-user admin service-type terminal  <span class="token comment"># 允许验证终端登录服务</span></code></pre><ul><li><strong>注</strong>：<ul><li>拿到真实华为设备第一件事：创建/修改用户名和密码(一般有默认用户名密码)，不改默认密码<strong>风险很大</strong>！！！</li><li>设置密码不要写空格！！！</li><li>创建用户名、密码，然后给<strong>权限</strong>！！！至少给terminal权限</li><li>配置写在内存里面，所以需要再保存</li></ul></li></ul><p><font color="#999AAA">其他工具的使用：Wireshark、SecureCRT、FOFA、</font></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> ICT战队数据通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HCIA </tag>
            
            <tag> 华为eNSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo框架搭建个人静态博客</title>
      <link href="/2022/06/28/shi-yong-hexo-kuang-jia-da-jian-ge-ren-bo-ke/"/>
      <url>/2022/06/28/shi-yong-hexo-kuang-jia-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Hexo框架搭建个人静态博客"><a href="#使用Hexo框架搭建个人静态博客" class="headerlink" title="使用Hexo框架搭建个人静态博客"></a>使用Hexo框架搭建个人静态博客</h1><p>[toc]</p><p>本文使用 Hexo + Github 搭建个人静态博客网站，优点：免费、简单（相较于其他搭建个人博客网站方法），缺点：配置有点繁琐、国内访问速度不快。</p><p><strong>系统</strong>：Windows10（如无特别说明，本文均在命令行，即 cmd 或者 powershell 下运行命令）</p><p><strong>其他说明</strong>：</p><ol><li>由于 Windows 每个人的用户名不同，这里使用 Linux 中当前用户目录 <code>~</code> 表示 Windows 的当前用户目录。</li><li>本文主要侧重于记录增加功能部分的实现，所以安装部分和一些基础内容不会赘述。</li><li>在本文 <a href="#%E4%BA%8C%E3%80%81%E9%85%8D%E7%BD%AE">二、配置</a> 部分，有两个目录 (<code>blog</code> 和 <code>blog/themes/matery</code>) 有 <code>_config.yml</code> 文件，注意看清楚是那个目录，不要搞错了！</li></ol><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>安装视频教程可以参考：<a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.337&amp;vd_source=e0a4abf3a261891c5444e0f0044a7cf3">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a></p><h3 id="1-1-搭建环境"><a href="#1-1-搭建环境" class="headerlink" title="1.1 搭建环境"></a>1.1 搭建环境</h3><p>搭建环境：需要安装 <code>node.js</code> 和 <code>npm</code> (一般 <code>npm</code> 下载较慢，所以可以下载 <code>cnpm</code>)</p><ul><li>step1 下载 <code>node.js</code></li></ul><p>直接去 <code>node.js</code> 官网下载、安装即可，建议使用 <code>node.js 12.0</code>及以上版本</p><p><code>node.js</code> 官网下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>安装完成后，<code>node.js</code> 自带 <code>npm</code>，使用以下命令查看 <code>node.js</code> 和 <code>npm</code> 的信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> -v  <span class="token comment"># 查看 node 版本</span><span class="token function">npm</span> -v  <span class="token comment"># 查看 npm 版本</span><span class="token comment"># 其他命令</span><span class="token function">npm</span> config <span class="token function">ls</span> -l  <span class="token comment"># 查看 npm 配置</span><span class="token function">npm</span> info xxxx  <span class="token comment"># 查看 npm 下载的 xxxx 库的信息，比如：npm info underscore</span></code></pre><ul><li>step2 下载 <code>cnpm</code> (可选)</li></ul><p>(建议不选：因为使用 <code>cnpm</code> 安装可能会有各种很奇怪的bug，虽然 <code>npm</code> 下载慢，但是可以通过设置国内镜像的方式解决)</p><p>使用 <code>npm</code> 下载 <code>cnpm</code> 并查看 <code>cnpm</code> 信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org  <span class="token comment"># 指定淘宝镜像安装 cnpm</span>cnpm -v  <span class="token comment"># 查看 cnpm 版本</span></code></pre><ul><li>step3 解决下载慢的问题(可选，如果能忍受下载慢可以不选<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方法一：npm 临时设置镜像</span><span class="token function">npm</span> --registry <span class="token function">install</span> xxxx https://registry.npm.taobao.org  <span class="token comment"># 其中 xxxx 是需要下载的东西</span><span class="token comment"># 方法二：npm 永久设置镜像</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org  <span class="token comment"># 建议不要再使用这个镜像，原因后说</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com  <span class="token comment"># 建议使用这个镜像，原因后说</span><span class="token function">npm</span> config get registry  <span class="token comment"># 验证设置是否成功</span><span class="token function">npm</span> <span class="token function">install</span> xxxx  <span class="token comment"># 其中 xxxx 是需要下载的东西</span><span class="token comment"># 方法三：使用 cnpm (可选)</span>cnpm <span class="token function">install</span> xxxx  <span class="token comment"># 其中 xxxx 是需要下载的东西</span></code></pre><p>镜像网站：<a href="https://npmmirror.com/">npmmirror 中国镜像站</a></p><blockquote><p>建议不再使用 <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> 的原因：原淘宝 <code>npm</code>，即 <code>cnpm</code> 域名已经停止解析</p><p><a href="https://link.zhihu.com/?target=http://npm.taobao.org">http://npm.taobao.org</a> 和 <a href="https://link.zhihu.com/?target=http://registry.npm.taobao.org">http://registry.npm.taobao.org</a> 已经在 2022.06.30 号正式下线和停止 DNS 解析，域名切换规则如下：</p><ul><li><a href="https://link.zhihu.com/?target=http://npm.taobao.org">http://npm.taobao.org</a> $\Rightarrow$ <a href="https://link.zhihu.com/?target=http://npmmirror.com">http://npmmirror.com</a></li><li><a href="https://link.zhihu.com/?target=http://registry.npm.taobao.org">http://registry.npm.taobao.org</a> $\Rightarrow$ <a href="https://link.zhihu.com/?target=http://registry.npmmirror.com">http://registry.npmmirror.com</a></li></ul></blockquote><ul><li>step4 安装 <code>hexo</code></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli  <span class="token comment"># 下载 hexo</span>hexo -v  <span class="token comment"># 查看 hexo 版本</span></code></pre><p>到此，必要的环境已经搭建完成，关于 <code>node.js</code> 和 <code>npm</code> 等的其他内容可自行展开查看。</p><details><summary>其他内容：展开说说</summary><ul><li>关于 <code>node.js</code></li></ul><p><code>node.js</code> 是一个基于 <code>Chrome V8</code> 引擎的 <code>JavaScript</code> 运行环境。</p><ul><li>关于 <code>npm</code></li></ul><p><code>npm</code> 是随同 <code>node.js</code> 一起安装的包管理工具。</p><p><code>npm</code> 的包分为全局安装(<code>global</code>)与本地安装 (<code>local</code>)，命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> express     <span class="token comment"># 本地安装</span><span class="token function">npm</span> <span class="token function">install</span> express -g  <span class="token comment"># 全局安装</span><span class="token comment"># 如果出现错误：npm err! Error: connect ECONNREFUSED 127.0.0.1:8087 </span><span class="token comment"># 使用以下命令即可：</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> proxy null</code></pre><ul><li>关于 <code>cnpm</code></li></ul><p><code>cnpm</code> 是一个完整 <code>npmjs.org</code> 镜像，你可以用此代替官方版本(只读)，同步频率目前为 <strong>10分钟</strong> 一次以保证尽量与官方服务同步。简单来说，<code>cnpm</code> 就是是淘宝 <code>npm</code>。</p><p><code>cnpm</code> bug 之一：命令没反应<br>解决方法：卸载重装</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载：</span><span class="token function">npm</span> uninstall -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment"># 注册：</span><span class="token function">npm</span> <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span class="token comment"># 解析：</span><span class="token function">npm</span> <span class="token builtin class-name">set</span> disturl https://npm.taobao.org/dist<span class="token comment"># 安装：</span><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre><ul><li>关于 <code>underscore</code></li></ul><p><code>Underscore</code> (安装：<code>npm install underscore</code>)是目前为止 <code>npm</code> 上最流行的 <code>JavaScript</code> 库，是有最大数量 dependent 的库。</p><ul><li>关于 <code>hexo</code></li></ul><p><code>hexo</code> 是一个快速、简洁且高效的博客框架。</p><p><code>hexo</code> 常用命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令全称</span>hexo new page <span class="token string">"名称"</span>  <span class="token comment"># 新建分页</span>hexo new <span class="token string">"名称"</span><span class="token comment"># 新建文章</span>hexo new draft <span class="token string">"名称"</span><span class="token comment"># 新建草稿</span>hexo publish <span class="token string">"名称"</span><span class="token comment"># 草稿生成文章</span>hexo publish page <span class="token string">"名称"</span>  <span class="token comment"># 草稿生成分页</span>hexo clean  <span class="token comment"># 清除已生成文件</span>hexo generate<span class="token comment"># 生成静态文件</span>hexo server<span class="token comment"># 运行本地服务器（预览）</span>hexo server --drafts<span class="token comment"># 运行本地服务器（预览草稿）</span>hexo deploy<span class="token comment"># 部署到服务器</span><span class="token comment"># 命令缩写</span>hexo n page <span class="token string">"名称"</span>  <span class="token comment"># 新建分页</span>hexo n <span class="token string">"名称"</span><span class="token comment"># 新建文章</span>hexo n draft <span class="token string">"名称"</span><span class="token comment"># 新建草稿</span>hexo p <span class="token string">"名称"</span><span class="token comment"># 草稿生成文章</span>hexo p page <span class="token string">"名称"</span>  <span class="token comment"># 草稿生成分页</span>hexo clean   <span class="token comment"># 清除已生成文件</span>hexo g <span class="token comment"># 生成静态文件</span>hexo s <span class="token comment"># 运行本地服务器（预览）</span>hexo s --drafts <span class="token comment"># 运行本地服务器（预览草稿）</span>hexo d <span class="token comment"># 部署到服务器</span><span class="token comment"># 快速本地发布命令</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s</code></pre></details><h3 id="1-2-本地发布"><a href="#1-2-本地发布" class="headerlink" title="1.2 本地发布"></a>1.2 本地发布</h3><p>本地发布的网站只能在本地访问。</p><ul><li>step1 初始化</li></ul><p>在本地任意目录(建议在用户目录，即 <code>~​</code>)创建一个名为 <code>blog</code> 的文件夹，进入 <code>blog</code> 文件夹，然后在<strong>该目录</strong> <code>~/blog</code> 下打开命令行，输入以下命令进行初始化：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo init</code></pre><blockquote><p>注：<code>hexo</code> 的所有命令均在 <code>~/blog</code> 目录下输入并运行！</p></blockquote><ul><li>step2 启动博客网站</li></ul><p>此时，本地博客网站就已经创建好了，输入以下命令启动网站：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo s</code></pre><p>然后在浏览器地址栏输入 <code>localhost:4000</code> 访问本地发布的博客网站。如果页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p><p><img src="/2022/06/28/shi-yong-hexo-kuang-jia-da-jian-ge-ren-bo-ke/hello.png" alt="hello"></p><ul><li>step3 写一篇文章</li></ul><p>先新建一篇文章：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo n <span class="token string">"myfirstblog"</span>  <span class="token comment"># 新建文章</span></code></pre><p>然后到 <code>blog/source/_posts</code> 目录下就可以看到一个 <code>myfirstblog.md</code> 文件，编辑该文件，文件里面的内容就会显示在博客网站里面。</p><p>使用任意编辑器(推荐 typora)编辑该文件，以下面内容为例：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml">title: myfirstblogdate: 2022-02-2 22:22:22tags:</span><span class="token punctuation">---</span></span><span class="token title important"><span class="token punctuation">#</span> myfirstblog</span><span class="token title important"><span class="token punctuation">##</span> 第一章</span><span class="token title important"><span class="token punctuation">###</span> 第一节</span>​```c++<span class="token title important"><span class="token punctuation">#</span>include &lt;iostream&gt;</span>using namespace std;int main(){    cout &lt;&lt; "Hello, world!" &lt;&lt; endl;    return 0;}​```<span class="token title important"><span class="token punctuation">###</span> 第二节</span>${\large e^{i \pi} + 1 = 0}$<span class="token title important"><span class="token punctuation">###</span> 第三节</span><span class="token list punctuation">-</span> First item<span class="token list punctuation">-</span> Second item<span class="token list punctuation">-</span> Third item</code></pre><p>编辑完成、保存。</p><ul><li>step3 查看刚才写的文章</li></ul><p>输入以下命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo s</code></pre><p>在浏览器地址栏输入 <code>localhost:4000</code> 访问本地发布的博客网站，然后就可以看到刚刚写的文章。</p><p><img src="/2022/06/28/shi-yong-hexo-kuang-jia-da-jian-ge-ren-bo-ke/myfirstblog.png" alt="myfirstblog"></p><p>到此，本地发布的必要流程已经完成，更多其他内容可自行展开查看。</p><details><summary>其他内容：展开说说</summary><ul><li>关于 <code>~/blog</code> 目录</li></ul><p>博客的所有东西全部都在 <code>blog</code> 里面生成。如果出了什么错，直接删除 <code>blog</code> 文件夹就行了。<strong>但是</strong>！千万不能只删除 <code>blog</code> 文件夹里面的内容，而不删除 <code>blog</code> 文件夹，否则会出现其他问题。</p><ul><li>关于新建文章内容</li></ul><p>新建文章是使用 <code>markdown</code> 进行编辑的，<code>markdown</code> 语法不赘述，这里说说 <code>hexo</code> 新建的 <code>.md</code> 文件的文档头：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: myfirstblogdate: 2022-02-2 22:22:22<span class="token title important">tags:<span class="token punctuation">---</span></span></code></pre><p>首先，这个文档头的模板是可以修改的，具体修改方法自行百度或者见本文的<strong>二、增加功能</strong>部分</p><p>其次，这个文档头的的配置、说明可以自行百度或者见本文的<strong>二、增加功能</strong>部分</p><ul><li>关于 hexo 博客主要目录结构</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span>├── public  <span class="token comment"># 网站文件夹</span>├── scaffolds  <span class="token comment"># 模板文件夹</span>├── <span class="token builtin class-name">source</span>  <span class="token comment"># 用户资源文件夹 (markdown 文档)</span><span class="token operator">|</span>   ├── _draft    <span class="token comment"># 草稿文件夹</span><span class="token operator">|</span>   └── _posts    <span class="token comment"># 文章文件夹</span>├── themes  <span class="token comment"># 主题文件夹</span>├── _config.yml  <span class="token comment"># 网站配置信息</span>└── package.json  <span class="token comment"># 应用程序信息</span></code></pre></details><h3 id="1-3-远端发布"><a href="#1-3-远端发布" class="headerlink" title="1.3 远端发布"></a>1.3 远端发布</h3><p>远端发布就是把本地发布的网站放到互联网上，让所有人都可以访问。</p><ul><li>step1 GitHub相关内容</li></ul><p>这个可以自行百度或者B站，本文这部分内容日后将会完善。</p><p>不要忘了在 <code>git</code> 下面敲以下命令：（设置 <code>git</code> 的用户名和邮件，就是让 <code>git</code> 找到你的 GitHub 账户）</p><pre class="language-text" data-language="text"><code class="language-text">git config --global user.name "GitHub 用户名"git config --global user.email "GitHub 邮箱"</code></pre><ul><li>step2 下载 <code>git</code></li></ul><p>自行百度下载安装即可，本文这部分内容日后将会完善。</p><ul><li>step3 <strong>下载 <code>git</code> 用于上传、部署的插件，并配置相关内容</strong></li></ul><p>下载：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-deployer-git</code></pre><p>打开 <code>~/blog</code> 目录下的 <code>_config.yml</code> 文件，拉到最下面，找到以下相关内容：</p><pre class="language-text" data-language="text"><code class="language-text">deploy:  type: git  repository: https://github.com/xxxx/xxxx.github.io.git  branch: master</code></pre><p>其中 <code>xxxx</code> 是你的 GitHub 用户名。保存。</p><ul><li>step4 将静态个人博客发布到远端 GitHub</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d</code></pre><ul><li>step5 查看 GitHub 仓库，访问博客网页</li></ul><p>进入个人 GitHub 仓库即可看到新增了很多文件。在浏览器地址栏输入 <code>http://xxxx.github.io/</code> 访问远端发布的博客网站。</p><p>至此，远端发布的必要流程已经完成，更多其他内容可自行展开查看。</p><details><summary>其他内容：展开说说</summary><ul><li>关于 <strong>GitHub Pages</strong></li></ul><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。我们搭建的个人博客就是使用了 GitHub Pages。如果是 Gitee，需要手动开启 Pages，GitHub 则默认自动开启。</p><ul><li>使用自己的域名搭建博客</li></ul><p>略，日后完善。</p></details><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p><font color="orangered">配置部分强烈建议参考官方文章：</font><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍</a></p><h3 id="2-1-修改主题"><a href="#2-1-修改主题" class="headerlink" title="2.1 修改主题"></a>2.1 修改主题</h3><p><code>hexo</code> 主题：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>这里以 matery 主题为例：</p><ul><li>step1 下载</li></ul><p>在 hexo 主题目录 <code>~/blog/themes</code> 下使用 <code>git</code> 克隆 matery 主题：（或者去 GitHub 下载安装包并解压到 <code>~/blog/themes</code> 也行）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><ul><li>step2 更换主题</li></ul><p>修改 hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：（如果主题文件夹名称是 <code>hexo-theme-matery</code> 主题值就是 <code>hexo-theme-matery</code>，如果是 <code>matery</code> 主题值就是 <code>matery</code>）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># theme: landscape  # _config.yml 原始主题</span>theme: hexo-theme-matery  <span class="token comment"># matery 主题</span></code></pre><ul><li>step3 <code>_config.yml</code> 文件</li></ul><p><code>_config.yml</code> 文件的其他修改配置见 [2.3 <code>_config.yml</code> 文件配置](#2.3 456)</p><h3 id="2-2-新建博客网页内容"><a href="#2-2-新建博客网页内容" class="headerlink" title="2.2 新建博客网页内容"></a>2.2 新建博客网页内容</h3><p>需要新建的博客网页有：分类页、标签页、关于页、友链页 (可选)、归档页 (可选)。</p><table><thead><tr><th align="center">网页</th><th align="center">英文</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">分类页</td><td align="center">categories</td><td align="center">用来展示所有分类的页面</td></tr><tr><td align="center">标签页</td><td align="center">tags</td><td align="center">用来展示所有标签的页面</td></tr><tr><td align="center">关于页</td><td align="center">about</td><td align="center">用来展示<strong>关于我和我的博客</strong>信息的页面</td></tr><tr><td align="center">友链页</td><td align="center">friends</td><td align="center">用来展示<strong>友情连接</strong>信息的页面</td></tr><tr><td align="center">归档页</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>以分类 categories 页为例：</p><p>如果在 <code>blog/source</code> 目录下没有 <code>blog/source/categories/index.md</code> 文件，则新建一个：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>然后，编辑新建的页面文件<code>blog/source/categories/index.md</code>，至少需要以下内容：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="2-3-文档头-Front-matter-选项"><a href="#2-3-文档头-Front-matter-选项" class="headerlink" title="2.3 文档头 Front-matter 选项"></a>2.3 文档头 Front-matter 选项</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的，但是建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><p>个人建议：为了方便阅读，<code>toc</code> 和 <code>summary</code> 建议设置；为了分类管理方便，<code>categories</code> 和 <code>tags</code> 建议设置；对于 <code>latex</code> 重度使用患者，<code>mathjax</code> 也建议设置。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left"><strong>toc</strong></td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left"><strong>mathjax</strong></td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left"><strong>summary</strong></td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left"><strong>categories</strong></td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left"><strong>tags</strong></td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><ul><li><code>Front-matter</code> 简单示例</li></ul><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><ul><li><code>Front-matter</code> 最全示例</li></ul><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h3 id="2-3-文档头-Front-matter-模板"><a href="#2-3-文档头-Front-matter-模板" class="headerlink" title="2.3 文档头 Front-matter 模板"></a>2.3 文档头 Front-matter 模板</h3><p>每次新建文章都要输入配置选项 Front-matter，太麻烦，这时候可以通过修改默认文章模板，这样每次新建文章时就会自动写入默认模板，很方便。</p><p>打开 <code>~\blog\scaffolds</code> 目录，发现以下文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash">scaffolds├── draft.md  <span class="token comment"># 草稿模板</span>├── page.md   <span class="token comment"># 网页模板</span>└── post.md   <span class="token comment"># 文章模板</span></code></pre><p>对于文章，我们只需要修改 <code>post.md</code> 即可（草稿模板和网页模板同理），修改后的内容如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token key atrule">author</span><span class="token punctuation">:</span> hhhhmdzz<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>Hans<span class="token key atrule">timezone</span><span class="token punctuation">:</span> Asia/Shanghai<span class="token key atrule">img</span><span class="token punctuation">:</span> <span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">comments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token key atrule">keyworks</span><span class="token punctuation">:</span> <span class="token key atrule">categories</span><span class="token punctuation">:</span> to be categoried<span class="token key atrule">tags</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> to be tagged<span class="token punctuation">---</span></code></pre><h3 id="2-4-代码高亮、代码折叠"><a href="#2-4-代码高亮、代码折叠" class="headerlink" title="2.4 代码高亮、代码折叠"></a>2.4 代码高亮、代码折叠</h3><p>Hexo 自带的代码高亮主题显示不好看，原本的代码显示行号和内容分开了，不美观。</p><p>所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo <strong>根目录</strong>下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span><span class="token comment"># 代码块的设置</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 开启代码块高亮</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 如果未指定语言，则启用自动检测</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 显示行数</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token comment"># 用n个空格替换tabs；如果值为空，则不会替换tabs</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 关闭原有的代码高亮，使用自己的</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h3 id="2-5-搜索"><a href="#2-5-搜索" class="headerlink" title="2.5 搜索"></a>2.5 搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo <strong>根目录</strong>下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h3 id="2-6-中文链接转拼音（可选）"><a href="#2-6-中文链接转拼音（可选）" class="headerlink" title="2.6 中文链接转拼音（可选）"></a>2.6 中文链接转拼音（可选）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code> (Search Engine Optimization，搜索引擎优化)，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo <strong>根目录</strong>下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="2-7-文章字数、阅读时长统计插件（可选）"><a href="#2-7-文章字数、阅读时长统计插件（可选）" class="headerlink" title="2.7 文章字数、阅读时长统计插件（可选）"></a>2.7 文章字数、阅读时长统计插件（可选）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在<strong>本主题</strong>下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="2-8-添加-RSS-订阅支持（可选的）"><a href="#2-8-添加-RSS-订阅支持（可选的）" class="headerlink" title="2.8 添加 RSS 订阅支持（可选的）"></a>2.8 添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo <strong>根目录</strong>下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="2-9-配置音乐播放器（可选的）"><a href="#2-9-配置音乐播放器（可选的）" class="headerlink" title="2.9 配置音乐播放器（可选的）"></a>2.9 配置音乐播放器（可选的）</h3><h3 id="2-10-修改社交链接"><a href="#2-10-修改社交链接" class="headerlink" title="2.10 修改社交链接"></a>2.10 修改社交链接</h3><h3 id="2-11-修改页脚"><a href="#2-11-修改页脚" class="headerlink" title="2.11 修改页脚"></a>2.11 修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在<strong>主题文件</strong>的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="2-12-修改打赏的二维码图片"><a href="#2-12-修改打赏的二维码图片" class="headerlink" title="2.12 修改打赏的二维码图片"></a>2.12 修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="2-13-添加-emoji-表情支持"><a href="#2-13-添加-emoji-表情支持" class="headerlink" title="2.13 添加 emoji 表情支持"></a>2.13 添加 emoji 表情支持</h3><p>安装插件 <code>hexo-filter-github-emojis</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>在 Hexo <strong>根目录</strong>下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span></code></pre><h3 id="2-14-添加-mermaid-支持"><a href="#2-14-添加-mermaid-支持" class="headerlink" title="2.14 添加 mermaid 支持"></a>2.14 添加 mermaid 支持</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-tag-mermaid --save</code></pre><p>修改主题目录下的 <code>_config.yml</code> 文件：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mermaid</span><span class="token punctuation">:</span> <span class="token comment">## mermaid url https://github.com/knsv/mermaid</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># default false</span>  <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"latest"</span> <span class="token comment"># default v7.1.2</span>  <span class="token key atrule">options</span><span class="token punctuation">:</span>  <span class="token comment"># find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span>    <span class="token comment">#startOnload: true  // default true</span></code></pre><h3 id="2-15-添加导航页"><a href="#2-15-添加导航页" class="headerlink" title="2.15 添加导航页"></a>2.15 添加导航页</h3><p><a href="https://yafine-blog.cn/posts/e925.html">为你的 hexo 博客添加导航页</a></p><h3 id="2-16-动态网页标题"><a href="#2-16-动态网页标题" class="headerlink" title="2.16 动态网页标题"></a>2.16 动态网页标题</h3><h3 id="2-17-直达评论"><a href="#2-17-直达评论" class="headerlink" title="2.17 直达评论"></a>2.17 直达评论</h3><p><a href="https://blog.csdn.net/cungudafa/article/details/106278206">增加点击跳转评论按钮</a></p><h3 id="2-18-添加思维导图支持"><a href="#2-18-添加思维导图支持" class="headerlink" title="2.18 添加思维导图支持"></a>2.18 添加思维导图支持</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-simple-mindmap</code></pre><p>使用：（注意，这个不需要使用代码块，另外，typora不支持思维导图）</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">{% pullquote mindmap mindmap-md %}<span class="token list punctuation">-</span> <span class="token url">[<span class="token content">在 Hexo 中使用思维导图</span>](<span class="token url">https://hunterx.xyz/use-mindmap-in-hexo.html</span>)</span>  <span class="token list punctuation">-</span> 前言  <span class="token list punctuation">-</span> 操作指南    <span class="token list punctuation">-</span> 准备需要的文件    <span class="token list punctuation">-</span> 为主题添加 CSS/JS 文件  <span class="token list punctuation">-</span> 使用方法{% endpullquote %}</code></pre><h2 id="三、问题"><a href="#三、问题" class="headerlink" title="三、问题"></a>三、问题</h2><h3 id="Context-Dump-Ends"><a href="#Context-Dump-Ends" class="headerlink" title="=====             Context Dump Ends            ====="></a><code>=====             Context Dump Ends            =====</code></h3><p><img src="/2022/06/28/shi-yong-hexo-kuang-jia-da-jian-ge-ren-bo-ke/hexo-error-context_dump_ends.png" alt="hexo-error-context_dump_ends"></p><p>原因：文章中出现连续的花括号，如：<code>{{}}</code></p><p>具体原因：hexo 的文章使用 <code>Nunjucks</code> 渲染，<code>Nunjucks</code> 的花括号 <code>{}</code> 有不同的语法，但是如果使用了 <code>mathjax</code> 渲染的 latex 公式，容易出现花括号重叠 <code>{{}}</code>，这样二者就冲突了。</p><p>解决办法：以 $e^{x^{2}}$ 即 <code>$e^{x^{2}}$</code> 为例</p><ol><li>使用空格隔开花括号：<code>$e^{x^{2} }$</code> (个人认为最好用)</li><li>使用 <code>\</code> 转义：<code>$e^{x^{2\} \}$</code> (有用，但是某些情况不适用)</li><li>修改标识符：<code> $e^{x^{2} }$ </code> (较麻烦，而且不通用)</li></ol><ul><li>图片不显示</li></ul><p>下载 <code>hexo-asset-image</code> 插件 (科学上网会快一点)</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p>修改根目录 <code>_config.yml</code> 文件内容：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="关于-LaTeX"><a href="#关于-LaTeX" class="headerlink" title="关于 LaTeX"></a>关于 LaTeX</h3><p>不能连续使用 <code>~</code><br>不能使用 <code>\textcolor{xxx}</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p>一、安装：</p><ul><li>1.1 搭建环境<ul><li><a href="https://www.cnblogs.com/sghy/p/6840925.html">设置npm的registry</a></li></ul></li><li>1.2 创建GitHub仓库</li><li>1.3 安装Hexo</li><li>1.4 发布网站</li></ul></li><li><p>二、增加功能</p><ul><li>官方：<a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍</a></li><li>2.4 代码高亮、代码折叠<ul><li><a href="http://www.luckyzmj.cn/posts/1b9a9e28.html">代码块优化</a></li></ul></li></ul></li><li><p>几个不错的教程：</p><ul><li>个人感觉较好：<a href="Matery%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BC%98%E5%8C%96%E6%95%99%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90">Matery主题搭建与优化教程超详细解析</a></li><li>这个系列好：<a href="https://zhangxiaocai.cn/categories/Hexo/">https://zhangxiaocai.cn/categories/Hexo/</a></li></ul></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python协程</title>
      <link href="/2022/03/09/python-xie-cheng/"/>
      <url>/2022/03/09/python-xie-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="python协程"><a href="#python协程" class="headerlink" title="python协程"></a>python协程</h1><p>[toc]</p><h2 id="协程的概念"><a href="#协程的概念" class="headerlink" title="协程的概念"></a>协程的概念</h2><p>协程 (Coroutine)，又称为微线程，是一种用户态的<strong>轻量级线程</strong>。</p><p>协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复之前保存的寄存器上下文和栈。因此，协程能够保留上次一调用时的状态，能够进入上一次离开时所处的逻辑流的位置。</p><ul><li>协程的好处<ol><li>无需线程上下文切换的开销</li><li>无需原子操作(不会被线程调度机制打断的操作)锁定以及同步的开销</li><li>方便切换控制流，简化编程模型</li><li>高并发 + 高扩展性 + 低成文：一个 CPU 支持上完的协程都不是问题，所以很适合高并发处理</li></ol></li><li>协程的缺点<ol><li>无法利用多核资源：协程的本质是单线程，需要和进程配合才能运行在多 CPU 上</li><li>进行阻塞 (Blocking) 操 作(如 IO 时) 会阻塞掉整个程序</li></ol></li><li>协程的条件<ol><li>必须在<strong>只有一个单线程</strong>里实现并发</li><li>修改<strong>共享数据不需加锁</strong></li><li>用户程序里自己保存多个控制流的上下文栈</li><li>一个协程遇到 IO 操作自动切换到其它协程</li></ol></li></ul><p>python 中的 <code>yield</code> 支持基本的协程，但是不完全，以下<strong>使用 <code>yield</code> 实现协程：</strong></p><pre class="language-python" data-language="python"><div class="caption"><span>{.line-numbers}</span></div><code class="language-python"><span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> is consuming."</span></span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        money <span class="token operator">=</span> <span class="token keyword">yield</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[%s] consumed %d ￥."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">producer</span><span class="token punctuation">(</span>times<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">next</span><span class="token punctuation">(</span>con1<span class="token punctuation">)</span>    <span class="token builtin">next</span><span class="token punctuation">(</span>con2<span class="token punctuation">)</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">:</span>        con1<span class="token punctuation">.</span>send<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        con2<span class="token punctuation">.</span>send<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\033[32;1m[producer]\033[0m is producing %s ￥."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    con1 <span class="token operator">=</span> consumer<span class="token punctuation">(</span><span class="token string">"customer1"</span><span class="token punctuation">)</span>    con2 <span class="token operator">=</span> consumer<span class="token punctuation">(</span><span class="token string">"customer2"</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> producer<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><h2 id="Greenlet模块"><a href="#Greenlet模块" class="headerlink" title="Greenlet模块"></a>Greenlet模块</h2><h2 id="Asyncio模块"><a href="#Asyncio模块" class="headerlink" title="Asyncio模块"></a>Asyncio模块</h2><h2 id="Gevent模块"><a href="#Gevent模块" class="headerlink" title="Gevent模块"></a>Gevent模块</h2><h2 id="协程的实例"><a href="#协程的实例" class="headerlink" title="协程的实例"></a>协程的实例</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python线程</title>
      <link href="/2022/03/09/python-xian-cheng/"/>
      <url>/2022/03/09/python-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="python线程"><a href="#python线程" class="headerlink" title="python线程"></a>python线程</h1><p>[toc]</p><h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><ul><li><p>outline</p><ul><li><a href="#procss thread">进程 vs 线程</a></li><li><a href="#calculate IO">计算密集型 vs IO密集型</a></li><li><a href="#char">线程特点</a></li><li><a href="#CPU thread">CPU &amp; 线程</a></li><li><a href="#thread module">python线程模块</a><br></li></ul></li><li><p><a id="procss thread"><font color="lightblue">进程 vs 线程</font></a></p><ul><li>进程：稳定性高(优)、开销大(缺)</li></ul><ol><li>进程是资源分配的最小单位(程序由若干进程组成)，一个程序至少有一个进程。</li><li>进程都有自己独立的地址空间，内存，数据栈等，所以进程占用资源多。  由于进程的资源独立，所以通讯不方便，只能使用进程间通讯（IPC）。</li></ol><ul><li>线程：稳定性差(缺)、效率高(优)</li></ul><ol><li>线程是程序执行的最小单位(进程由若干线程组成)，一个进程至少有一个线程。</li><li>线程共享进程中的数据，他们使用相同的地址空间，使用线程创建快捷，创建开销比进程小。  同一进程下的线程共享全局变量、静态变量等数据，所以线程通讯非常方便，但会存在数据同步与互斥的问题，如何处理好同步与互斥是编写多线程程序的难点。</li></ol></li></ul><blockquote><p>注：<br>1.一个进程中可以存在多个线程，在单核CPU中每个进程中同时刻只能运行一个线程，只有在多核CPU中才能存在线程并发的情况。<br>2.当线程需要运行但没有运行空间时，会对线程的优先级进行判断，高优先级先运行，低优先级进程让行。<br>3.多任务(无论是多进程还是多线程)一旦多到一个限度，就会消耗掉系统所有的资源，结果效率急剧下，所有任务都做不好。<br>4.线程间的切换是要快于进程间的切换</p></blockquote><p>————————————————————</p><ul><li><p><a id="calculate IO"><font color="lightblue">计算密集型 vs IO密集型</font></a></p><ul><li>计算密集型：主要消耗CPU资源</li></ul><p>计算密集型任务的特点是要进行大量的计算，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。(脚本语言python运行效率低，完全不适合计算密集型任务，而C语言在这方面效率要高得多)</p><ul><li>IO密集型：大部分时间都在等待IO操作完成</li></ul><p>涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，所以对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。</p></li></ul><p>简言之：Python的多线程，只有用于I/O密集型程序时效率才会有明显的提高。</p><details><summary>原因</summary><p>Python代码的执行是由Python虚拟机(也叫解释器主循环)进行控制。它在主循环中同时只能有一个控制线程在执行，意思就是Python解释器中可以运行多个线程，但是在执行的只有一个线程，其他的处于等待状态。这些线程执行是有全局解释器锁（GIL）控制，它来保证同时只有一个线程在运行。在多线程运行环境中，Python虚拟机执行方式如下：</p><ol><li>设置GIL</li><li>切换进线程</li><li>执行下面操作之一<br>　1. 运行指定数量的字节码指令<br>　2. 线程主动让出控制权</li><li>切换出线程（线程处于睡眠状态）</li><li>解锁GIL</li><li>再次重复以上所有步骤</li></ol><blockquote><p>在调用外部代码(如 C/C++扩展函数)的时候，GIL将会被锁定，直到这个函数结束为止(由于在这期间没有Python的字节码被运行，所以不会做线程切换)编写扩展的程序员可以主动解锁GIL。</p></blockquote></details><p>————————————————————</p><ul><li><a id="char"><font color="lightblue">线程特点</font></a></li></ul><ol><li>轻型实体<br>线程中的实体基本上不拥有系统资源，但是能保证独立运行的资源</li><li>独立调度和分派的基本单位<br>线程是能独立运行的基本单位</li><li>共享进程资源<br>所有线程都具有相同的进程id</li><li>可并发执行<br>允许在一个进程中所有线程都能并发执行</li></ol><p>————————————————————</p><ul><li><a id="CPU thread">CPU &amp; 线程</a></li></ul><p>打开 Mac OS X 的 Activity Monitor 或者 Windows 的 Task Manager，都可以监控某个进程的CPU使用率。</p><p>我们可以监控到一个死循环线程会100%占用一个CPU。如果有两个死循环线程，在多核CPU中，可以监控到会占用200%的CPU，也就是占用两个CPU核心。要想把N核CPU的核心全部跑满，就必须启动N个死循环线程。</p><p>尝试在python启动与CPU核心数量相同的N个线程：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span> multiprocessing<span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>loop<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这个Python程序在4核CPU上可以监控到CPU占用率仅有102%，也就是仅使用了一核。但是用C、C++或Java来改写相同的死循环，直接可以把全部核心跑满，4核就跑到400%，8核就跑到800%。</p><p>为什么？因为Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁(Global Interpreter Lock)，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。</p><p>所以，如果一定要通过多线程利用多核，那只能通过C扩展来实现。但是Python可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响。</p><p>————————————————————</p><ul><li><p><a id="thread module"><font color="lightblue">python线程模块</font></a></p><ul><li>_thread：低级模块</li></ul><p>_thread模块不支持守护线程，当主线程退出时，所有的子线程不论它们是否还在工作，都会被强行退出。</p><ul><li>threading：高级模块，对_thread进行了封装，更先进、完善</li></ul><p>threading模块支持守护线程，守护线程一般是一个等待客户请求的服务器，如果没有客户提出请求它就在那等着，如果设定一个线程为守护线程，就表示这个线程是不重要的，在进程退出的时候，不用等待这个线程退出。</p></li></ul><details><summary>threading 模块对象、方法</summary><table><thead><tr><th align="center">对象</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Thread</code></td><td align="center">表示一个执行线程的对象</td></tr><tr><td align="center"><code>Lock</code></td><td align="center">锁原语对象</td></tr><tr><td align="center"><code>RLock</code></td><td align="center">可重入锁对象，使单一线程可以（再次）获得已持有的锁（递归锁）</td></tr><tr><td align="center"><code>Condition</code></td><td align="center">条件变量对象，使得一个线程等待另一个线程满足特定的“条件”，比如改变状态或某个数据值</td></tr><tr><td align="center"><code>Event</code></td><td align="center">条件变量的通用版本，任意数量的线程等待某个事件的发生，在该事件发生后所有线程将被激活</td></tr><tr><td align="center"><code>Semaphore</code></td><td align="center">为线程间共享的有限资源提供了一个“计数器”，如果没有可用资源时会被阻塞</td></tr><tr><td align="center"><code>BoundedSemaphore</code></td><td align="center">与<code>Semaphore</code>相似，不过它不允许超过初始值</td></tr><tr><td align="center"><code>Timer</code></td><td align="center">与<code>Thread</code>相似，不过它要在运行前等待一段时间</td></tr><tr><td align="center"><code>Barrier</code></td><td align="center">创建一个障碍，必须达到指定数量的线程才可以继续</td></tr></tbody></table><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>activeCount()</code></td><td align="center">获取当前活动中的Thread对象个数</td></tr><tr><td align="center"><code>currentThread()</code></td><td align="center">获取当前的Thread对象</td></tr><tr><td align="center"><code>enumerate()</code></td><td align="center">获取当前活动的Thread对象列表</td></tr><tr><td align="center"><code>settrace(func)</code></td><td align="center">为所有线程设置一个跟踪（trace）函数</td></tr><tr><td align="center"><code>setprofile(func)</code></td><td align="center">为所有线程设置配置文件（profile）函数</td></tr><tr><td align="center"><code>stack_size(size=None)</code></td><td align="center">获取新创建线程的栈大小，也可设置线程栈的大小为size</td></tr></tbody></table></details><hr><h2 id="线程的基本操作"><a href="#线程的基本操作" class="headerlink" title="线程的基本操作"></a>线程的基本操作</h2><h3 id="threading-Thread-类"><a href="#threading-Thread-类" class="headerlink" title="threading.Thread 类"></a><code>threading.Thread</code> 类</h3><ul><li>outline<ul><li><strong><a href="#Thread intro">Thread类介绍</a></strong></li><li><strong><a href="#Thread examp">Thread类实例</a></strong><ul><li><strong><a href="#使用Thread创建实例对象">使用Thread创建实例对象</a></strong></li><li><strong><a href="#继承Thread创建实例对象">继承Thread创建实例对象</a></strong></li><li><strong><a href="#内存数据的共享问题">内存数据的共享问题</a></strong></li><li><strong><a href="#多线程实现socket">多线程实现socket</a></strong></li><li><strong><a href="#守护线程">守护线程</a></strong><br></li></ul></li></ul></li></ul><p><a id="Thread intro"><font color="black"></font></a></p><h4><a id="Thread intro"><font color="black">Thread类介绍</font></a></h4><p></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    group<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>   <span class="token comment"># 为了日后扩展 ThreadGroup 类实现而保留</span>    target<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  <span class="token comment"># 用于 run() 方法调用的可调用对象</span>    name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token comment"># 线程名称</span>    args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment"># 调用目标函数的参数元组</span>    kwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment"># 调用目标函数的关键字参数字典</span>    daemon<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  <span class="token comment"># 守护模式</span><span class="token punctuation">}</span></code></pre><blockquote><p><code>daemon = None</code>：线程将继承当前线程的守护模式属性<br><code>daemon != None</code>：设置该线程是否为守护模式</p></blockquote><details><summary>Thread类实例对象的方法、属性</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># todo 方法</span>t <span class="token operator">=</span> Thread<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment"># 实例化线程</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment"># 开始执行该线程</span>t<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 定义线程功能的方法（通常在子类中被应用开发者重写）</span>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>   <span class="token comment"># 阻塞，直至启动的线程终止之前一直挂起；除非给出了 timeout（秒），否则会一直阻塞</span>t<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 返回线程名</span>t<span class="token punctuation">.</span>setName<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token comment"># 设定线程名</span>t<span class="token punctuation">.</span>isAlivel<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment"># 该线程是否还存活</span>t<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment"># 该线程是否还存活</span>t<span class="token punctuation">.</span>isDaemon<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment"># 如果是守护线程，则返回 True；否则，返回 False</span>t<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span>daemonic<span class="token punctuation">)</span>  <span class="token comment"># 把线程的守护标志设定为布尔值 daemonic（必须在线程 start()之前调用）</span><span class="token comment"># todo 属性</span>t<span class="token punctuation">.</span>name       <span class="token comment"># 线程名</span>t<span class="token punctuation">.</span>ident      <span class="token comment"># 线程标识符（通过t.get_ident()获取）</span>t<span class="token punctuation">.</span>native_id  <span class="token comment"># 此线程的原生集成线程 TID，类似于进程 PID（通过t.get_native_id()获取）</span>t<span class="token punctuation">.</span>daemon     <span class="token comment"># 守护线程</span></code></pre></details><details><summary>Thread类的方法、属性</summary><pre class="language-python" data-language="python"><code class="language-python">threading<span class="token punctuation">.</span>currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 返回当前的线程变量（对象）。</span>threading<span class="token punctuation">.</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</span>threading<span class="token punctuation">.</span>activeCount<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</span></code></pre></details><p><a id="Thread examp"></a></p><h4><a id="Thread examp"><font color="black">Thread类实例</font></a></h4><p></p><ul><li><a id="使用Thread创建实例对象">使用Thread创建实例对象</a></li></ul><p>同一进程的线程有相同的PID，但是TID不同！</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token keyword">import</span> threading<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    loop_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"线程 </span><span class="token interpolation"><span class="token punctuation">{</span>loop_thread<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> 开始......"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"线程 </span><span class="token interpolation"><span class="token punctuation">{</span>loop_thread<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> PID：</span><span class="token interpolation"><span class="token punctuation">{</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"线程 </span><span class="token interpolation"><span class="token punctuation">{</span>loop_thread<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> TID：</span><span class="token interpolation"><span class="token punctuation">{</span>loop_thread<span class="token punctuation">.</span>native_id<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"线程 </span><span class="token interpolation"><span class="token punctuation">{</span>loop_thread<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> 结束......"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    main_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"线程 </span><span class="token interpolation"><span class="token punctuation">{</span>main_thread<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> 开始......"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"线程 </span><span class="token interpolation"><span class="token punctuation">{</span>main_thread<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> PID：</span><span class="token interpolation"><span class="token punctuation">{</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"线程 </span><span class="token interpolation"><span class="token punctuation">{</span>main_thread<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> TID：</span><span class="token interpolation"><span class="token punctuation">{</span>main_thread<span class="token punctuation">.</span>native_id<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        t1 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>loop<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"Loopthread-1"</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>    t2 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>loop<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"Loopthread-2"</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>        t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"线程 </span><span class="token interpolation"><span class="token punctuation">{</span>main_thread<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> 结束......"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>注：<br>1.主线程：任何进程默认就会启动一个线程，我们把该线程称为主线程，主线程又可以启动新的线程</p></blockquote><ul><li><a id="继承Thread创建实例对象">继承Thread创建实例对象</a></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>target <span class="token operator">=</span> target        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>target<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">say_hi</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"hello, this's </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mythread <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>target<span class="token operator">=</span>say_hi<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"my thread"</span><span class="token punctuation">)</span>    mythread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    mythread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>注：<br>1.继承必须实现<code>run()</code>函数！</p></blockquote><ul><li><a id="内存数据的共享问题">内存数据的共享问题</a></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token keyword">import</span> threading<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">def</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> n    n <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token number">100</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>work<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主进程的 n = '</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    n <span class="token operator">=</span> <span class="token number">1</span>    t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>work<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程的 n = '</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span></code></pre><blockquote><p>注：<br>1.子进程p已经将自己的全局的n改成了0（具体来说是将数据拷贝了一份，然后再修改），但改的仅仅是它自己的，父进程的n仍然为100，所以进程之间数据不共享<br>2.主线程n的结果为0，同一进程内的线程之间共享进程内的数据</p></blockquote><ul><li><a id="多线程实现socket">多线程实现socket</a></li></ul><p>server端</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#_*_coding:utf-8_*_</span><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">import</span> threading<span class="token keyword">import</span> multiprocessing <span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data<span class="token operator">=</span>conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        conn<span class="token punctuation">,</span>addr<span class="token operator">=</span>s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>action<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>client端</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#_*_coding:utf-8_*_</span><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">import</span> socket s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'&gt;&gt;: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> msg<span class="token punctuation">:</span><span class="token keyword">continue</span>     s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><ul><li><a id="守护线程">守护线程</a></li></ul><p><b>无论是进程还是线程，都遵循：守护xx会等待主xx运行完毕后被销毁。需要强调的是：运行完毕并非终止运行</b></p><blockquote><p><b>守护线程运行完毕</b><br>1.对主进程来说，运行完毕指的是主进程代码运行完毕<br>2.对主线程来说，运行完毕指的是主线程所在的进程内所有非守护线程通通运行完毕，主线程才算运行完毕</p><blockquote><p><b>详细解释</b><br>1.主进程在其代码结束后就已经算运行完毕了（守护进程在此时就被回收）,然后主进程会一直等非守护的子进程都运行完毕后回收子进程的资源(否则会产生僵尸进程)，才会结束。<br>2.主线程在其他非守护线程运行完毕后才算运行完毕（守护线程在此时就被回收）。因为主线程的结束意味着进程的结束，进程整体的资源都将被回收，而进程必须保证非守护线程都运行完毕后才能结束。</p></blockquote></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token keyword">import</span> threading<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"thread bar is running......"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"thread foo is running......"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    t1 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>bar<span class="token punctuation">,</span><span class="token punctuation">)</span>    t2 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>foo<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token comment"># t1.daemon = True</span>    t1<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"thread bar is alive </span><span class="token interpolation"><span class="token punctuation">{</span>t1<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"thread foo is alive </span><span class="token interpolation"><span class="token punctuation">{</span>t2<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"thread bar is alive </span><span class="token interpolation"><span class="token punctuation">{</span>t1<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"thread foo is alive </span><span class="token interpolation"><span class="token punctuation">{</span>t2<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span></code></pre><blockquote><p>守护进程必须设置在<code>t.start()</code>之前！</p></blockquote><hr><h4 id="结束线程方法"><a href="#结束线程方法" class="headerlink" title="结束线程方法"></a>结束线程方法</h4><p>见；<a href="https://blog.csdn.net/fenglepeng/article/details/103186966">python threading 结束线程</a></p><h3 id="threading-Lock-类"><a href="#threading-Lock-类" class="headerlink" title="threading.Lock 类"></a><code>threading.Lock</code> 类</h3><p>多线程是在同一个进程下运行的，因此在进程中的全局变量所有线程都是共享的，这就造成一个问题，因为线程执行的顺序是无序的，有可能会造成数据错误，所以引入锁机制。</p><ul><li>outline<ul><li><strong><a href="#Lock intro">Lock类介绍</a></strong></li><li><strong><a href="#Lock examp">Lock类实例</a></strong><ul><li><strong><a href="#share data prob">多线程数据共享的问题</a></strong></li><li><strong><a href="#share data solu">Lock解决多线程数据共享的问题</a></strong></li><li><strong><a href="#Lock0">Lock买票问题</a></strong><br></li></ul></li></ul></li></ul><p><a id="Lock intro"><font color="b"></font></a></p><h4><a id="Lock intro"><font color="b">Lock类介绍</font></a></h4><p></p><details><summary>Lock类对象方法</summary><pre class="language-python" data-language="python"><code class="language-python">l <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token comment"># 实例化锁对象</span>l<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span>blocking<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 获取锁（阻塞或非阻塞）</span>l<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment"># 释放锁</span>l<span class="token punctuation">.</span>locked<span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token comment"># 如果获得了锁则返回真值</span></code></pre></details><p>锁有两种状态：<font color="red">锁定</font>和<font color="red">未锁定</font>。而且也只有两个函数：<font color="red">获取锁</font>和<font color="red">释放锁</font>。当多线程争夺锁的时候，允许第一个获得锁的线程进入临界区，并执行代码，之后所有的线程都被阻塞，当第一个线程执行结束，退出临界区，释放锁，此时，其他等待的线程可以获得锁进入临界区，不过要记住，被阻塞的线程是<font color="red">无序</font>的。</p><p><a id="Lock examp"><font color="b"></font></a></p><h4><a id="Lock examp"><font color="b">Lock类实例</font></a></h4><p></p><ul><li><a id="share data prob">多线程数据共享的问题</a></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">def</span> <span class="token function">add_v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> value    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        value <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"value: </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>add_v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 结果</span>value: <span class="token number">1398771</span>value: <span class="token number">1555540</span></code></pre><ul><li><a id="share data solu">Lock解决多线程数据共享的问题</a></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Lock<span class="token punctuation">,</span> Thread<span class="token keyword">def</span> <span class="token function">add_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> value    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取锁</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        value <span class="token operator">+=</span> <span class="token number">1</span>    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 释放锁</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"value: </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>value <span class="token operator">=</span> <span class="token number">0</span>lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>add_v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># todo 结果</span>value: <span class="token number">1000000</span>value: <span class="token number">2000000</span></code></pre><ul><li><a id="Lock0">Lock卖票问题</a></li></ul><p>假设有3个卖票窗口，一共10张票，每个窗口排队买票，每人最多购买2张，请使用多线程模拟该场景。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># to be continue</span></code></pre><hr><h3 id="threading-RLock-类"><a href="#threading-RLock-类" class="headerlink" title="threading.RLock 类"></a><code>threading.RLock</code> 类</h3><p>递归锁RLock和普通锁Lock的差别在于加入了“所属线程”和“递归等级”的概念，释放锁必须由获取锁的线程来进行释放。同时，同一个线程在释放锁之前再次获取锁将不会阻塞当前线程，只是在锁的递归等级上加了1（获得锁时的初始递归等级为1）。</p><p>说白了递归锁就是——普通锁的套娃：递归锁RLock可以上很多次锁，上了几次锁就得解几次锁才能解开，但是必须得完全解开之后，其他线程才能使用其中的资源。</p><ul><li>outline<ul><li><strong><a href="#RLock intro">RLock类介绍</a></strong></li><li><strong><a href="#RLock examp">RLock类实例</a></strong><ul><li><strong><a href="#deadlock prob">死锁问题</a></strong></li><li><strong><a href="#deadlock solu">RLock解决死锁问题</a></strong><br></li></ul></li></ul></li></ul><p><a id="RLock intro"><font color="black"></font></a></p><h4><a id="RLock intro"><font color="black">RLock类介绍</font></a></h4><p></p><details><summary>RLock类方法(略)</summary><pre class="language-python" data-language="python"><code class="language-python">rl <span class="token operator">=</span> RLock<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment"># 实例化递归锁对象</span>rl<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span>blocking<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 递归锁的递归等级加1</span>rl<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment"># 递归锁的递归等级减1</span></code></pre></details><details><summary>RLock类方法(详)</summary><pre class="language-python" data-language="python"><code class="language-python">rl <span class="token operator">=</span> RLock<span class="token punctuation">(</span><span class="token punctuation">)</span>rl<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span>blocking<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    与普通锁的不同之处在于：当使用默认值时，如果这个线程已经拥有锁，那么锁的递归等级加1。    线程获得锁时，该锁的递归等级被初始化为1。    当多个线程被阻塞时，只有一个线程能在锁被解时获得锁，这种情况下，acquire()是没有返回值的。    """</span>rl<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    没有返回值，调用一次则递归等级减1，    递归等级为零时表示这个线程的锁已经被释放掉，其他线程可以获取锁了。    可能在一个线程中调用了多次acquire()，导致锁的递归等级大于了1，    那么就需要调用对应次数的release()来完全释放锁，    并将它的递归等级减到零，其他的线程才能获取锁，不然就会一直被阻塞着。    """</span></code></pre></details><p><a id="RLock examp"><font color="black"></font></a></p><h4><a id="RLock examp"><font color="black">RLock类实例</font></a></h4><p></p><ul><li><a id="deadlock prob">死锁问题</a></li></ul><p><strong>死锁</strong>：指的是两个或两个以上的线程或进程在请求锁的时候形成了互相等待阻塞的情况，导致这些线程或进程无法继续执行下去，这时候称系统处于死锁状态或者系统产生了死锁，这些线程或进程就称为死锁线程或死锁进程。</p><p><strong>举个例子</strong>：我有一个苹果，你有一个香蕉，我想要你的香蕉，你想要我的苹果。但是，我要求：你得先给我香蕉我才能给你苹果，你也要求：我得给你苹果你才能给我香蕉。所以，双方就无法完成交换，即造成死锁。</p><blockquote><p>死锁问题实例：<br><code>func1()</code>：得到苹果-&gt;得到香蕉-&gt;释放香蕉-&gt;释放苹果<br><code>func1()</code>：得到香蕉-&gt;得到苹果-&gt;释放苹果-&gt;释放香蕉</p><blockquote><p>造成死锁流程：<br>1.<code>thread-1</code>在<code>func1</code>中，依次得到并释放苹果和香蕉<br>2.接着，<code>thread-1</code>在<code>func2</code>中得到香蕉，然后<code>sleep(0.1)</code><br>3.此时，趁<code>thread-1</code>在休眠，<code>thread-2</code>开始执行<br>4.<code>thread-2</code>在<code>func1</code>中，先得到苹果，但是无法得到香蕉（因为香蕉在<code>thread-1</code>里面）<br>5.这样，就出现了死锁：<code>thread-1</code>等<code>thread-2</code>释放苹果，<code>thread-2</code>等<code>thread-1</code>释放香蕉</p></blockquote></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threadinglock_apple <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>lock_banana <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fun2<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_apple<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 如果锁被占用,则阻塞在这里,等待锁的释放</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 想拿: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"苹果"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        lock_banana<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 想拿: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"香蕉"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        lock_banana<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 释放: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"香蕉"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        lock_apple<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 释放: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"苹果"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_banana<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 想拿: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"香蕉"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>  <span class="token comment"># 休眠，让其他线程开启</span>        lock_apple<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 想拿: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"苹果"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        lock_apple<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 释放: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"苹果"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        lock_banana<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 释放: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"香蕉"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 建立5个线程</span>        my_thread <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>        my_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><a id="deadlock solu">RLock解决死锁问题</a></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threadinglock <span class="token operator">=</span> threading<span class="token punctuation">.</span>RLock<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#递归锁</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fun2<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 如果锁被占用,则阻塞在这里,等待锁的释放</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 想拿: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"苹果"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 想拿: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"香蕉"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 释放: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"香蕉"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 释放: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"苹果"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 想拿: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"香蕉"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 想拿: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"苹果"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 释放: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"苹果"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"线程 %s , 释放: %s--%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"香蕉"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#建立10个线程</span>        my_thread <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>         my_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h3 id="threading-Condition-类"><a href="#threading-Condition-类" class="headerlink" title="threading.Condition 类"></a><code>threading.Condition</code> 类</h3><p>Lock锁机制存在一个问题，上锁是一个很耗费CPU资源的行为，这时候就可以考虑使用Condition对象，<code>threading.Condition()</code>可以在<font color="orange">没有数据的时候处于阻塞等待状态</font>，<font color="orange">一旦有合适的数据，还可以使用<code>notify()</code>相关的函数来通知其他处于等待状态的线程</font>，这样就可以<font color="orange">不用做一些无用的上锁和解锁操作</font>，可以提高程序的性能。</p><ul><li>outline<ul><li><strong><a href="#Condition intro">Condition类介绍</a></strong></li><li><strong><a href="#Condition examp">Condition类实例</a></strong><ul><li><strong><a href="#Condition0">Condition示例</a></strong></li></ul></li></ul></li></ul><p><a id="Condition intro"><font color="black"></font></a></p><h4><a id="Condition intro"><font color="black">Condition类介绍</font></a></h4><p></p><details><summary>Condition类对象方法</summary><pre class="language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> Condition<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 实例化条件对象</span>c<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 获取锁</span>c<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 释放锁</span>c<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment"># 将当前线程处于等待状态，并释放锁。可以被其他线程使用 notify 和 notify_all 函数唤醒，被唤醒后会继续等待上锁，上锁后继续执行下面代码</span>c<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 通知正在等待的某个线程，默认是第一个等待的线程</span>c<span class="token punctuation">.</span>nofity_all<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 通知所有正在等待的线程，notify和nofify_all不会释放锁，并且需要在release（）之前调用</span></code></pre></details><p><a id="Condition examp"><font color="black"></font></a></p><h4><a id="Condition examp"><font color="black">Condition类实例</font></a></h4><p></p><ul><li><a id="Condition0">Condition示例</a></li></ul><p>Condition实现生产和消费多对多模型</p><p>创建两个类：Producer和Consumer。Producer用于赚钱，规定每个线程只需要工作10次即可；Consumer用于消费。</p><p>Consumer每次花钱的时候会看一下金库的总额够不够，如果不够就会调用<code>gCondition.wait()</code>将线程处于等待.当Producer赚钱了，就会调用<code>gCondition.notify_all()</code>，提醒真正等待的线程，当线程被唤醒之后会继续等待上锁，上锁后继续执行下面的代码。</p><pre class="language-python" data-language="python"><div class="caption"><span>{.line-numbers}</span></div><code class="language-python"><span class="token keyword">import</span> time<span class="token punctuation">,</span> random<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token punctuation">,</span> Lock<span class="token punctuation">,</span> RLock<span class="token punctuation">,</span> Condition<span class="token punctuation">,</span> current_threadg_money <span class="token operator">=</span> <span class="token number">1000</span>g_condition <span class="token operator">=</span> Condition<span class="token punctuation">(</span><span class="token punctuation">)</span>g_times <span class="token operator">=</span> <span class="token number">0</span>g_totaltimes <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> g_money        <span class="token keyword">global</span> g_times        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            money <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>            g_condition<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 获得锁</span>            <span class="token keyword">if</span> g_times <span class="token operator">&gt;=</span> g_totaltimes<span class="token punctuation">:</span>                g_condition<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            g_money <span class="token operator">+=</span> money            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"生产者</span><span class="token interpolation"><span class="token punctuation">{</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">生产了</span><span class="token interpolation"><span class="token punctuation">{</span>money<span class="token punctuation">}</span></span><span class="token string">元，余额：</span><span class="token interpolation"><span class="token punctuation">{</span>g_money<span class="token punctuation">}</span></span><span class="token string">元"</span></span><span class="token punctuation">)</span>            g_times <span class="token operator">+=</span> <span class="token number">1</span>            g_condition<span class="token punctuation">.</span>notify_all<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 通知所有正在等待的线程</span>            g_condition<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 释放锁</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> g_money        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            price <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>            g_condition<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 获得锁</span>            <span class="token keyword">while</span> g_money <span class="token operator">&lt;</span> price<span class="token punctuation">:</span>                <span class="token keyword">if</span> g_times <span class="token operator">&gt;=</span> g_totaltimes<span class="token punctuation">:</span>                    g_condition<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"消费者</span><span class="token interpolation"><span class="token punctuation">{</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">准备消费</span><span class="token interpolation"><span class="token punctuation">{</span>price<span class="token punctuation">}</span></span><span class="token string">，余额不足！余额：</span><span class="token interpolation"><span class="token punctuation">{</span>g_money<span class="token punctuation">}</span></span><span class="token string">元"</span></span><span class="token punctuation">)</span>                g_condition<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment"># 钱不够了，等待并释放锁</span>            g_money <span class="token operator">-=</span> price            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"消费者</span><span class="token interpolation"><span class="token punctuation">{</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">消费了</span><span class="token interpolation"><span class="token punctuation">{</span>price<span class="token punctuation">}</span></span><span class="token string">元，余额：</span><span class="token interpolation"><span class="token punctuation">{</span>g_money<span class="token punctuation">}</span></span><span class="token string">元"</span></span><span class="token punctuation">)</span>            g_condition<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 完成消费，释放锁</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 添加并开启消费线程</span>        t <span class="token operator">=</span> Consumer<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"consumer</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 添加并开启生产线程</span>        t <span class="token operator">=</span> Producer<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"producer</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>一个线程使用 <code>g_condition.acquire()</code> <code>g_condition.wait()</code> 获得锁并等待，其子线程不会等待，而是继续运行。</p><hr><h3 id="threading-Semaphore-类"><a href="#threading-Semaphore-类" class="headerlink" title="threading.Semaphore 类"></a><code>threading.Semaphore</code> 类</h3><hr><h3 id="threading-Event-类"><a href="#threading-Event-类" class="headerlink" title="threading.Event 类"></a><code>threading.Event</code> 类</h3><hr><h3 id="threading-Timer-类"><a href="#threading-Timer-类" class="headerlink" title="threading.Timer 类"></a><code>threading.Timer</code> 类</h3><hr><h3 id="threading-Barrier-类"><a href="#threading-Barrier-类" class="headerlink" title="threading.Barrier 类"></a><code>threading.Barrier</code> 类</h3><hr><h3 id="threading-loacl-类"><a href="#threading-loacl-类" class="headerlink" title="threading.loacl 类"></a><code>threading.loacl</code> 类</h3><ul><li>outline<ul><li><strong><a href="#local intro">local类介绍</a></strong></li><li><strong><a href="#local examp">local类实例</a></strong><ul><li><strong><a href="#local0">local示例</a></strong></li></ul></li></ul></li></ul><p><a id="local intro"><font color="black"></font></a></p><h4><a id="local intro"><font color="black">local类介绍</font></a></h4><p></p><ul><li><strong><code>ThreadLocal</code>的由来</strong></li></ul><p>在多线程中，使用局部变量比使用全局变量要好，因此每个线程都有自己的数据，那么如果想要分享线程的数据，就得传参，但是在调用函数传参的时候会有点麻烦，因此就出现了<code>ThreadLocal</code>。</p><ul><li><strong><code>ThreadLocal</code>的理解</strong></li></ul><p><code>ThreadLocal</code>（线程本地变量，或者线程本地存储）在每一个变量中都会创建一个副本，每个线程都可以访问自己内部的副本变量。通俗点说，<code>ThreadLocal</code>就像一个字典，字典的<font color="orange">键值对</font>就像<font color="orange">线程的变量及其数据。</font><font color="lightgrey">所以按理来说，只要你想，完全可以使用字典来保存线程的数据，只是<code>ThreadLocal</code>更好更有优势。</font></p><ul><li><strong><code>ThreadLocal</code>的使用</strong></li></ul><p><code>ThreadLocal</code>是一个<font color="orange">全局变量</font>，但每个线程都<font color="orange">只能读写自己线程的独立副本，互不干扰</font>。<code>ThreadLocal</code>解决了参数在一个线程中各个函数之间互相传递的问题，真正做到了线程之间的数据隔离。</p><img src="/2022/03/09/python-xian-cheng/python线程-ThreadLocal.png" height="600"><details><summary>local类对象方法</summary><pre class="language-python" data-language="python"><code class="language-python">tl <span class="token operator">=</span> local<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 实例化ThreadLocal对象</span>tl<span class="token punctuation">.</span>xxx <span class="token operator">=</span> dat  <span class="token comment"># 动态绑定</span></code></pre></details><p><a id="local examp"><font color="black"></font></a></p><h4><a id="local examp"><font color="black">local类实例</font></a></h4><p></p><ul><li><a id="local0">local示例</a></li></ul><p>每一个线程都可以通过<code>local_school.student</code>获取自己独有的数据，并且每个线程读取到的<code>local_school.student</code>都不同，真正做到线程之间的隔离。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threadinglocal_school <span class="token operator">=</span> threading<span class="token punctuation">.</span>local<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建全局ThreadLocal对象</span><span class="token keyword">def</span> <span class="token function">process_student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 获取当前线程关联的student</span>    std <span class="token operator">=</span> local_school<span class="token punctuation">.</span>student    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %s (in %s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>std<span class="token punctuation">,</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_thread</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 绑定ThreadLocal的student</span>    local_school<span class="token punctuation">.</span>student <span class="token operator">=</span> name    process_student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>process_thread<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Thread-A'</span><span class="token punctuation">)</span>    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>process_thread<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Thread-B'</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><table><thead><tr><th align="center">链接</th><th align="center">标签</th><th align="center">说明</th><th align="center">网站</th></tr></thead><tbody><tr><td align="center"><a href="https://www.cnblogs.com/guyuyun/p/11185832.html">Python内置库：threading（多线程）</a></td><td align="center"><code>threading</code></td><td align="center">内容很多很全、讲原理、解释参数、实例多、通俗</td><td align="center">博客园</td></tr><tr><td align="center"><a href="https://blog.csdn.net/briblue/category_8520204.html">Python 基本功-线程</a></td><td align="center"><code>threading</code></td><td align="center">这个专栏系列内容很多很全、讲原理、解释参数、实例多、通俗</td><td align="center">CSDN</td></tr><tr><td align="center"><a href="https://blog.csdn.net/qq_41922768/category_7767239.html">python基础-线程</a></td><td align="center"><code>threading</code></td><td align="center">这个专栏系列内容很多很全、讲原理、解释参数、实例多</td><td align="center">CSDN</td></tr><tr><td align="center"><a href="https://zhuanlan.zhihu.com/p/91601448">Python threading实现多线程 基础篇</a></td><td align="center"></td><td align="center"></td><td align="center">知乎</td></tr><tr><td align="center"><a href="https://zhuanlan.zhihu.com/p/94344847">Python threading实现多线程 提高篇 线程同步，以及各种锁</a></td><td align="center"><code>Lock</code> <code>RLock</code> <code>Semaphore</code> <code>Condition</code> <code>Event</code> <code>Barrie</code> <code>queue</code></td><td align="center"></td><td align="center">知乎</td></tr><tr><td align="center"><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017629247922688">多线程</a></td><td align="center"></td><td align="center"></td><td align="center">廖雪峰的官方网站</td></tr><tr><td align="center"><a href="https://blog.csdn.net/l835311324/article/details/86608850">threading模块基本使用</a></td><td align="center"><code>Thread</code> <code>LOCK</code> <code>Condition</code></td><td align="center">模块对象方法较全</td><td align="center">CSDN</td></tr><tr><td align="center"><a href="https://docs.python.org/zh-cn/3.8/library/threading.html">threading — 基于线程的并行</a></td><td align="center"><code>threading</code></td><td align="center">教程</td><td align="center">python官网</td></tr></tbody></table><p>锁：</p><table><thead><tr><th align="center">链接</th><th align="center">标签</th><th align="center">说明</th><th align="center">网站</th></tr></thead><tbody><tr><td align="center"><a href="https://cloud.tencent.com/developer/article/1419992">一篇文章理清Python多线程同步锁，死锁和递归锁</a></td><td align="center"><code>Lock</code> <code>RLock</code></td><td align="center">详细讲了<code>RLock</code>解决死锁的问题</td><td align="center">CSDN</td></tr></tbody></table><p>ThreadLocal：</p><table><thead><tr><th align="center">链接</th><th align="center">标签</th><th align="center">说明</th><th align="center">网站</th></tr></thead><tbody><tr><td align="center"><a href="https://www.cnblogs.com/linpd/p/10051945.html">Python中ThreadLocal的理解与使用</a></td><td align="center"><code>ThreadLocal</code></td><td align="center"></td><td align="center">博客园</td></tr><tr><td align="center"><a href="https://www.jianshu.com/p/74640d22a72f">深入理解Python中的ThreadLocal变量（上）</a></td><td align="center"><code>ThreadLocal</code></td><td align="center"></td><td align="center">简书</td></tr><tr><td align="center"><a href="https://www.jianshu.com/p/474ecc81d756">深入理解Python中的ThreadLocal变量（中）</a></td><td align="center"><code>ThreadLocal</code></td><td align="center"></td><td align="center">简书</td></tr><tr><td align="center"><a href="https://www.jianshu.com/p/0e12c1397bfd">深入理解Python中的ThreadLocal变量（下）</a></td><td align="center"><code>ThreadLocal</code></td><td align="center"></td><td align="center">简书</td></tr><tr><td align="center"><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017630786314240">ThreadLocal</a></td><td align="center"><code>ThreadLocal</code></td><td align="center"></td><td align="center">廖雪峰的官方网站</td></tr></tbody></table><h2 id="待完成"><a href="#待完成" class="headerlink" title="待完成"></a>待完成</h2><ul><li><input checked="" disabled="" type="checkbox"> 通过with语句使用线程锁</li><li><input disabled="" type="checkbox"> Lock卖票问题</li><li><input disabled="" type="checkbox"> 信号量对象：threading.Semaphore</li><li><input disabled="" type="checkbox"> 事件对象：threading.Event</li><li><input disabled="" type="checkbox"> 定时器对象：threading.Timer</li><li><input disabled="" type="checkbox"> 栅栏对象：threading.Barrier</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python进程</title>
      <link href="/2022/03/09/python-jin-cheng/"/>
      <url>/2022/03/09/python-jin-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="python进程"><a href="#python进程" class="headerlink" title="python进程"></a>python进程</h1><p><font color="orange">For Windows</font></p><p>[toc]</p><h2 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h2><ul><li>outline<ul><li><a href="#def">进程的定义</a></li><li><a href="#char">进程的特征</a></li><li><a href="#disp">进程调度</a></li><li><a href="#parl">进程的并行与并发</a></li><li><a href="#state">进程的状态</a></li><li><a href="#lib">python中的进程库</a></li></ul></li></ul><p>————————————————————</p><ul><li><a id="def"><font color="lightblue">进程的定义</font></a><ul><li>狭义定义<br>进程是正在运行的程序的实例(an instance of a computer program that is being executed)。</li><li>广义定义<br>进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</li></ul></li></ul><p>简单来说，进程就是程序的基本执行实体。</p><p>————————————————————</p><ul><li><a id="char"><font color="lightblue">进程的特征</font></a><ul><li>动态性：进程的实质是程序在多道程序系统中的一次执行过程，进是动态产生，动态消亡的。</li><li>并发性：任何进程都可以同其他进程一起并发执行</li><li>独立性：进程是一个能独立运行的基本单位，同时也是系统分配资和调度的独立单位；</li><li>异步性：由于进程间的相互制约，使进程具有执行的间断性，即进按各自独立的、不可预知的速度向前推进</li><li>结构特征：进程由程序、数据和进程控制块三部分组成。</li><li>多个不同的进程可以包含相同的程序：一个程序在不同的数据集里就构成不同的进程，能得到不同的结果；但是执行过程中，程序不能发生改变。</li></ul></li></ul><p>————————————————————</p><ul><li><a id="disp"><font color="lightblue">进程调度</font></a><ul><li>先来先服务调度算法：利于长作业（进程），而不利于短作业（进程）</li><li>短作业优先调度算法：对短作业或短进程优先调度</li><li>时间片轮转法：让每个进程在就绪队列中的等待时间与享受服务的时间成比例</li><li>多级反馈队列：目前被公认的一种较好的进程调度算法</li></ul></li></ul><p>————————————————————</p><ul><li><a id="parl"><font color="lightblue">进程的并行与并发</font></a><ul><li>并行：多个进程同时执行</li><li>并发：多个进程交替进行</li></ul></li></ul><p>————————————————————</p><ul><li><p><a id="state"><font color="lightblue">进程的状态</font></a>：创建、就绪、运行、阻塞、退出</p></li><li><p>同步与异步</p><ul><li>同步：可靠的任务序列，进程1依赖于进程2，只有进程2完成后，进程1才算完成，即这两个进程状态保持一致。</li><li>异步：不可靠的任务序列，进程1依赖于进程2，不管进程2是否完成，进程1自己完成就算完成，即这两个进程状态不一定保持一致。</li></ul></li><li><p>阻塞与非阻塞：即程序等待消息的状态。</p></li><li><p>同步/异步与阻塞/非阻塞</p><ul><li>同步阻塞：效率最低(只排队)</li><li>异步阻塞：效率较低(只叫号)</li><li>同步非阻塞：效率较低(排队+打电话)</li><li>异步非阻塞：效率高(叫号+打电话)</li></ul></li></ul><p>————————————————————</p><ul><li><p><a id="lib"><font color="lightblue">python中的进程库</font></a></p><ul><li><code>subprocess</code>：适用于与外部进程交互，调用外部进程</li></ul><p><code>subprocess</code>用来执行外部命令，是<code>os.fork()</code>和<code>os.execve()</code>的封装，即先fork一个子进程，再运行新的外部程序，<font color="orange">子进程不会把父进程的模块加载一遍</font>。</p><ul><li><code>multiprocessing</code></li></ul><p><code>multiprocessing</code>的原理是fork，<code>fork()</code>调用：调用1次，返回两次——操作系统自动把当前进程（父进程）复制了一份（子进程），然后，分别在父进程和子进程内返回，父进程返回子进程的pid，子进程返回0，即父进程和子进程都在运行。对于外部调用来说，使用multiprocessing太占资源。</p></li></ul><hr><h2 id="进程的基本操作"><a href="#进程的基本操作" class="headerlink" title="进程的基本操作"></a>进程的基本操作</h2><h3 id="multiprocessing-Process-类"><a href="#multiprocessing-Process-类" class="headerlink" title="multiprocessing.Process 类"></a><code>multiprocessing.Process</code> 类</h3><ul><li>outline<ul><li><strong><a href="#Process intro">Process类介绍</a></strong></li><li><strong><a href="#Process examp">Process类实例</a></strong><ul><li><strong><a href="#Process0">使用Process开启一个子进程</a></strong></li><li><strong><a href="#Process1">继承Process开启一个子进程</a></strong></li><li><strong><a href="#Process2">使用Process守护进程</a></strong></li><li><strong><a href="#Process3">多进程socket聊天并发</a></strong></li></ul></li></ul></li></ul><p><a id="Process intro"><font color="black"></font></a></p><h4><a id="Process intro"><font color="black">Process类介绍</font></a></h4><p></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Process</span><span class="token punctuation">{</span>    group<span class="token punctuation">,</span>   <span class="token comment"># 参数未使用，值始终为None</span>    target<span class="token punctuation">,</span>  <span class="token comment"># 调用对象，即子进程要执行的任务</span>    args<span class="token punctuation">,</span>    <span class="token comment"># 调用对象的位置参数元组</span>    kwargs<span class="token punctuation">,</span>  <span class="token comment"># 调用对象的字典</span>    name<span class="token punctuation">,</span>    <span class="token comment"># 子进程的名称</span><span class="token punctuation">}</span></code></pre><details><summary>Process类方法、属性(略)</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># todo 方法</span>p <span class="token operator">=</span> Process<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 创建子进程</span>p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 启动子进程，并调用该子进程中的 p.run() </span>p<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment"># 进程启动时运行的方法</span>p<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 强制终止进程</span>p<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 如果p仍然运行，返回True</span>p<span class="token punctuation">.</span>join<span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>  <span class="token comment"># 主线程等待p终止，timeout是可选的超时时间</span><span class="token comment"># todo 属性</span>p<span class="token punctuation">.</span>daemon    <span class="token comment"># 默认值为False</span>p<span class="token punctuation">.</span>name      <span class="token comment"># 进程的名称</span>p<span class="token punctuation">.</span>pid       <span class="token comment"># 进程的pid</span>p<span class="token punctuation">.</span>exitcode  <span class="token comment"># 进程在运行时为None、如果为–N，表示被信号N结束(了解即可)</span>p<span class="token punctuation">.</span>authkey   <span class="token comment"># 进程的身份验证键，默认是由os.urandom()随机生成的32字符的字符串</span></code></pre></details><details><summary>Process类方法、属性(详)</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># todo 参数</span><span class="token keyword">class</span> <span class="token class-name">Process</span><span class="token punctuation">{</span>    group<span class="token punctuation">,</span>   <span class="token comment"># 参数未使用，值始终为None</span>    target<span class="token punctuation">,</span>  <span class="token comment"># 调用对象，即子进程要执行的任务</span>    args<span class="token punctuation">,</span>    <span class="token comment"># 调用对象的位置参数元组</span>    kwargs<span class="token punctuation">,</span>  <span class="token comment"># 调用对象的字典</span>    name<span class="token punctuation">,</span>    <span class="token comment"># 子进程的名称</span><span class="token punctuation">}</span><span class="token comment"># todo 方法</span>p <span class="token operator">=</span> Process<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 创建子进程</span>p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 启动子进程，并调用该子进程中的 p.run() </span>p<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment"># 进程启动时运行的方法</span>    <span class="token triple-quoted-string string">"""    调用target指定的函数，自定义类的类中一定要实现该方法    """</span>p<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 强制终止进程</span>    <span class="token triple-quoted-string string">"""    如果p创建了子进程，该子进程就成了僵尸进程，使用该方法需要特别小心这种情况    如果p还保存了一个锁那么也将不会被释放，进而导致死锁    """</span>p<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 如果p仍然运行，返回True</span>p<span class="token punctuation">.</span>join<span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>  <span class="token comment"># 主线程等待p终止，timeout是可选的超时时间</span>    <span class="token triple-quoted-string string">"""    p.join只能join住start开启的进程，而不能join住run开启的进程    """</span><span class="token comment"># todo 属性</span>p<span class="token punctuation">.</span>daemon  <span class="token comment"># 默认值为False</span>    <span class="token triple-quoted-string string">"""    如果设为True，代表p为后台运行的守护进程，当p的父进程终止时，p也随之终止    并且设定为True后（必须在p.start()之前设置），p不能创建自己的新进程    """</span>p<span class="token punctuation">.</span>name  <span class="token comment"># 进程的名称</span>p<span class="token punctuation">.</span>pid  <span class="token comment"># 进程的pid</span>p<span class="token punctuation">.</span>exitcode  <span class="token comment"># 进程在运行时为None、如果为–N，表示被信号N结束(了解即可)</span>p<span class="token punctuation">.</span>authkey  <span class="token comment"># 进程的身份验证键，默认是由os.urandom()随机生成的32字符的字符串</span>    <span class="token triple-quoted-string string">"""    这个键的用途是为涉及网络连接的底层进程间通信提供安全性，这类连接只有在具有相同的身份验证键时才能成功（了解即可）    """</span><span class="token comment"># todo 注意事项</span><span class="token triple-quoted-string string">"""在Windows创建子进程的时候会自动 import 启动它的这个文件，而在 import 的时候又执行了整个文件。因此如果将process()直接写在文件中就会无限递归创建子进程报错，所以必须把创建子进程的部分使用if __name__ ==‘__main__’:    pass判断保护起来，import 的时候，就不会递归运行了。而且不能在交互式的编辑器下面使用，比如：Jupyter 等！"""</span></code></pre></details><blockquote><p>注：<br>1.子进程的执行顺序不是根据启动顺序决定的<br>2.<code>p.terminate()</code>强制关闭进程，但是不会立即关闭，可以通过<code>p.is_alive()</code>查看是否存活<br>3.可以通过<code>p.join()</code>让主进程等到子进程真正结束<br>4.关闭子进程应先 <code>p.terminate()</code> 再 <code>p.join()</code></p></blockquote><p><a id="Process examp"><font color="black"></font></a></p><h4><a id="Process examp"><font color="black">Process类实例</font></a></h4><p></p><ul><li><a id="Process0">使用Process开启一个子进程</a></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">def</span> <span class="token function">sub_process</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"正在运行子进程......"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"子进程PID：</span><span class="token interpolation"><span class="token punctuation">{</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">，父进程PID：</span><span class="token interpolation"><span class="token punctuation">{</span>os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"子进程的参数：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"正在运行主进程......"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"主进程PID：</span><span class="token interpolation"><span class="token punctuation">{</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"准备运行子进程......"</span></span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>        target<span class="token operator">=</span>sub_process<span class="token punctuation">,</span>        args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"开始运行子进程......"</span></span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"主进程等待子进程结束......"</span></span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"子进程运行结束......"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"主进程运行即将结束......"</span></span><span class="token punctuation">)</span></code></pre><ul><li><a id="Process1">继承Process开启一个子进程</a></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">class</span> <span class="token class-name">MyProcess</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""自定义类 继承Process类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> arg1        self<span class="token punctuation">.</span>arg2 <span class="token operator">=</span> arg2    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""必须实现一个run方法，run方法中是在子进程中执行的代码"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"process name:</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, PID:</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>pid<span class="token punctuation">}</span></span><span class="token string">,args:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>arg1<span class="token punctuation">,</span> self<span class="token punctuation">.</span>arg2<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> MyProcess<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><a id="Process2">使用Process守护进程</a></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">def</span> <span class="token function">daemon_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> i_func    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        i_func <span class="token operator">+=</span> <span class="token number">1</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'守护进程还活着</span><span class="token interpolation"><span class="token punctuation">{</span>i_func<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">com_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'普通进程开始......'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'普通进程结束......'</span><span class="token punctuation">)</span>i_func <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p_d <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>daemon_process<span class="token punctuation">)</span>    p_d<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 设置子进程为守护进程</span>    p_d<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p_c <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>com_process<span class="token punctuation">)</span>  <span class="token comment"># 普通进程</span>    p_c<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"普通进程：</span><span class="token interpolation"><span class="token punctuation">{</span>p_c<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">，是否活着：</span><span class="token interpolation"><span class="token punctuation">{</span>p_c<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    p_c<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"普通进程：</span><span class="token interpolation"><span class="token punctuation">{</span>p_c<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">，是否活着：</span><span class="token interpolation"><span class="token punctuation">{</span>p_c<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"准备休眠......"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"休眠结束......"</span><span class="token punctuation">)</span></code></pre><ul><li><a id="Process3">多进程socket聊天并发</a></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token comment"># server</span><span class="token comment"># client</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用多进程实现socket聊天并发-server</span><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Processserver <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">)</span>server<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>SOL_SOCKET<span class="token punctuation">,</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">talk</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            msg<span class="token operator">=</span>conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> msg<span class="token punctuation">:</span><span class="token keyword">break</span>            conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> <span class="token comment">#windows下start进程一定要写到这下面</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        conn<span class="token punctuation">,</span>client_addr<span class="token operator">=</span>server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>talk<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>client_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#client端</span><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>client <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'&gt;&gt;: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> msg<span class="token punctuation">:</span><span class="token keyword">continue</span>     client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    msg <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><hr><h2 id="子进程"><a href="#子进程" class="headerlink" title="子进程"></a>子进程</h2><p><font color="red" size="6">焯！太TM难写了，不写了，自己看博客吧.<br>这么多博客，总有一款适合你。</font><font size="10"><span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></font></p><p><a href="https://www.runoob.com/w3cnote/python3-subprocess.html">subprocess-菜鸟教程</a></p><p><a href="https://docs.python.org/3/library/subprocess.html">subprocess-官方文档</a></p><p><a href="https://www.cnblogs.com/songhaixing/p/14275042.html">subprocess-相关博客-博客园1</a></p><p><a href="https://www.cnblogs.com/-qing-/p/10934322.html">subprocess-相关博客-博客园2</a></p><p><a href="https://www.jb51.net/article/133941.htm">subprocess-相关博客-脚本之家</a></p><p><a href="https://blog.csdn.net/weixin_39059031/article/details/108440342">subprocess-相关博客-CSDN</a></p><p><a href="https://www.jianshu.com/p/430c411160f8">subprocess-相关博客-简书</a></p><h3 id="subprocess-模块"><a href="#subprocess-模块" class="headerlink" title="subprocess 模块"></a><code>subprocess</code> 模块</h3><p><code>subprocess</code>模块，用来创建和管理子进程，并能够与创建的子进程的<code>stdin</code>、<code>stdout</code>、<code>stderr</code>连接通信，获取子进程执行结束后的<font color="orange">返回码</font>，在执行超时或执行错误时得到<font color="orange">异常</font>。</p><p>问题：<br>multiprocessing中，调用p.join()等待子进程执行结束<br>subprocess模块–父进程如何监听子进程结束？<br>两个方法：<br>subprocess.Popen()父进程开启子进程后，不管其是否结束，直接执行下一步；<br>subprocess.Call()父进程一直等待到子进程运行结束，再执行下一步；</p><ul><li>outline<ul><li><strong><a href="#subprocess intro"><code>subprocess</code> 模块介绍</a></strong></li><li><strong><a href="#subprocess examp"><code>subprocess</code> 模块实例</a></strong><ul><li><strong><a href="#subprocess.run"><code>subprocess.run</code> 例子</a></strong></li></ul></li></ul></li></ul><p><a id="subprocess intro"><font color="black"></font></a></p><h4><a id="subprocess intro"><font color="black"><code>subprocess</code> 模块介绍</font></a></h4><p></p><pre class="language-python" data-language="python"><code class="language-python">subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 执行args参数所表示的命令，等待命令执行完毕，返回一个CompletedProcess对象。</span>subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 父进程开启子进程后，不管其是否结束，直接执行下一步；</span>subprocess<span class="token punctuation">.</span>Call<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 不推荐使用，父进程一直等待到子进程运行结束，再执行下一步；</span></code></pre><blockquote><p><code>run</code>函数的底层就是<code>Popen</code>函数。<code>run</code>同步，<code>Popen</code>异步。<br><strong>同步函数</strong>：当一个函数是同步执行时，那么当该函数被调用时<font color="orange">不会立即返回</font>，直到该函数所要做的事情全都做完了才返回。<br><strong>异步函数</strong>：如果一个异步函数被调用时，该函数<font color="orange">会立即返回</font>尽管该函数规定的操作任务还没有完成。</p><blockquote><p><code>call</code>、<code>check_call</code>、<code>check_output</code>、<code>getoutput</code>、<code>getstatusoutput</code>、这些函数，都被<code>run</code>函数代替了，它们在存在只是为了保持向下兼容。</p></blockquote></blockquote><ul><li><code>subprocess</code>的方法、类</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>    args<span class="token punctuation">,</span>                     <span class="token comment"># 通过创建进程而执行的命令及参数</span>    stdin<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>               <span class="token comment"># 指定命令的输入途径</span>    <span class="token builtin">input</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>               <span class="token comment"># 命令的具体输入内容</span>        <span class="token triple-quoted-string string">"""        input与stdin不能同时使用        input默认是一个bytes流        """</span>    stdout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>              <span class="token comment"># 指定命令的输出途径</span>    stderr<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>              <span class="token comment"># 指定命令的error输出途径</span>    capture_output<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>     <span class="token comment"># 是否捕获进程的输出</span>        <span class="token triple-quoted-string string">"""        capture_output=True的效果与设置以下的效果一样。            stdout=PIPE, stderr=PIPE        设置了capture_output=True，就不能再设置stdout和stderr        """</span>    shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>              <span class="token comment"># 是否通过shell来执行命令（Linux下默认为/bin/sh）</span>        <span class="token triple-quoted-string string">"""        shell=False：args只能是一个不带参数的命令字符串，或者是命令和参数组成的一个list        shell=True：args就可以是一个我们常见的命令字符串        """</span>    cwd<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 <span class="token comment"># 指示了当前工作路径</span>    timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>             <span class="token comment"># 设置进程执行的超时时间</span>        <span class="token triple-quoted-string string">"""        如果时间到子进程还未结束，subprocess.TimeoutExpired异常会抛出。        timeout参数的单位：秒        """</span>    check<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>              <span class="token comment"># 检查异常？</span>        <span class="token triple-quoted-string string">"""        如果check=True，        在子进程的返回不为 0 的时候，抛出subprocess.CalledProcessError异常。        这时，run函数返回的CompletedProcess对象的returncode不可用。        """</span>    encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            <span class="token comment"># </span>    errors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>              <span class="token comment"># </span>    text<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                <span class="token comment"># 将stdin，stdout，stderr修改为string模式</span>        <span class="token triple-quoted-string string">"""        stdin，stdout，stderr本来都是字节流bytes        """</span>    env<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 <span class="token comment"># </span>    universal_newlines<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  <span class="token comment"># 同text</span>        <span class="token triple-quoted-string string">"""        这个参数的存在也是为了向下兼容        从Python3.7开始有text参数        而Python3.5和3.6都是universal_newlines参数        因此使用text参数就好了        """</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">subprocess</span><span class="token punctuation">.</span>PopenPopen<span class="token punctuation">(</span>    args<span class="token punctuation">,</span>                     <span class="token comment"># 通过创建进程而执行的命令及参数</span>    bufsize<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>               <span class="token comment"># </span>    executable<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>          <span class="token comment"># </span>    stdin<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>               <span class="token comment"># 指定命令的输入途径</span>    stdout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>              <span class="token comment"># 指定命令的输出途径</span>    stderr<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>              <span class="token comment"># 指定命令的error输出途径</span>    preexec_fn<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>          <span class="token comment"># </span>    close_fds<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>           <span class="token comment"># </span>    shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>              <span class="token comment"># 是否通过shell来执行命令</span>    cwd<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 <span class="token comment"># 指示了当前工作路径</span>    env<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 <span class="token comment"># </span>    universal_newlines<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  <span class="token comment"># 同text</span>    startupinfo<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>         <span class="token comment"># </span>    creationflags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>          <span class="token comment"># </span>    restore_signals<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>     <span class="token comment"># </span>    start_new_session<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment"># </span>    pass_fds<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment"># </span>    encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            <span class="token comment"># </span>    errors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>              <span class="token comment"># </span>    text<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                <span class="token comment"># 将stdin，stdout，stderr修改为string模式</span><span class="token punctuation">)</span></code></pre><ul><li><code>subprocess.Popen</code>的方法</li></ul><pre class="language-python" data-language="python"><code class="language-python">proc <span class="token operator">=</span> Popen<span class="token punctuation">(</span>args<span class="token punctuation">)</span>                 <span class="token comment"># </span>out<span class="token punctuation">,</span> err <span class="token operator">=</span> proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span>bstr<span class="token punctuation">)</span>  <span class="token comment"># </span>returncode <span class="token operator">=</span> proc<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>    <span class="token comment"># </span></code></pre><details><summary>nothing</summary></details><p><a id="subprocess examp"><font color="black"></font></a></p><h4><a id="subprocess examp"><font color="black"><code>subprocess</code> 模块实例</font></a></h4><p></p><ul><li><a id="subprocess.run"><code>subprocess.run</code> 例子</a></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># todo run args:str、shell</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> proc <span class="token operator">=</span> run<span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>······<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> proc<span class="token punctuation">.</span>args<span class="token string">'dir'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> proc<span class="token punctuation">.</span>returncode<span class="token number">0</span><span class="token comment"># todo run args:list、shell</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p <span class="token operator">=</span> run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"ipconfig"</span><span class="token punctuation">,</span> <span class="token string">"/all"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>······<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> proc<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">"ipconfig"</span><span class="token punctuation">,</span> <span class="token string">"/all"</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> proc<span class="token punctuation">.</span>returncode<span class="token number">0</span></code></pre><hr><h2 id="一些非常有用的函数"><a href="#一些非常有用的函数" class="headerlink" title="一些非常有用的函数"></a>一些非常有用的函数</h2><h3 id="multiprocessing-freeze-support-函数"><a href="#multiprocessing-freeze-support-函数" class="headerlink" title="multiprocessing.freeze_support() 函数"></a><code>multiprocessing.freeze_support()</code> 函数</h3><ul><li>outline<ul><li><strong><a href="#freeze_support intro"><code>freeze_support()</code> 函数介绍</a></strong></li><li><strong><a href="#freeze_support examp"><code>freeze_support()</code> 函数实例</a></strong></li></ul></li></ul><p><a id="freeze_support intro"><font color="black"></font></a></p><h4><a id="freeze_support intro"><font color="black"><code>freeze_support()</code> 函数介绍</font></a></h4><p></p><ul><li>为什么要有<code>freeze_support()</code>？</li></ul><p>官方解释：<a href="https://docs.python.org/3.8/library/multiprocessing.html?highlight=freeze_support#multiprocessing.freeze_support">multiprocessing.freeze_support()¶</a><br>　　当使用<code>multiprocessing</code>的程序被冻结以生成Windows可执行文件时，添加对该程序的支持。（已使用<code>Py2Exe</code>、<code>PyInstaller</code>和<code>cx_Freeze</code>进行了测试。）<br>个人理解：参考：<a href="https://blog.csdn.net/Owen_goodman/article/details/115521388">multiprocessing.freeze_support()介绍</a><br>　　Python多进程<code>multiprocessing</code>在 Windows 的 Dos 或者 idle 下运行不了会报错，打包成.exe双击之后会一直打开exe，导致内存占满（至于为什么会造成内存溢出，暂时不得而知，后面还需要再研究一下），在 PyCharm 下运行也不会有问题，在 Linux 下没有问题。为了解决这个 bug，python3.8 添加了这个函数。</p><p><font color="orange">简单来说就是，本来之前把使用<code>multiprocessing</code>的程序打包成.exe文件有 bug，但是现在只要在<code>main</code>入口下添加<code>multiprocessing.freeze_support()</code>就可以解决这个 bug 了。</font></p><ul><li>关于<code>freeze_support()</code>，再多说几句</li></ul><ol><li>如果没有调用 <code>freeze_support()</code> 在尝试运行被冻结的可执行文件时会抛出 <code>RuntimeError</code> 异常。</li><li>对 <code>freeze_support()</code> 的调用在非 Windows 平台上是无效的。如果该模块在 Windows 平台的 Python 解释器中正常运行 (该程序没有被冻结)， 调用<code>freeze_support()</code> 也是无效的。</li><li>如果程序将正常运行而不是冻结，则可以省略 <code>freeze_support()</code>。</li><li>总的来说，不管怎样最好加上 <code>freeze_support()</code>。</li></ol><p><code>freeze_support()</code>源代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">freeze_support</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    Run code for process object if this in not the main process    '''</span>    <span class="token keyword">if</span> is_forking<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>        kwds <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> arg <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            name<span class="token punctuation">,</span> value <span class="token operator">=</span> arg<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token string">'None'</span><span class="token punctuation">:</span>                kwds<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                kwds<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        spawn_main<span class="token punctuation">(</span><span class="token operator">**</span>kwds<span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><a id="freeze_support examp"><font color="black"></font></a></p><h4><a id="freeze_support examp"><font color="black"><code>freeze_support()</code> 函数实例</font></a></h4><p></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> freeze_support<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    freeze_support<span class="token punctuation">(</span><span class="token punctuation">)</span>    Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h2><h3 id="multiprocess-Lock-类"><a href="#multiprocess-Lock-类" class="headerlink" title="multiprocess.Lock 类"></a><code>multiprocess.Lock</code> 类</h3><h3 id="multiprocess-Semaphore-类"><a href="#multiprocess-Semaphore-类" class="headerlink" title="multiprocess.Semaphore 类"></a><code>multiprocess.Semaphore</code> 类</h3><h3 id="multiprocess-Event-类"><a href="#multiprocess-Event-类" class="headerlink" title="multiprocess.Event 类"></a><code>multiprocess.Event</code> 类</h3><hr><h2 id="进程间的通信模式"><a href="#进程间的通信模式" class="headerlink" title="进程间的通信模式"></a>进程间的通信模式</h2><p>进程间的通信模式 IPC (Inter-Process Communication)</p><h3 id="multiprocessing-Pipe-方法"><a href="#multiprocessing-Pipe-方法" class="headerlink" title="multiprocessing.Pipe 方法"></a><code>multiprocessing.Pipe</code> 方法</h3><ul><li>outline<ul><li><strong><a href="#Pipe intro">Pipe方法介绍</a></strong></li><li><strong><a href="#Pipe examp">Pipe方法实例</a></strong><ul><li><strong><a href="#Pipe0">Pipe两个进程间通信</a></strong></li></ul></li></ul></li></ul><p><a id="Pipe intro"><font color="black"></font></a></p><h4><a id="Pipe intro"><font color="black">Pipe方法介绍</font></a></h4><p></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Pipe</span><span class="token punctuation">(</span>duplex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 通信模式</span>    <span class="token keyword">return</span> conn1<span class="token punctuation">,</span> conn2  <span class="token comment"># 返回一个管道的两端</span></code></pre><blockquote><p><code>duplex=True</code>：全双工模式（默认），双方均可收发<br><code>duplex=False</code>：conn1只接收，conn2只发送</p></blockquote><details><summary>Pipe方法(略)</summary><pre class="language-python" data-language="python"><code class="language-python">pipe <span class="token operator">=</span> Pipe<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment"># </span>pipe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>recv<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>                       <span class="token comment"># 接收</span>pipe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>                       <span class="token comment"># 发送</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment"># </span>conn<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment"># </span>conn<span class="token punctuation">.</span>poll<span class="token punctuation">(</span><span class="token punctuation">[</span>timeout<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token comment"># </span>conn<span class="token punctuation">.</span>recv_bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>maxlength<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment"># </span>conn<span class="token punctuation">.</span>send_bytes<span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> size<span class="token punctuation">)</span>   <span class="token comment"># </span>conn<span class="token punctuation">.</span>recv_bytes_into<span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">,</span> offset<span class="token punctuation">)</span>    <span class="token comment"># </span></code></pre></details><details><summary>Pipe方法(详)</summary><pre class="language-python" data-language="python"><code class="language-python">pipe <span class="token operator">=</span> Pipe<span class="token punctuation">(</span><span class="token punctuation">)</span>pipe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>recv<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>  <span class="token comment"># 接收</span>pipe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>  <span class="token comment"># 发送</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    关闭连接，如果conn被垃圾回收，将自动调用此方法    """</span>conn<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    返回连接使用的整数文件描述符    """</span>conn<span class="token punctuation">.</span>poll<span class="token punctuation">(</span><span class="token punctuation">[</span>timeout<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    如果连接上的数据可用，返回True。    timeout指定等待的最长时限。    如果省略此参数，方法将立即返回结果。    如果将timeout射成None，操作将无限期地等待数据到达。    """</span>conn<span class="token punctuation">.</span>recv_bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>maxlength<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    接收 conn.send_bytes() 方法发送的一条完整的字节消息。    maxlength指定要接收的最大字节数。    如果进入的消息，超过了这个最大值，将引发IOError异常，并且在连接上无法进行进一步读取。    如果连接的另外一端已经关闭，再也不存在任何数据，将引发EOFError异常。    """</span>conn<span class="token punctuation">.</span>send_bytes<span class="token punctuation">(</span><span class="token builtin">buffer</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> offset <span class="token punctuation">[</span><span class="token punctuation">,</span> size<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    通过连接发送字节数据缓冲区，    buffer是支持缓冲区接口的任意对象，    offset是缓冲区中的字节偏移量，    size是要发送字节数。    结果数据以单条消息的形式发出，    然后调用 conn.recv_bytes() 函数进行接收    """</span>conn<span class="token punctuation">.</span>recv_bytes_into<span class="token punctuation">(</span><span class="token builtin">buffer</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> offset<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    接收一条完整的字节消息，并把它保存在buffer对象中，    该对象支持可写入的缓冲区接口（即bytearray对象或类似的对象）。    offset指定缓冲区中放置消息处的字节位移。    返回值是收到的字节数。    如果消息长度大于可用的缓冲区空间，将引发BufferTooShort异常。    """</span></code></pre></details><blockquote><p>注：<br>1.Pipe 的读写效率要高于 Queue<br>2.如果没有消息可接收，<code>conn.recv()</code>方法会一直阻塞。<br>3.如果管道已经被关闭，<code>conn.recv()</code>方法会抛出<code>EOFError</code>。<br>4.<code>conn.close()</code>并未关闭通道，只是把状态改为不可再插入元素的状态<br>5.Pipe是通过 socket 进行进程间通信的</p></blockquote><p><a id="Pipe examp"><font color="black"></font></a></p><h4><a id="Pipe examp"><font color="black">Pipe方法实例</font></a></h4><p></p><ul><li><a id="Pipe0">Pipe两个进程间通信</a></li></ul><p>pipe实现生产者和消费者一对一模型</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token punctuation">,</span> random<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Pipe<span class="token keyword">def</span> <span class="token function">producer</span><span class="token punctuation">(</span>pipe<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> product <span class="token keyword">in</span> products<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'生产者发送:{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span>        pipe<span class="token punctuation">.</span>send<span class="token punctuation">(</span>product<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>pipe<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            item <span class="token operator">=</span> pipe<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'消费者接收:{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> EOFError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'生产者跑路了'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>products <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pipe <span class="token operator">=</span> Pipe<span class="token punctuation">(</span>duplex<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    process_producer <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>producer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>pipe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>    process_consumer <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>consumer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>pipe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>    process_producer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    process_consumer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    pipe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pipe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    process_producer<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    process_consumer<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>注：<br>1.若双方都没有使用管道的某个端点，就应该关闭管道<br>2.若一方关闭了端点，相应的另一端必须关闭其端点<br>3.应先关闭通道两端<code>pipe.close()</code>再关闭进程<code>proc.terminate()</code>再等待进程结束<code>proc.join()</code></p></blockquote><hr><h3 id="multiprocessing-Queue-类"><a href="#multiprocessing-Queue-类" class="headerlink" title="multiprocessing.Queue 类"></a><code>multiprocessing.Queue</code> 类</h3><ul><li>outline<ul><li><strong><a href="#Queue intro">Queue类介绍</a></strong></li><li><strong><a href="#Queue examp">Queue类实例</a></strong><ul><li><strong><a href="#Queue0">Queue多个进程间通信</a></strong></li></ul></li></ul></li></ul><p><a id="Queue intro"><font color="black"></font></a></p><h4><a id="Queue intro"><font color="black">Queue类介绍</font></a></h4><p></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># todo 参数</span><span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">{</span>maxsize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span>  <span class="token comment"># 队列中允许的最大项数，忽略/默认无大小限制</span></code></pre><details><summary>Queue类方法(略)</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># todo 方法</span>q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 队列实例化</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span>block<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>        <span class="token comment"># 数据出队，阻塞</span>q<span class="token punctuation">.</span>get_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment"># 数据出队，非阻塞</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>item<span class="token punctuation">,</span> block<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>  <span class="token comment"># 数据入队，阻塞</span>q<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment"># 数据入队，非阻塞</span>q<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment"># 队列大小</span>q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment"># 队列判空</span>q<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment"># 队列判满</span>q<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment"># 关闭队列</span>q<span class="token punctuation">.</span>cancel_join_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># 取消队列连接后台线程</span>q<span class="token punctuation">.</span>join_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment"># 队列连接后台线程</span></code></pre></details><details><summary>Queue类方法(详)</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># todo 方法</span>q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span> <span class="token punctuation">[</span> block <span class="token punctuation">[</span> <span class="token punctuation">,</span>timeout <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    返回q中的一个项目。    如果q为空，此方法将阻塞，直到队列中有项目可用为止。    block用于控制阻塞行为，默认为True。    如果设置为False，将引发Queue.Empty异常（定义在Queue模块中）。    timeout是可选超时时间，用在阻塞模式中。    如果在制定的时间间隔内没有项目变为可用，将引发Queue.Empty异常。    """</span>q<span class="token punctuation">.</span>get_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    同q.get(False)方法。    """</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>item <span class="token punctuation">[</span><span class="token punctuation">,</span> block <span class="token punctuation">[</span><span class="token punctuation">,</span>timeout <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    将item放入队列。    如果队列已满，此方法将阻塞至有空间可用为止。    block控制阻塞行为，默认为True。    如果设置为False，将引发Queue.Empty异常（定义在Queue库模块中）。    timeout指定在阻塞模式中等待可用空间的时间长短。    超时后将引发Queue.Full异常。    """</span>q<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    同q.get(False)方法。    """</span>q<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    返回队列中目前项目的正确数量。    此函数的结果并不可靠，    因为在返回结果和在稍后程序中使用结果之间，    队列中可能添加或删除了项目。    在某些系统上，此方法可能引发NotImplementedError异常。    """</span>q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    如果调用此方法时 q为空，返回True。    如果其他进程或线程正在往队列中添加项目，结果是不可靠的。    也就是说，在返回和使用结果之间，队列中可能已经加入新的项目。    """</span>q<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    如果q已满，返回为True。    由于线程的存在，结果也可能是不可靠的（参考q.empty（）方法）。    """</span>q<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    关闭队列，防止队列中加入更多数据。    调用此方法时，后台线程将继续写入那些已入队列但尚未写入的数据，    但将在此方法完成时马上关闭。    如果q被垃圾收集，将自动调用此方法。    关闭队列不会在队列使用者中生成任何类型的数据结束信号或异常。    例如，如果某个使用者正被阻塞在get（）操作上，    关闭生产者中的队列不会导致get（）方法返回错误。    """</span>q<span class="token punctuation">.</span>cancel_join_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    不会再进程退出时自动连接后台线程。    这可以防止join_thread()方法阻塞。    """</span>q<span class="token punctuation">.</span>join_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    连接队列的后台线程。    此方法用于在调用q.close()方法后，    等待所有队列项被消耗。    默认情况下，此方法由不是q的原始创建者的所有进程调用。    调用q.cancel_join_thread()方法可以禁止这种行为。    """</span></code></pre></details><!-- <br/> --><blockquote><p>注：<br>1.底层队列使用管道和锁定实现<br>2.<code>q.put()</code>和<code>q.get()</code>是两个阻塞方法<br>3.<code>q.put_nowait()</code>和<code>q.get_nowait()</code>是两个非阻塞方法，故一定要做异常处理！！！<br>4.两个进程的 Queue 并不是同一个，而是将数据 pickle 后传给另一个进程的 Queue<br>5.Queue用于父进程与子进程之间的通信或同一父进程的子进程之间通信</p></blockquote><p><a id="Queue examp"><font color="black"></font></a></p><h4><a id="Queue examp"><font color="black">Queue类实例</font></a></h4><p></p><ul><li><a id="Queue0">Queue多个进程间通信</a></li></ul><p>Queue实现一方发送多方接收</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token punctuation">,</span> random<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Queue<span class="token keyword">def</span> <span class="token function">proc_put</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> data<span class="token punctuation">,</span> proc_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> dat <span class="token keyword">in</span> data<span class="token punctuation">:</span>  <span class="token comment"># 数据发送完就跳出</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            q<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span>dat<span class="token punctuation">)</span>  <span class="token comment"># 数据入队</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>proc_name<span class="token punctuation">}</span></span><span class="token string">方发送数据</span><span class="token interpolation"><span class="token punctuation">{</span>dat<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"队列满了！"</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">proc_get</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> proc_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> q<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 数据接收完(没有数据)就跳出</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            dat <span class="token operator">=</span> q<span class="token punctuation">.</span>get_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 数据出队</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>proc_name<span class="token punctuation">}</span></span><span class="token string">方接收数据</span><span class="token interpolation"><span class="token punctuation">{</span>dat<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"队列空了！"</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    proc_send1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>proc_put<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token string">"process send1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    proc_recv1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>proc_get<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token string">"process recv1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    proc_recv2 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>proc_get<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token string">"process recv2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    proc_send1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc_recv1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc_recv2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc_send1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc_recv1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc_recv2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h3 id="multiprocessing-JoinableQueue-类"><a href="#multiprocessing-JoinableQueue-类" class="headerlink" title="multiprocessing.JoinableQueue 类"></a><code>multiprocessing.JoinableQueue</code> 类</h3><p>可连接的共享进程队列</p><ul><li>outline<ul><li><strong><a href="#JQ intro">JoinableQueue类介绍</a></strong></li><li><strong><a href="#JQ examp">JoinableQueue类实例</a></strong></li></ul></li></ul><p><a id="JQ intro"><font color="black"></font></a></p><h4><a id="JQ intro"><font color="black">JoinableQueue类介绍</font></a></h4><p></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">JoinableQueue</span><span class="token punctuation">{</span>maxsize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span>  <span class="token comment"># 队列中允许的最大项数，忽略/默认无大小限制</span></code></pre><p><font color="grey">JoinableQueue的实例p除了与Queue对象相同的方法之外，还具有以下方法</font></p><details><summary>JoinableQueue类方法(略)</summary><pre class="language-python" data-language="python"><code class="language-python">q<span class="token punctuation">.</span>task_done<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 发出信号表示q.get()返回的项目已经被处理</span>q<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># 阻塞直到队列所有项目被处理为止，即所有项目被调用q.task_done()为止</span></code></pre><p><font>说白了，<code>q.task_done()</code>就是告诉 os 已经完成这一次的<code>q.get()</code>了，<code>q.join()</code>告诉 os：Queue已经取完、没有元素了，并且等待结束。</font></p></details><details><summary>JoinableQueue类方法(详)</summary><pre class="language-python" data-language="python"><code class="language-python">q<span class="token punctuation">.</span>task_done<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    使用者使用此方法发出信号，表示q.get()返回的项目已经被处理。    如果调用此方法的次数大于从队列中删除的项目数量，将引发ValueError异常。    """</span>q<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    生产者将使用此方法进行阻塞，直到队列中所有项目均被处理。    阻塞将持续到为队列中的每个项目均调用q.task_done()方法为止。     """</span></code></pre></details><p><a id="JQ examp"><font color="black"></font></a></p><h4><a id="JQ examp"><font color="black">JoinableQueue类实例</font></a></h4><p></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token punctuation">,</span> random<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> JoinableQueue<span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        food <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s吃了一个%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">)</span>        q<span class="token punctuation">.</span>task_done<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 通知队列已经有一个数据被处理了</span><span class="token keyword">def</span> <span class="token function">producer</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> name<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s生产了%s%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> food<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>food <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> JoinableQueue<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc_con <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>consumer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token string">'con'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    proc_prod <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>producer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token string">'pro'</span><span class="token punctuation">,</span> <span class="token string">'馒头'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    proc_con<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 设置守护进程，否则永远运行，join()也没用</span>    proc_con<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc_prod<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># proc_con.join()        # 不要使用join()，否则永远运行</span>    proc_prod<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 生产者要先把所有的数据都放到队列中</span>    q<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment"># 阻塞直到放入队列中所有的数据都被处理掉(有多少个数据就接收到了多少task_done)</span></code></pre><hr><h2 id="进程间的数据共享"><a href="#进程间的数据共享" class="headerlink" title="进程间的数据共享"></a>进程间的数据共享</h2><h3 id="multiprocessing-Value-方法"><a href="#multiprocessing-Value-方法" class="headerlink" title="multiprocessing.Value 方法"></a><code>multiprocessing.Value</code> 方法</h3><h3 id="multiprocessing-Array-方法"><a href="#multiprocessing-Array-方法" class="headerlink" title="multiprocessing.Array 方法"></a><code>multiprocessing.Array</code> 方法</h3><p><code>Value</code>和<code>Array</code>差不多（<code>Value</code>和<code>Array</code>分别相当于数和数组），就放在一起了，它们都是将数据存储在<font color="red">共享内存</font>映射中。</p><p>在进行并发编程时，通常最好尽量避免使用共享状态。使用多个进程时尤其如此。但是，如果你真的需要使用一些共享数据，那么 <code>multiprocessing</code>提供了两种方法：<code>Value</code>和<code>Array</code>。</p><blockquote><p><code>Value</code>和<code>Array</code>是<font color="red">线程不安全</font>的，所以以下内容了解即可，因此建议使用线程安全的<code>Manager().Value</code>和<code>Manager().Array</code>。</p></blockquote><ul><li>outline<ul><li><strong><a href="#VA intro"><code>Value</code>和<code>Array</code>方法介绍</a></strong></li><li><strong><a href="#VA examp"><code>Value</code>和<code>Array</code>方法实例</a></strong></li></ul></li></ul><p><a id="VA intro"><font color="black"></font></a></p><h4><a id="VA intro"><font color="black"><code>Value</code>和<code>Array</code>方法介绍</font></a></h4><p></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Value</span><span class="token punctuation">(</span>typecode_or_type<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> lock<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Array</span><span class="token punctuation">(</span>typecode_or_type<span class="token punctuation">,</span> size_or_initializer<span class="token punctuation">,</span> lock<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    参数：        typecode_or_type：返回 ctypes 对象的类型        *args：传递给 ctypes 的构造参数        size_or_initializer：数组的长度或者初始化数组的序列        lock：是否加锁    返回：        以上方法返回从共享内存中分配的一个 ctypes 对象    说明：        1.size_or_initializer：如果它是一个整数，那么它确定数组的长度，并且数组将被初始化为零。        否则，size_or_initializer是用于初始化数组的序列，其长度决定数组的长度。                2. ctypes 是 Python 的一个外部函数库，它提供了和C语言兼任的数据类型，        可以调用 DLLs 或者共享库的函数，能被用作在 python 中包裹这些库。    例如：        i = Value('i', 1)        d = Value('d', 1)        c = Value('c', '0')    """</span></code></pre><p><code>'d'</code>和<code>'i'</code>参数是<code>array</code>模块使用的类型的<code>typecode</code>。<code>'d'</code>表示双精度浮点数，<code>'i'</code>表示有符号整数。<font color="red">这些共享对象将是进程和线程安全的。</font></p><p>为了更灵活地使用共享内存，可以使用<code>multiprocessing.sharedctypes</code>模块，该模块支持创建从共享内存分配的任意ctypes对象。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># todo Value属性</span>v <span class="token operator">=</span> Value<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span>value</code></pre><ul><li><strong>共享整数或者单个字符</strong></li></ul><p>共享整数或者单个字符的初始化比较简单，可以直接在下面的<font color="red">code映射表</font>找到对应关系。</p><img src="/2022/03/09/python-jin-cheng/python进程-Value-Type_code.png" width="800"><p><code>Value</code>初始化整数、字符例子：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Valuei <span class="token operator">=</span> Value<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>c <span class="token operator">=</span> Value<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></code></pre><ul><li><strong>共享字符串</strong></li></ul><p>如果共享的是字符串，则在上表是找不到映射关系的，就是没有code可用。所以我们需要使用原始的ctype类型：<font color="red">ctype类型对应表</font>。</p><img src="/2022/03/09/python-jin-cheng/python进程-Value-ctypes_type.png" width="830"><p><code>Value</code>初始化字符串例子：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> c_char_p<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Value<span class="token punctuation">,</span> Manager<span class="token comment"># ss = Value(c_char_p, 'hello')  # 这里在我的环境会报错，使用下面的Manager则不会</span>ss <span class="token operator">=</span> Manager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">(</span>ctypes<span class="token punctuation">.</span>c_char_p<span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span></code></pre><p><a id="VA intro"><font color="black"></font></a></p><h4><a id="VA intro"><font color="black"><code>Value</code>和<code>Array</code>方法实例</font></a></h4><p></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Value<span class="token punctuation">,</span> Array<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">3.1415927</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> Value<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span>    arr <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><hr><h3 id="multiprocessing-Manager-方法"><a href="#multiprocessing-Manager-方法" class="headerlink" title="multiprocessing.Manager 方法"></a><code>multiprocessing.Manager</code> 方法</h3><p><code>Manager</code>是通过共享进程的方式<font color="red">共享数据</font>。<font color="grey">简单来说就是，虽然进程间的数据不共享，但是一个进程可以通过<code>Manager</code>修改其他进程的数据。</font></p><p><code>Manager</code>管理的共享数据类型有：<code>Value</code>、<code>Array</code>、<code>dict</code>、<code>list</code>、<code>Lock</code>、<code>Semaphore</code>等等，同时<code>Manager</code>还可以共享类的实例对象。</p><p><code>Manager</code>不需要加锁，因为<code>Manager</code>已经默认给你加锁了。</p><ul><li>outline<ul><li><strong><a href="#Manager intro"><code>Manager</code>方法介绍</a></strong></li><li><strong><a href="#Manager examp"><code>Manager</code>方法实例</a></strong></li></ul></li></ul><p><a id="Manager intro"><font color="black"></font></a></p><h4><a id="Manager intro"><font color="black">Manager方法介绍</font></a></h4><p></p><pre class="language-python" data-language="python"><code class="language-python">manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 实例化Manager对象</span>manager<span class="token punctuation">.</span>Value<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># </span>manager<span class="token punctuation">.</span>Array<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># </span>manager<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># </span>manager<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># </span>manager<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># </span>manager<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># </span></code></pre><p><a id="Manager examp"><font color="black"></font></a></p><h4><a id="Manager examp"><font color="black">Manager方法实例</font></a></h4><p></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Manager<span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>shareList<span class="token punctuation">,</span> shareValue<span class="token punctuation">,</span> shareDict<span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> lock<span class="token punctuation">:</span>        shareValue<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>        shareDict<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span>        shareDict<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>shareList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            shareList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>    list1   <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    value1  <span class="token operator">=</span> manager<span class="token punctuation">.</span>Value<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    dict1   <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    lock1   <span class="token operator">=</span> manager<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    proc <span class="token operator">=</span> <span class="token punctuation">[</span>        Process<span class="token punctuation">(</span>            target<span class="token operator">=</span>func1<span class="token punctuation">,</span>            args<span class="token operator">=</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> value1<span class="token punctuation">,</span> dict1<span class="token punctuation">,</span> lock1<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> proc<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> proc<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span>    array1 <span class="token operator">=</span> manager<span class="token punctuation">.</span>Array<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">21</span>, <span class="token number">22</span>, <span class="token number">23</span>, <span class="token number">24</span>, <span class="token number">25</span><span class="token punctuation">]</span>Value<span class="token punctuation">(</span><span class="token string">'i'</span>, <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span>: <span class="token string">'1'</span>, <span class="token number">2</span>: <span class="token string">'2'</span><span class="token punctuation">}</span>array<span class="token punctuation">(</span><span class="token string">'i'</span>, <span class="token punctuation">[</span><span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span>, <span class="token number">5</span>, <span class="token number">6</span>, <span class="token number">7</span>, <span class="token number">8</span>, <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><hr><h2 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h2><h3 id="multiprocessing-Pool-方法"><a href="#multiprocessing-Pool-方法" class="headerlink" title="multiprocessing.Pool 方法"></a><code>multiprocessing.Pool</code> 方法</h3><ul><li>outline<ul><li><strong><a href="#Pool intro">Pool方法介绍</a></strong></li><li><strong><a href="#Pool examp">Pool方法实例</a></strong><ul><li><strong><a href="#Pool0">使用多线程-应用apply</a></strong></li><li><strong><a href="#Pool1">使用多线程-映射map</a></strong></li></ul></li></ul></li></ul><p><a id="Pool intro"><font color="black"></font></a></p><h4><a id="Pool intro"><font color="black">Pool方法介绍</font></a></h4><p></p><p>Pool可以提供指定数量的进程，供用户调用，当有新的请求提交到Pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来它。</p><details><summary>Pool方法(略)</summary><pre class="language-python" data-language="python"><code class="language-python">p<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwds<span class="token punctuation">)</span>                  <span class="token comment"># 阻塞</span>p<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>func<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwds<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>  <span class="token comment"># 非阻塞</span>p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token comment"># 关闭pool</span>p<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>                              <span class="token comment"># 结束工作进程</span>p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>                                   <span class="token comment"># 主进程阻塞，等待子进程的退出</span></code></pre></details><details><summary>Pool方法(详)</summary><pre class="language-python" data-language="python"><code class="language-python">p<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwds<span class="token punctuation">)</span>                  <span class="token comment"># 阻塞</span>p<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>func<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwds<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>  <span class="token comment"># 异步非阻塞</span>p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token comment"># 关闭pool，不再接受新的任务</span>p<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>                              <span class="token comment"># 结束工作进程，不再处理未完成的任务</span>p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>                                   <span class="token comment"># 主进程阻塞，等待子进程的退出</span><span class="token number">1</span> 方法apply_async<span class="token punctuation">(</span><span class="token punctuation">)</span>和map_async<span class="token punctuation">(</span><span class="token punctuation">)</span>的返回值是AsyncResul的实例obj。实例具有以下方法<span class="token number">2</span> obj<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>返回结果，如果有必要则等待结果到达。timeout是可选的。如果在指定时间内还没有到达，将引发一场。如果远程操作中引发了异常，它将在调用此方法时再次被引发。<span class="token number">3</span> obj<span class="token punctuation">.</span>ready<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>如果调用完成，返回<span class="token boolean">True</span><span class="token number">4</span> obj<span class="token punctuation">.</span>successful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>如果调用完成且没有引发异常，返回<span class="token boolean">True</span>，如果在结果就绪之前调用此方法，引发异常<span class="token number">5</span> obj<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">[</span>timeout<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>等待结果变为可用。<span class="token number">6</span> obj<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>：立即终止所有工作进程，同时不执行任何清理或结束任何挂起工作。如果p被垃圾回收，将自动调用此函数</code></pre></details><p><a id="Pool examp"><font color="black"></font></a></p><h4><a id="Pool examp"><font color="black">Pool方法实例</font></a></h4><p></p><ul><li><a id="Pool0">使用多线程-应用apply</a></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"msg: "</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"func end"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        msg <span class="token operator">=</span> <span class="token string">"hello world{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment"># pool.apply(func=func, args=(msg, ))        # 阻塞！</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>func<span class="token operator">=</span>func<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 非阻塞！</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"close......"</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"done......"</span><span class="token punctuation">)</span></code></pre><blockquote><p>注：<br>1.调用join之前，先调用close或者函数terminate，否则会出错<br>2.执行完close后不会有新的进程加入到pool,join函数等待所有子进程结</p></blockquote><ul><li><a id="Pool1">使用多线程-映射map</a></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'num:%d; PID:%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> num<span class="token operator">**</span><span class="token number">2</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 阻塞</span>    <span class="token comment"># p.map_async(task, range(20))  # 异步非阻塞</span></code></pre><blockquote><p><code>map()</code>和<code>map_async()</code>参数为迭代器类型</p></blockquote><hr><h2 id="分布式进程"><a href="#分布式进程" class="headerlink" title="分布式进程"></a>分布式进程</h2><p>分布式进程：将Process进程分布到多台机器上，充分利用多态机器的性能完成复杂的任务。通常会有一个服务进程作为调度者，将任务分布到其他多个进程中，依靠网络通信进行管理。</p><p>举个例子：使用多进程做爬虫程序时，一般会有两个进程。一个进程负责抓取链接地址，将链接地址放到queue中；另一个进程负责从queue中取链接地址进行下载和存储到本地。其中，queue需要暴露到进程通信的网络中。</p><p>创建分布式进程的<font color="red">大致步骤</font>（具体需求不同会有差异）：</p><ul><li><strong>STEP1</strong>：实例化Queue对象</li></ul><p>得有个队列Queue来存储任务/数据，用于不同进程的通信。<br><font color="orange">代码</font>：<code>queue = queue.Queue()</code></p><ul><li><strong>STEP2</strong>：注册Queue对象</li></ul><p>在实例化Queue对象后，还需要把Queue对象暴露在通信网络中才能使用。服务端需要注册对象及其方法，而客户端 只需要注册方法，不需要注册对象。<br><font color="orange">代码</font>：<br>服务端：<code>BaseManager.register("get_queue", callable=lambda: queue)</code><br>客户端：<code>BaseManager.register("get_queue")</code></p><ul><li><strong>STEP3</strong>：实例化Manager对象</li></ul><p>为了实现不同进程/主机间的通信，得绑定地址、端口和验证口令。<br><font color="orange">代码</font>：<code>manager = BaseManager(address=('127.0.0.1', 8001), authkey=b'pwword')</code></p><ul><li><strong>STEP3.5</strong>：冻结支持</li></ul><p>由于python在使用Manager时会出现一些 bug，需要在<code>mari()</code>里面使用冻结支持函数，之后才能正常进行开启服务、连接服务等操作。（上面有讲，忘记的话可以翻上去看一下）<br><font color="orange">代码</font>：<code>freeze_support()</code></p><ul><li><strong>STEP4</strong>：服务端开启，客户端连接</li></ul><p>服务器开启服务 或者 启动管理、监听信道；客户端连接服务端。<br><font color="orange">代码</font>：</p><ol><li>服务器启动管理：<code>manager.start()</code></li><li>服务器开启服务：<br>　　先获取服务器对象<code>server = manager.get_server()</code><br>　　　　　　　　然后永久开启服务：<code>server.serve_forever()</code></li><li>客户端连接服务端：<code>manager.connect()</code></li></ol><ul><li><strong>STEP5</strong>：从Manager对象获得Queue对象</li></ul><p>从Manager获取Queue，用于分配、执行任务<br><font color="orange">代码</font>：<code>queue = manager.get_queue()</code></p><ul><li><strong>STEP6</strong>：分配、执行任务</li></ul><p>一方(不一定是服务器)分配任务，另一方执行任务。<br><font color="orange">代码</font>：<br>分配：<code>queue.put(task)</code><br>执行：<code>queue.get()</code></p><ul><li><strong>STEP7</strong>：结束任务</li></ul><p>如果服务端使用永久开启服务(<strong>STEP4</strong>中的2.)，那么就不需要结束任务，否则就要结束任务进程。<br><font color="orange">代码</font>：<code>manager.shutdown()</code></p><details><summary>关于分布式进程中的队列Queue一些话</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""注意，当我们在一台机器上写多进程程序时，创建的Queue可以直接拿来用，但是，在分布式多进程环境下，添加任务到Queue不可以直接对原始的task_queue进行操作，那样就绕过了QueueManager的封装，必须通过manager.get_task_queue()获得的Queue接口添加。任务进程要通过网络连接到服务进程，所以要指定服务进程的IP先启动task_master.py服务进程task_master.py进程发送完任务后，开始等待result队列的结果。再启动task_worker.py进程task_worker.py进程结束，在task_master.py进程中会继续打印出结果Queue对象存储在哪？注意到task_worker.py中根本没有创建Queue的代码，所以，Queue对象存储在task_master.py进程中，即server而Queue之所以能通过网络访问，就是通过QueueManager实现的。由于QueueManager管理的不止一个Queue，所以，要给每个Queue的网络调用接口起个名字，比如get_task_queue。authkey有什么用？这是为了保证两台机器正常通信，不被其他机器恶意干扰。如果task_worker.py的authkey和task_master.py的authkey不一致，肯定连接不上。"""</span></code></pre></details><h3 id="multiprocessing-managers-模块"><a href="#multiprocessing-managers-模块" class="headerlink" title="multiprocessing.managers 模块"></a><code>multiprocessing.managers</code> 模块</h3><ul><li>outline<ul><li><strong><a href="#managers intro">managers类介绍</a></strong></li><li><strong><a href="#managers examp">managers类实例</a></strong><ul><li><strong><a href="#managers1">managers示例1：使用BaseManager进行分布式进程任务（共三方参与）</a></strong></li><li><strong><a href="#managers2">managers示例2：使用BaseManager进行分布式进程任务（共两方参与）</a></strong></li><li><strong><a href="#managers3">managers示例3：使用BaseManager进行分布式进程任务（一对多）</a></strong></li></ul></li></ul></li></ul><p><a id="managers intro"><font color="black"></font></a></p><h4><a id="managers intro"><font color="black">managers类介绍</font></a></h4><p></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># todo 类</span><span class="token keyword">class</span> <span class="token class-name">BaseManager</span><span class="token punctuation">(</span>    address<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>         <span class="token comment"># 地址</span>    authkey<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>         <span class="token comment"># 身份验证</span>    serializer<span class="token operator">=</span><span class="token string">'pickle'</span><span class="token punctuation">,</span>  <span class="token comment"># 序列化程序</span>    ctx<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>             <span class="token comment"># 断续器？</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><details><summary>BaseManager 类方法(略)</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># todo 类方法</span>BaseManager<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># 为manager对象生成服务器进程</span>BaseManager<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 将manager对象连接到服务器进程</span>BaseManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 使用manager类型注册类型 ID</span>BaseManager<span class="token punctuation">.</span>get_server<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 返回具有serve_forever()方法和地址属性的服务器对象</span>BaseManager<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 加入manager进程（如果已生成）</span>BaseManager<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 关闭manager进程</span></code></pre></details><details><summary>BaseManager 类方法(详)</summary>————————————<details><summary>BaseManager.start()函数</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>initializer<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> initargs<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    启动manager    """</span></code></pre><p>具体使用见<font color="red">例2</font></p></details>————————————<details><summary>BaseManager.connect()函数</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    连接服务器进程    """</span></code></pre><p>具体使用见<font color="red">例1</font></p></details>————————————<details><summary>BaseManager.register()函数</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> BaseManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span>    typeid<span class="token punctuation">,</span>             <span class="token comment"># 字符串，类型标识符</span>    <span class="token builtin">callable</span><span class="token punctuation">,</span>           <span class="token comment"># 可调用对象的</span>    proxytype<span class="token punctuation">,</span>          <span class="token comment"># </span>    exposed<span class="token punctuation">,</span>            <span class="token comment"># </span>    method_to_typeid<span class="token punctuation">,</span>   <span class="token comment"># </span>    create_method<span class="token punctuation">,</span>      <span class="token comment"># </span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><blockquote><p>说得通俗一点：<br>1.<code>register</code>函数干的事就是给<code>BaseManager</code>类注册一个函数（类似动态绑定？）<br>2.<code>typeid</code>参数就是注册对象可以调用的函数<br>3.<code>callable</code>参数一般是队列的实例化对象，一般用函数返回，如下所示：</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> queue<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> BaseManagerq <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># todo 法1：定义函数</span><span class="token keyword">def</span> <span class="token function">get_q</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> q    <span class="token keyword">return</span> qBaseManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_q'</span><span class="token punctuation">,</span> <span class="token builtin">callable</span><span class="token operator">=</span>get_q<span class="token punctuation">)</span><span class="token comment"># todo 法2：匿名函数</span>BaseManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_q'</span><span class="token punctuation">,</span> <span class="token builtin">callable</span><span class="token operator">=</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> q<span class="token punctuation">)</span><span class="token comment"># 建议使用标准函数来代替lambda函数，避免python2.7中，pickle无法序列化lambda的问题，虽然但是现在基本都在用python3</span></code></pre>  <details><summary>BaseManager.register() 的(官方？)参数描述(已翻译)：</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>    typeid<span class="token punctuation">,</span>         <span class="token triple-quoted-string string">"""        typeid is a “type identifier” which is used to identify a particular type of shared object. This must be a string.        typeid 是一个“类型标识符”，用于标识特定类型的共享对象。这必须是一个字符串。        """</span>    <span class="token builtin">callable</span><span class="token punctuation">,</span>         <span class="token triple-quoted-string string">"""        callable is a callable used for creating objects for this type identifier.         callable 是一个可调用的使用，用于为此类型标识符创建对象。        If a manager instance will be created using the from_address() classmethod or if the create_method argument is False then this can be left as None.        如果将使用from_address()类方法或 create_method=False 创建 Manager 实例，则这可以留下。        """</span>    proxytype<span class="token punctuation">,</span>         <span class="token triple-quoted-string string">"""        proxytype is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid.         proxytype 是BaseProxy的子类，用于创建具有此类型的共享对象的代理。        If None then a proxy class is created automatically.        如果 proxytype=None，则自动创建代理类proxy。        """</span>    exposed<span class="token punctuation">,</span>         <span class="token triple-quoted-string string">"""        exposed is used to specify a sequence of method names which proxies for this typeid should be allowed to access using BaseProxy._callmethod().         exposed 用于指定应允许使用 BaseProxy._callMethod() 的代理的方法名称的序列。        (If exposed is None then proxytype._exposed_ is used instead if it exists.)         （如果 exposed=None，则不使用proxytype._exposed_如果存在。）        In the case where no exposed list is specified, all “public methods” of the shared object will be accessible.         在未指定未公开列表的情况下，将可以访问共享对象的所有“公共方法”。        (Here a “public method” means any attribute which has a __call__() method and whose name does not begin with '_'.)        （这里有一个“公共方法”是指具有 __call __()方法的任何属性，其名称不会以'_'开头。）        """</span>    method_to_typeid<span class="token punctuation">,</span>         <span class="token triple-quoted-string string">"""        method_to_typeid is a mapping used to specify the return type of those exposed methods which should return a proxy. It maps method names to typeid strings.         method_to_typeId 是用于指定应返回代理的那些公开方法的返回类型的映射。它将方法名称映射到 typeid 字符串。        (If method_to_typeid is None then proxytype._method_to_typeid_ is used instead if it exists.)         （如果method_to_typeId=None，则使用proxytype._method_to_typeid_，而不是存在。）        If a method’s name is not a key of this mapping or if the mapping is None then the object returned by the method will be copied by value.        如果方法的名称不是此映射的键，或者如果映射为None，则该方法返回的对象将被值复制。        """</span>    create_method<span class="token punctuation">,</span>         <span class="token triple-quoted-string string">"""        create_method determines whether a method should be created with name typeid which can be used to tell the server process to create a new shared object and return a proxy for it. By default it is True.        create_method 确定是否应该使用名称类型创建方法，该类型可以用于告诉服务器进程创建新的共享对象并返回代理。默认create_method=True。        """</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    A classmethod which can be used for registering a type or callable with the manager class.    一个类方法，可用于注册类型或可调用manager类。    """</span></code></pre>  </details></details>————————————<details><summary>BaseManager.get_server() 函数</summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    返回有serve_forever()方法的服务器对象    """</span></code></pre><p>具体使用见<font color="red">例1</font></p></details>————————————<details><summary>BaseManager.join() 函数</summary><p>这个函数没啥好说的，可以参考之前的<code>join</code>，但是貌似在这很少用到。。。。。。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">join</span><span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span></code></pre></details>————————————<details><summary><font>BaseManager.shutdown() 函数</font></summary><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> BaseManager<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    只有当进程start()之后才能使用，用于关闭manager进程    """</span></code></pre><p>具体使用见<font color="red">例2</font></p></details>————————————</details><p><a id="managers examp"><font color="black"></font></a></p><h4><a id="managers examp"><font color="black">managers类实例</font></a></h4><p></p><p>————————————————————————————————————————</p><ul><li><a id="managers1">managers示例1：使用BaseManager进行分布式进程任务（共三方参与）</a></li></ul><p>实例说明：本例中继承了<code>BaseManager</code>类，当然，把其中的<code>QueueManager</code>换成<code>BaseManager</code>也是完全没问题的。</p><p><font color="red">服务端Server</font></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> queue<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>managers <span class="token keyword">import</span> BaseManagerque <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">QueueManager</span><span class="token punctuation">(</span>BaseManager<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>QueueManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">"get_queue"</span><span class="token punctuation">,</span> <span class="token builtin">callable</span><span class="token operator">=</span><span class="token keyword">lambda</span><span class="token punctuation">:</span>que<span class="token punctuation">)</span>m <span class="token operator">=</span> QueueManager<span class="token punctuation">(</span>address<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authkey<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s <span class="token operator">=</span> m<span class="token punctuation">.</span>get_server<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><font color="red">发送端Send</font></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>managers <span class="token keyword">import</span> BaseManager<span class="token keyword">class</span> <span class="token class-name">QueueManager</span><span class="token punctuation">(</span>BaseManager<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>QueueManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">"get_queue"</span><span class="token punctuation">)</span>m <span class="token operator">=</span> QueueManager<span class="token punctuation">(</span>address<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authkey<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>queue <span class="token operator">=</span> m<span class="token punctuation">.</span>get_queue<span class="token punctuation">(</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span></code></pre><p><font color="red">接收端Recv</font></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>managers <span class="token keyword">import</span> BaseManager<span class="token keyword">class</span> <span class="token class-name">QueueManager</span><span class="token punctuation">(</span>BaseManager<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>QueueManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">"get_queue"</span><span class="token punctuation">)</span>m <span class="token operator">=</span> QueueManager<span class="token punctuation">(</span>address<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authkey<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>queue <span class="token operator">=</span> m<span class="token punctuation">.</span>get_queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>address<span class="token punctuation">)</span></code></pre><blockquote><p>使用方法：依次启动服务端、发送端和接收端即可。</p></blockquote><p>————————————————————————————————————————</p><ul><li><a id="managers2">managers示例2：使用BaseManager进行分布式进程任务（共两方参与）</a></li></ul><p>实例说明：manager服务端用于控制，worker工作及用于执行。这个例子创建了两个队列，大体思路差不多，具体步骤可展开下面内容查看。</p><details><summary>创建分布式进程需要的<font color="red">步骤</font>：</summary><ul><li><strong>一、建立用于进程间通信的队列Queue</strong></li></ul><p>服务进程创建任务队列 task_queue 和结果队列 result_queue。任务队列 task_queue 用来作为<font color="orange">传递任务给任务进</font>程的通道；服务进程创建结果队列 result_queue 用来作为任务进程<font color="orange">完成任务后回复服务进程</font>的通道。在分布式多进程环境下，必须由 Queuemanager 获得 Queue 接口来添加任务。</p><ul><li><strong>二、在网络上注册第一步中建立的队列，暴露给其他进程（主机）</strong></li></ul><p>注册后获得网络队列，相当于本地队列的映像。</p><ul><li><strong>三、建立对象实例manager，绑定端口和验证口令</strong></li></ul><p>对象的类Queuemanager继承自BaseManager</p><ul><li><strong>四、启动管理实例manager，监管信息通道</strong></li></ul><p>即：启动第三步中建立的实例</p><ul><li><strong>五、通过管理实例的方法获得通过网络访问的Queue对象</strong></li></ul><p>即：再把网络队列实体化成可以使用的本地队列</p><ul><li><strong>六、创建任务、上传任务、分配任务</strong></li></ul><p>创建任务到 “本地”队列中，自动上传任务到网络队列中，分配给任务进程进行处理。</p></details><p><font color="red">manager服务器</font></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>managers <span class="token keyword">import</span> BaseManager<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> freeze_support<span class="token punctuation">,</span> Queue<span class="token comment"># 任务个数</span>task_number <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 收发队列</span>task_quue <span class="token operator">=</span> Queue<span class="token punctuation">(</span>task_number<span class="token punctuation">)</span>result_queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span>task_number<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> task_quue<span class="token keyword">def</span> <span class="token function">get_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> result_queue<span class="token comment"># 创建类似的queueManager</span><span class="token keyword">class</span> <span class="token class-name">QueueManager</span><span class="token punctuation">(</span>BaseManager<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">win_run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 注册在网络上，callable 关联了Queue 对象</span>    <span class="token comment"># 将Queue对象在网络中暴露</span>    <span class="token comment">#window下绑定调用接口不能直接使用lambda，所以只能先定义函数再绑定</span>    QueueManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_task_queue'</span><span class="token punctuation">,</span> <span class="token builtin">callable</span><span class="token operator">=</span>get_task<span class="token punctuation">)</span>    QueueManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_result_queue'</span><span class="token punctuation">,</span> <span class="token builtin">callable</span><span class="token operator">=</span>get_result<span class="token punctuation">)</span>    <span class="token comment"># 绑定端口和设置验证口令</span>    manager <span class="token operator">=</span> QueueManager<span class="token punctuation">(</span>address<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8001</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authkey<span class="token operator">=</span><span class="token string">'qiye'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 启动管理，监听信息通道</span>    manager<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># 通过网络获取任务队列和结果队列</span>        task <span class="token operator">=</span> manager<span class="token punctuation">.</span>get_task_queue<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> manager<span class="token punctuation">.</span>get_result_queue<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 添加任务</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"ImageUrl_"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'url is %s'</span> <span class="token operator">%</span> url<span class="token punctuation">)</span>            task<span class="token punctuation">.</span>put<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'try get result'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result is %s'</span> <span class="token operator">%</span> result<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Manager error'</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        manager<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># window下多进程可能有问题，添加这句话缓解</span>    freeze_support<span class="token punctuation">(</span><span class="token punctuation">)</span>    win_run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><font color="red">worker工作机</font></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>managers <span class="token keyword">import</span> BaseManager<span class="token comment"># 创建类似的QueueManager:</span><span class="token keyword">class</span> <span class="token class-name">QueueManager</span><span class="token punctuation">(</span>BaseManager<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 实现第一步：使用QueueManager注册获取Queue的方法名称</span>QueueManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_task_queue'</span><span class="token punctuation">)</span>QueueManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_result_queue'</span><span class="token punctuation">)</span><span class="token comment"># 实现第二步：连接到服务器:</span>server_addr <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Connect to server %s...'</span> <span class="token operator">%</span> server_addr<span class="token punctuation">)</span><span class="token comment"># 端口和验证口令注意保持与服务进程设置的完全一致:</span>m <span class="token operator">=</span> QueueManager<span class="token punctuation">(</span>address<span class="token operator">=</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">,</span> <span class="token number">8001</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authkey<span class="token operator">=</span><span class="token string">'qiye'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 从网络连接:</span>m<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 实现第三步：获取Queue的对象:</span>task <span class="token operator">=</span> m<span class="token punctuation">.</span>get_task_queue<span class="token punctuation">(</span><span class="token punctuation">)</span>result <span class="token operator">=</span> m<span class="token punctuation">.</span>get_result_queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 实现第四步：从task队列取任务,并把结果写入result队列:</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">not</span> task<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        image_url <span class="token operator">=</span> task<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run task download %s...'</span> <span class="token operator">%</span> image_url<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        result<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'%s---&gt;success'</span><span class="token operator">%</span>image_url<span class="token punctuation">)</span><span class="token comment"># 处理结束:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'worker exit.'</span><span class="token punctuation">)</span></code></pre><p>————————————————————————————————————————</p><ul><li><a id="managers3">managers示例3：使用BaseManager进行分布式进程任务（一对多）</a></li></ul><p>实例说明：与例2差不多，依次启动服务端和多个客户端即可。</p><p><font color="red">服务端manager</font></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># encoding:utf-8</span><span class="token keyword">import</span> random<span class="token punctuation">,</span> time<span class="token punctuation">,</span> queue<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>managers <span class="token keyword">import</span> BaseManager<span class="token comment"># 发送任务的队列</span>task_queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 接收结果的队列</span>result_queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 使用标准函数来代替lambda函数，避免python2.7中，pickle无法序列化lambda的问题</span><span class="token keyword">def</span> <span class="token function">get_task_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> task_queue    <span class="token keyword">return</span> task_queue<span class="token comment"># 使用标准函数来代替lambda函数，避免python2.7中，pickle无法序列化lambda的问题</span><span class="token keyword">def</span> <span class="token function">get_result_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> task_queue    <span class="token keyword">return</span> task_queue<span class="token keyword">def</span> <span class="token function">startManager</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> authkey<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 把两个Queue都注册到网络上，callable参数关联了Queue对象，注意回调函数不能使用括号</span>    BaseManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_task_queue'</span><span class="token punctuation">,</span> <span class="token builtin">callable</span><span class="token operator">=</span>get_task_queue<span class="token punctuation">)</span>    BaseManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_result_queue'</span><span class="token punctuation">,</span> <span class="token builtin">callable</span><span class="token operator">=</span>get_result_queue<span class="token punctuation">)</span>    <span class="token comment"># 设置host,绑定端口port，设置验证码为authkey</span>    manager <span class="token operator">=</span> BaseManager<span class="token punctuation">(</span>address<span class="token operator">=</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">,</span> authkey<span class="token operator">=</span>authkey<span class="token punctuation">)</span>    <span class="token comment"># 启动manager服务器</span>    manager<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> manager<span class="token keyword">def</span> <span class="token function">put_queue</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 通过网络访问queueu</span>    task <span class="token operator">=</span> manager<span class="token punctuation">.</span>get_task_queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Put task %d'</span> <span class="token operator">%</span> n<span class="token punctuation">)</span>        task<span class="token punctuation">.</span>put<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    host <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>    port <span class="token operator">=</span> <span class="token number">5000</span>    authkey <span class="token operator">=</span> <span class="token string">'abc'</span>    <span class="token comment"># 启动manager服务器</span>    manager <span class="token operator">=</span> startManager<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> authkey<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 给task队列添加数据</span>    put_queue<span class="token punctuation">(</span>manager<span class="token punctuation">)</span>    <span class="token comment"># 关闭服务器</span>    manager<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><font color="red">执行端worker</font></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># encoding:utf-8</span><span class="token keyword">import</span> random<span class="token punctuation">,</span> time<span class="token punctuation">,</span> queue<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>managers <span class="token keyword">import</span> BaseManager<span class="token keyword">def</span> <span class="token function">start_worker</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> authkey<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 由于这个BaseManager只从网络上获取queue，所以注册时只提供名字</span>    BaseManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_task_queue'</span><span class="token punctuation">)</span>    BaseManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_result_queue'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Connect to server %s'</span> <span class="token operator">%</span> host<span class="token punctuation">)</span>    <span class="token comment"># 注意，端口port和验证码authkey必须和manager服务器设置的完全一致</span>    worker <span class="token operator">=</span> BaseManager<span class="token punctuation">(</span>address<span class="token operator">=</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">,</span> authkey<span class="token operator">=</span>authkey<span class="token punctuation">)</span>    <span class="token comment"># 链接到manager服务器</span>    worker<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> worker<span class="token keyword">def</span> <span class="token function">get_queue</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">:</span>    task <span class="token operator">=</span> worker<span class="token punctuation">.</span>get_task_queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> worker<span class="token punctuation">.</span>get_result_queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 从task队列取数据，并添加到result队列中</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> task<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        n <span class="token operator">=</span> task<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'worker get %d'</span> <span class="token operator">%</span> n<span class="token punctuation">)</span>        result<span class="token punctuation">.</span>put<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    host <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>    port <span class="token operator">=</span> <span class="token number">5000</span>    authkey <span class="token operator">=</span> <span class="token string">'abc'</span>    <span class="token comment"># 启动worker</span>    worker <span class="token operator">=</span> start_worker<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> authkey<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 获取队列</span>    get_queue<span class="token punctuation">(</span>worker<span class="token punctuation">)</span></code></pre><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>较全的进程内容：</p><table><thead><tr><th align="center">连接</th><th align="center">标签</th><th align="center">说明</th><th align="center">网站</th></tr></thead><tbody><tr><td align="center"><a href="https://blog.csdn.net/qq_41922768/category_7767239.html">python基础-进程</a></td><td align="center"><code>multiprocessing</code></td><td align="center">这个专栏系列内容很多很全、讲原理、解释参数、实例多</td><td align="center">CSDN</td></tr><tr><td align="center"><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017628290184064">多进程</a></td><td align="center"><code>Process</code> <code>Queue</code> <code>Pool</code></td><td align="center">讲原理、不解释参数、一般</td><td align="center">廖雪峰的官方网站</td></tr><tr><td align="center"><a href="https://www.cnblogs.com/dbf-/p/11127000.html">Python process (进程)</a></td><td align="center"><code>Process</code> <code>Pipe</code> <code>Queue</code> <code>Manager</code> <code>Lock</code> <code>Pool</code></td><td align="center">不解释参数、有一定原理内容</td><td align="center">博客园</td></tr><tr><td align="center"><a href="https://www.cnblogs.com/yzh2857/p/9683398.html">《Python》进程之间的通信（IPC）、进程之间的数据共享、进程池</a></td><td align="center"><code>Pipe</code> <code>Queue</code> <code>JoinableQueue</code> <code>Manager</code> <code>Process</code> <code>Lock</code> <code>Pool</code></td><td align="center">解释参数、有一定的原理、有上述未涉及内容</td><td align="center">博客园</td></tr><tr><td align="center"><a href="https://zhuanlan.zhihu.com/p/64702600">一篇文章搞定Python多进程(全)</a></td><td align="center"><code>Process</code> <code>Pipe</code> <code>Queue</code> <code>Manager</code> <code>Pool</code></td><td align="center">解释参数、有一定的原理、有上述未涉及内容</td><td align="center">知乎</td></tr></tbody></table><p>线程池：</p><table><thead><tr><th align="center">连接</th><th align="center">标签</th><th align="center">说明</th><th align="center">网站</th></tr></thead><tbody><tr><td align="center"><a href="https://hexo.yuanjh.cn/hexo/e279ffad/">python进阶08并发之四map, apply, map_async, apply_async差异</a></td><td align="center"><code>Pool</code></td><td align="center">并发map/apply的差异</td><td align="center">个人博客</td></tr><tr><td align="center"><a href="http://blog.shenwei.me/python-multiprocessing-pool-difference-between-map-apply-map_async-apply_async/">Python multiprocessing.Pool: Difference between map, apply, map_async, apply_async</a></td><td align="center"><code>Pool</code></td><td align="center">并发map/apply的差异</td><td align="center">个人博客？</td></tr></tbody></table><p><code>subprocess</code>：</p><table><thead><tr><th align="center">连接</th><th align="center">标签</th><th align="center">说明</th><th align="center">网站</th></tr></thead><tbody><tr><td align="center"><a href="https://blog.csdn.net/weixin_39059031/article/details/108440342">Python进阶(十)多进程multiprocessing和subprocess模块</a></td><td align="center"><code>multiprocessing</code> <code>subprocess</code></td><td align="center">原理讲明白、参数解释清楚、例子多（插一句，里面的python系列内容也写的挺好的）</td><td align="center">CSDN</td></tr></tbody></table><p>分布式进程：（大概看一下就行了，毕竟大家都是互相抄的）</p><table><thead><tr><th align="center">连接</th><th align="center">标签</th><th align="center">说明</th><th align="center">网站</th></tr></thead><tbody><tr><td align="center"><a href="https://docs.python.org/zh-cn/3.8/library/multiprocessing.html?highlight=freeze_support#examples">multiprocessing — 基于进程的并行</a></td><td align="center"><code>multiprocessing</code></td><td align="center">python官网的例子</td><td align="center">python官网</td></tr><tr><td align="center"><a href="https://www.cnblogs.com/liunnis/tag/BaseManager/">BaseManager</a></td><td align="center"><code>BaseManager</code></td><td align="center">这个系列有.东西</td><td align="center">博客园</td></tr><tr><td align="center"><a href="https://www.cnblogs.com/guguobao/p/9400299.html">python分布式进程</a></td><td align="center"><code>managers</code></td><td align="center">。。。。。。</td><td align="center">博客园</td></tr><tr><td align="center"><a href="https://www.cnblogs.com/chmyee/p/10081531.html">python 分布式进程实现</a></td><td align="center"><code>managers</code></td><td align="center">。。。。。。</td><td align="center">博客园</td></tr><tr><td align="center"><a href="https://www.ktanx.com/blog/p/870">python 分布式进程</a></td><td align="center"><code>managers</code></td><td align="center">。。。。。。</td><td align="center">ktanx</td></tr><tr><td align="center"><a href="https://blog.csdn.net/chengxun03/article/details/105802073">在Python程序中实现分布式进程的教程</a></td><td align="center"><code>managers</code></td><td align="center">。。。。。。</td><td align="center">CSDN</td></tr><tr><td align="center"><a href="https://blog.csdn.net/lilong117194/article/details/76051843">python分布式进程（windows下）</a></td><td align="center"><code>managers</code></td><td align="center">。。。。。。</td><td align="center">CSDN</td></tr><tr><td align="center"><a href="http://t.zoukankan.com/bin-l-p-8615201.html">Python 分布式进程</a></td><td align="center"><code>managers</code></td><td align="center">。。。。。。</td><td align="center">个人博客</td></tr></tbody></table><h2 id="待完成"><a href="#待完成" class="headerlink" title="待完成"></a>待完成</h2><ul><li><input disabled="" type="checkbox"> socket实例</li><li><input checked="" disabled="" type="checkbox"> 通信模式</li><li><input disabled="" type="checkbox"> <a href="https://blog.csdn.net/qq_41922768/article/details/83995322">进程同步</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://blog.csdn.net/qq_41922768/article/details/84024587">数据共享Manager</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://blog.csdn.net/ctwy291314/article/details/89358144">共享内存Value,Array</a></li><li><input disabled="" type="checkbox"> 子进程<code>subprocess</code></li><li><input checked="" disabled="" type="checkbox"> 进程池</li><li><input disabled="" type="checkbox"> IO序列化</li><li><input checked="" disabled="" type="checkbox"> 分布式进程</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
